{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\viralswap-info-bsc\\\\src\\\\components\\\\GlobalChart\\\\index.js\";\nimport React, { useState, useMemo, useEffect, useRef } from 'react';\nimport { ResponsiveContainer } from 'recharts';\nimport { timeframeOptions } from '../../constants';\nimport { useGlobalChartData, useGlobalData } from '../../contexts/GlobalData';\nimport { useMedia } from 'react-use';\nimport DropdownSelect from '../DropdownSelect';\nimport TradingViewChart, { CHART_TYPES } from '../TradingviewChart';\nimport { RowFixed } from '../Row';\nimport { OptionButton } from '../ButtonStyled';\nimport { getTimeframe } from '../../utils';\nimport { TYPE } from '../../Theme';\nconst CHART_VIEW = {\n  VOLUME: 'Volume',\n  LIQUIDITY: 'Liquidity'\n};\nconst VOLUME_WINDOW = {\n  WEEKLY: 'WEEKLY',\n  DAYS: 'DAYS'\n};\n\nconst GlobalChart = ({\n  display\n}) => {\n  var _ref$current, _ref$current$containe;\n\n  // chart options\n  const [chartView, setChartView] = useState(display === 'volume' ? CHART_VIEW.VOLUME : CHART_VIEW.LIQUIDITY); // time window and window size for chart\n\n  const timeWindow = timeframeOptions.ALL_TIME;\n  const [volumeWindow, setVolumeWindow] = useState(VOLUME_WINDOW.DAYS); // global historical data\n\n  const [dailyData, weeklyData] = useGlobalChartData();\n  const {\n    totalLiquidityUSD,\n    oneDayVolumeUSD,\n    volumeChangeUSD,\n    liquidityChangeUSD,\n    oneWeekVolume,\n    weeklyVolumeChange\n  } = useGlobalData(); // based on window, get starttim\n\n  let utcStartTime = getTimeframe(timeWindow);\n  const chartDataFiltered = useMemo(() => {\n    var _Object$keys;\n\n    let currentData = volumeWindow === VOLUME_WINDOW.DAYS ? dailyData : weeklyData;\n    return currentData && ((_Object$keys = Object.keys(currentData)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.map(key => {\n      let item = currentData[key];\n\n      if (item.date > utcStartTime) {\n        return item;\n      } else {\n        return;\n      }\n    }).filter(item => {\n      return !!item;\n    }));\n  }, [dailyData, utcStartTime, volumeWindow, weeklyData]);\n  const below800 = useMedia('(max-width: 800px)'); // update the width on a window resize\n\n  const ref = useRef();\n  const isClient = typeof window === 'object';\n  const [width, setWidth] = useState(ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$containe = _ref$current.container) === null || _ref$current$containe === void 0 ? void 0 : _ref$current$containe.clientWidth);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      var _ref, _ref$current2, _ref$current2$contain;\n\n      setWidth((_ref = ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : (_ref$current2$contain = _ref$current2.container) === null || _ref$current2$contain === void 0 ? void 0 : _ref$current2$contain.clientWidth) !== null && _ref !== void 0 ? _ref : width);\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [isClient, width]); // Empty array ensures that effect is only run on mount and unmount\n\n  return chartDataFiltered ? React.createElement(React.Fragment, null, below800 && React.createElement(DropdownSelect, {\n    options: CHART_VIEW,\n    active: chartView,\n    setActive: setChartView,\n    color: '#4FD8DE',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), chartDataFiltered && chartView === CHART_VIEW.LIQUIDITY && React.createElement(ResponsiveContainer, {\n    aspect: 60 / 28,\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(TradingViewChart, {\n    data: dailyData,\n    base: totalLiquidityUSD,\n    baseChange: liquidityChangeUSD,\n    title: \"Liquidity\",\n    field: \"totalLiquidityUSD\",\n    width: width,\n    type: CHART_TYPES.AREA,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), chartDataFiltered && chartView === CHART_VIEW.VOLUME && React.createElement(ResponsiveContainer, {\n    aspect: 60 / 28,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(TradingViewChart, {\n    data: chartDataFiltered,\n    base: volumeWindow === VOLUME_WINDOW.WEEKLY ? oneWeekVolume : oneDayVolumeUSD,\n    baseChange: volumeWindow === VOLUME_WINDOW.WEEKLY ? weeklyVolumeChange : volumeChangeUSD,\n    title: volumeWindow === VOLUME_WINDOW.WEEKLY ? 'Volume (7d)' : 'Volume',\n    field: volumeWindow === VOLUME_WINDOW.WEEKLY ? 'weeklyVolumeUSD' : 'dailyVolumeUSD',\n    width: width,\n    type: CHART_TYPES.BAR,\n    useWeekly: volumeWindow === VOLUME_WINDOW.WEEKLY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), display === 'volume' && React.createElement(RowFixed, {\n    style: {\n      bottom: '70px',\n      position: 'absolute',\n      left: '20px',\n      zIndex: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(OptionButton, {\n    active: volumeWindow === VOLUME_WINDOW.DAYS,\n    onClick: () => setVolumeWindow(VOLUME_WINDOW.DAYS),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(TYPE.body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"D\")), React.createElement(OptionButton, {\n    style: {\n      marginLeft: '4px'\n    },\n    active: volumeWindow === VOLUME_WINDOW.WEEKLY,\n    onClick: () => setVolumeWindow(VOLUME_WINDOW.WEEKLY),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(TYPE.body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"W\")))) : '';\n};\n\nexport default GlobalChart;","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/viralswap-info-bsc/src/components/GlobalChart/index.js"],"names":["React","useState","useMemo","useEffect","useRef","ResponsiveContainer","timeframeOptions","useGlobalChartData","useGlobalData","useMedia","DropdownSelect","TradingViewChart","CHART_TYPES","RowFixed","OptionButton","getTimeframe","TYPE","CHART_VIEW","VOLUME","LIQUIDITY","VOLUME_WINDOW","WEEKLY","DAYS","GlobalChart","display","chartView","setChartView","timeWindow","ALL_TIME","volumeWindow","setVolumeWindow","dailyData","weeklyData","totalLiquidityUSD","oneDayVolumeUSD","volumeChangeUSD","liquidityChangeUSD","oneWeekVolume","weeklyVolumeChange","utcStartTime","chartDataFiltered","currentData","Object","keys","map","key","item","date","filter","below800","ref","isClient","window","width","setWidth","current","container","clientWidth","handleResize","addEventListener","removeEventListener","AREA","BAR","bottom","position","left","zIndex","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect, useRef } from 'react'\r\nimport { ResponsiveContainer } from 'recharts'\r\nimport { timeframeOptions } from '../../constants'\r\nimport { useGlobalChartData, useGlobalData } from '../../contexts/GlobalData'\r\nimport { useMedia } from 'react-use'\r\nimport DropdownSelect from '../DropdownSelect'\r\nimport TradingViewChart, { CHART_TYPES } from '../TradingviewChart'\r\nimport { RowFixed } from '../Row'\r\nimport { OptionButton } from '../ButtonStyled'\r\nimport { getTimeframe } from '../../utils'\r\nimport { TYPE } from '../../Theme'\r\n\r\nconst CHART_VIEW = {\r\n  VOLUME: 'Volume',\r\n  LIQUIDITY: 'Liquidity',\r\n}\r\n\r\nconst VOLUME_WINDOW = {\r\n  WEEKLY: 'WEEKLY',\r\n  DAYS: 'DAYS',\r\n}\r\nconst GlobalChart = ({ display }) => {\r\n  // chart options\r\n  const [chartView, setChartView] = useState(display === 'volume' ? CHART_VIEW.VOLUME : CHART_VIEW.LIQUIDITY)\r\n\r\n  // time window and window size for chart\r\n  const timeWindow = timeframeOptions.ALL_TIME\r\n  const [volumeWindow, setVolumeWindow] = useState(VOLUME_WINDOW.DAYS)\r\n\r\n  // global historical data\r\n  const [dailyData, weeklyData] = useGlobalChartData()\r\n  const {\r\n    totalLiquidityUSD,\r\n    oneDayVolumeUSD,\r\n    volumeChangeUSD,\r\n    liquidityChangeUSD,\r\n    oneWeekVolume,\r\n    weeklyVolumeChange,\r\n  } = useGlobalData()\r\n\r\n  // based on window, get starttim\r\n  let utcStartTime = getTimeframe(timeWindow)\r\n\r\n  const chartDataFiltered = useMemo(() => {\r\n    let currentData = volumeWindow === VOLUME_WINDOW.DAYS ? dailyData : weeklyData\r\n    return (\r\n      currentData &&\r\n      Object.keys(currentData)\r\n        ?.map((key) => {\r\n          let item = currentData[key]\r\n          if (item.date > utcStartTime) {\r\n            return item\r\n          } else {\r\n            return\r\n          }\r\n        })\r\n        .filter((item) => {\r\n          return !!item\r\n        })\r\n    )\r\n  }, [dailyData, utcStartTime, volumeWindow, weeklyData])\r\n  const below800 = useMedia('(max-width: 800px)')\r\n\r\n  // update the width on a window resize\r\n  const ref = useRef()\r\n  const isClient = typeof window === 'object'\r\n  const [width, setWidth] = useState(ref?.current?.container?.clientWidth)\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return false\r\n    }\r\n    function handleResize() {\r\n      setWidth(ref?.current?.container?.clientWidth ?? width)\r\n    }\r\n    window.addEventListener('resize', handleResize)\r\n    return () => window.removeEventListener('resize', handleResize)\r\n  }, [isClient, width]) // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return chartDataFiltered ? (\r\n    <>\r\n      {below800 && (\r\n        <DropdownSelect options={CHART_VIEW} active={chartView} setActive={setChartView} color={'#4FD8DE'} />\r\n      )}\r\n\r\n      {chartDataFiltered && chartView === CHART_VIEW.LIQUIDITY && (\r\n        <ResponsiveContainer aspect={60 / 28} ref={ref}>\r\n          <TradingViewChart\r\n            data={dailyData}\r\n            base={totalLiquidityUSD}\r\n            baseChange={liquidityChangeUSD}\r\n            title=\"Liquidity\"\r\n            field=\"totalLiquidityUSD\"\r\n            width={width}\r\n            type={CHART_TYPES.AREA}\r\n          />\r\n        </ResponsiveContainer>\r\n      )}\r\n      {chartDataFiltered && chartView === CHART_VIEW.VOLUME && (\r\n        <ResponsiveContainer aspect={60 / 28}>\r\n          <TradingViewChart\r\n            data={chartDataFiltered}\r\n            base={volumeWindow === VOLUME_WINDOW.WEEKLY ? oneWeekVolume : oneDayVolumeUSD}\r\n            baseChange={volumeWindow === VOLUME_WINDOW.WEEKLY ? weeklyVolumeChange : volumeChangeUSD}\r\n            title={volumeWindow === VOLUME_WINDOW.WEEKLY ? 'Volume (7d)' : 'Volume'}\r\n            field={volumeWindow === VOLUME_WINDOW.WEEKLY ? 'weeklyVolumeUSD' : 'dailyVolumeUSD'}\r\n            width={width}\r\n            type={CHART_TYPES.BAR}\r\n            useWeekly={volumeWindow === VOLUME_WINDOW.WEEKLY}\r\n          />\r\n        </ResponsiveContainer>\r\n      )}\r\n      {display === 'volume' && (\r\n        <RowFixed\r\n          style={{\r\n            bottom: '70px',\r\n            position: 'absolute',\r\n            left: '20px',\r\n            zIndex: 10,\r\n          }}\r\n        >\r\n          <OptionButton\r\n            active={volumeWindow === VOLUME_WINDOW.DAYS}\r\n            onClick={() => setVolumeWindow(VOLUME_WINDOW.DAYS)}\r\n          >\r\n            <TYPE.body>D</TYPE.body>\r\n          </OptionButton>\r\n          <OptionButton\r\n            style={{ marginLeft: '4px' }}\r\n            active={volumeWindow === VOLUME_WINDOW.WEEKLY}\r\n            onClick={() => setVolumeWindow(VOLUME_WINDOW.WEEKLY)}\r\n          >\r\n            <TYPE.body>W</TYPE.body>\r\n          </OptionButton>\r\n        </RowFixed>\r\n      )}\r\n    </>\r\n  ) : (\r\n    ''\r\n  )\r\n}\r\n\r\nexport default GlobalChart\r\n"]},"metadata":{},"sourceType":"module"}