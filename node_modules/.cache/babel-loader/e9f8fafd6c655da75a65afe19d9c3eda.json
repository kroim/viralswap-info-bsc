{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\pancake-info-v1\\\\src\\\\contexts\\\\TokenData.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react';\nimport { client } from '../apollo/client';\nimport { TOKEN_DATA, FILTERED_TRANSACTIONS, TOKEN_CHART, TOKENS_CURRENT, TOKENS_DYNAMIC, PRICES_BY_BLOCK, PAIR_DATA } from '../apollo/queries';\nimport { useEthPrice } from './GlobalData';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { get2DayPercentChange, getPercentChange, getBlockFromTimestamp, isAddress, getBlocksFromTimestamps, splitQuery } from '../utils';\nimport { timeframeOptions } from '../constants';\nimport { useLatestBlocks } from './Application';\nimport { updateNameData } from '../utils/data';\nconst UPDATE = 'UPDATE';\nconst UPDATE_TOKEN_TXNS = 'UPDATE_TOKEN_TXNS';\nconst UPDATE_CHART_DATA = 'UPDATE_CHART_DATA';\nconst UPDATE_PRICE_DATA = 'UPDATE_PRICE_DATA';\nconst UPDATE_TOP_TOKENS = ' UPDATE_TOP_TOKENS';\nconst UPDATE_ALL_PAIRS = 'UPDATE_ALL_PAIRS';\nconst TOKEN_PAIRS_KEY = 'TOKEN_PAIRS_KEY';\ndayjs.extend(utc);\nconst TokenDataContext = createContext();\n\nfunction useTokenDataContext() {\n  return useContext(TokenDataContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE:\n      {\n        const {\n          tokenAddress,\n          data\n        } = payload;\n        return { ...state,\n          [tokenAddress]: { ...(state === null || state === void 0 ? void 0 : state[tokenAddress]),\n            ...data\n          }\n        };\n      }\n\n    case UPDATE_TOP_TOKENS:\n      {\n        const {\n          topTokens\n        } = payload;\n        let added = {};\n        topTokens && topTokens.map(token => {\n          return added[token.id] = token;\n        });\n        return { ...state,\n          ...added\n        };\n      }\n\n    case UPDATE_TOKEN_TXNS:\n      {\n        const {\n          address,\n          transactions\n        } = payload;\n        return { ...state,\n          [address]: { ...(state === null || state === void 0 ? void 0 : state[address]),\n            txns: transactions\n          }\n        };\n      }\n\n    case UPDATE_CHART_DATA:\n      {\n        const {\n          address,\n          chartData\n        } = payload;\n        return { ...state,\n          [address]: { ...(state === null || state === void 0 ? void 0 : state[address]),\n            chartData\n          }\n        };\n      }\n\n    case UPDATE_PRICE_DATA:\n      {\n        var _state$address;\n\n        const {\n          address,\n          data,\n          timeWindow,\n          interval\n        } = payload;\n        return { ...state,\n          [address]: { ...(state === null || state === void 0 ? void 0 : state[address]),\n            [timeWindow]: { ...(state === null || state === void 0 ? void 0 : (_state$address = state[address]) === null || _state$address === void 0 ? void 0 : _state$address[timeWindow]),\n              [interval]: data\n            }\n          }\n        };\n      }\n\n    case UPDATE_ALL_PAIRS:\n      {\n        const {\n          address,\n          allPairs\n        } = payload;\n        return { ...state,\n          [address]: { ...(state === null || state === void 0 ? void 0 : state[address]),\n            [TOKEN_PAIRS_KEY]: allPairs\n          }\n        };\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in DataContext reducer: '${type}'.`);\n      }\n  }\n}\n\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, {});\n  const update = useCallback((tokenAddress, data) => {\n    dispatch({\n      type: UPDATE,\n      payload: {\n        tokenAddress,\n        data\n      }\n    });\n  }, []);\n  const updateTopTokens = useCallback(topTokens => {\n    dispatch({\n      type: UPDATE_TOP_TOKENS,\n      payload: {\n        topTokens\n      }\n    });\n  }, []);\n  const updateTokenTxns = useCallback((address, transactions) => {\n    dispatch({\n      type: UPDATE_TOKEN_TXNS,\n      payload: {\n        address,\n        transactions\n      }\n    });\n  }, []);\n  const updateChartData = useCallback((address, chartData) => {\n    dispatch({\n      type: UPDATE_CHART_DATA,\n      payload: {\n        address,\n        chartData\n      }\n    });\n  }, []);\n  const updateAllPairs = useCallback((address, allPairs) => {\n    dispatch({\n      type: UPDATE_ALL_PAIRS,\n      payload: {\n        address,\n        allPairs\n      }\n    });\n  }, []);\n  const updatePriceData = useCallback((address, data, timeWindow, interval) => {\n    dispatch({\n      type: UPDATE_PRICE_DATA,\n      payload: {\n        address,\n        data,\n        timeWindow,\n        interval\n      }\n    });\n  }, []);\n  return React.createElement(TokenDataContext.Provider, {\n    value: useMemo(() => [state, {\n      update,\n      updateTokenTxns,\n      updateChartData,\n      updateTopTokens,\n      updateAllPairs,\n      updatePriceData\n    }], [state, update, updateTokenTxns, updateChartData, updateTopTokens, updateAllPairs, updatePriceData]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, children);\n}\n\nconst getTopTokens = async (ethPrice, ethPriceOld) => {\n  // const utcCurrentTime = dayjs.unix(1616025600)\n  const utcCurrentTime = dayjs.unix(1665062000);\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n  let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n  let twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack);\n\n  try {\n    var _oneDayResult$data, _twoDayResult$data, _current$data;\n\n    let current = await client.query({\n      query: TOKENS_CURRENT,\n      fetchPolicy: 'cache-first'\n    });\n    let oneDayResult = await client.query({\n      query: TOKENS_DYNAMIC(oneDayBlock),\n      fetchPolicy: 'cache-first'\n    });\n    let twoDayResult = await client.query({\n      query: TOKENS_DYNAMIC(twoDayBlock),\n      fetchPolicy: 'cache-first'\n    });\n    let oneDayData = oneDayResult === null || oneDayResult === void 0 ? void 0 : (_oneDayResult$data = oneDayResult.data) === null || _oneDayResult$data === void 0 ? void 0 : _oneDayResult$data.tokens.reduce((obj, cur, i) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    let twoDayData = twoDayResult === null || twoDayResult === void 0 ? void 0 : (_twoDayResult$data = twoDayResult.data) === null || _twoDayResult$data === void 0 ? void 0 : _twoDayResult$data.tokens.reduce((obj, cur, i) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    let bulkResults = await Promise.all(current && oneDayData && twoDayData && (current === null || current === void 0 ? void 0 : (_current$data = current.data) === null || _current$data === void 0 ? void 0 : _current$data.tokens.map(async token => {\n      var _ref, _oneDayHistory, _ref2, _twoDayHistory, _ref3, _oneDayHistory2, _ref4, _twoDayHistory2, _oneDayHistory3, _oneDayHistory4, _oneDayHistory5, _oneDayHistory6;\n\n      let data = token; // let liquidityDataThisToken = liquidityData?.[token.id]\n\n      let oneDayHistory = oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData[token.id];\n      let twoDayHistory = twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData[token.id]; // catch the case where token wasnt in top list in previous days\n\n      if (!oneDayHistory) {\n        let oneDayResult = await client.query({\n          query: TOKEN_DATA(token.id, oneDayBlock),\n          fetchPolicy: 'cache-first'\n        });\n        oneDayHistory = oneDayResult.data.tokens[0];\n      }\n\n      if (!twoDayHistory) {\n        let twoDayResult = await client.query({\n          query: TOKEN_DATA(token.id, twoDayBlock),\n          fetchPolicy: 'cache-first'\n        });\n        twoDayHistory = twoDayResult.data.tokens[0];\n      } // calculate percentage changes and daily changes\n\n\n      const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data.tradeVolumeUSD, (_ref = (_oneDayHistory = oneDayHistory) === null || _oneDayHistory === void 0 ? void 0 : _oneDayHistory.tradeVolumeUSD) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = (_twoDayHistory = twoDayHistory) === null || _twoDayHistory === void 0 ? void 0 : _twoDayHistory.tradeVolumeUSD) !== null && _ref2 !== void 0 ? _ref2 : 0);\n      const [oneDayTxns, txnChange] = get2DayPercentChange(data.txCount, (_ref3 = (_oneDayHistory2 = oneDayHistory) === null || _oneDayHistory2 === void 0 ? void 0 : _oneDayHistory2.txCount) !== null && _ref3 !== void 0 ? _ref3 : 0, (_ref4 = (_twoDayHistory2 = twoDayHistory) === null || _twoDayHistory2 === void 0 ? void 0 : _twoDayHistory2.txCount) !== null && _ref4 !== void 0 ? _ref4 : 0);\n      const currentLiquidityUSD = (data === null || data === void 0 ? void 0 : data.totalLiquidity) * ethPrice * (data === null || data === void 0 ? void 0 : data.derivedETH);\n      const oldLiquidityUSD = ((_oneDayHistory3 = oneDayHistory) === null || _oneDayHistory3 === void 0 ? void 0 : _oneDayHistory3.totalLiquidity) * ethPriceOld * ((_oneDayHistory4 = oneDayHistory) === null || _oneDayHistory4 === void 0 ? void 0 : _oneDayHistory4.derivedETH); // percent changes\n\n      const priceChangeUSD = getPercentChange((data === null || data === void 0 ? void 0 : data.derivedETH) * ethPrice, ((_oneDayHistory5 = oneDayHistory) === null || _oneDayHistory5 === void 0 ? void 0 : _oneDayHistory5.derivedETH) ? ((_oneDayHistory6 = oneDayHistory) === null || _oneDayHistory6 === void 0 ? void 0 : _oneDayHistory6.derivedETH) * ethPriceOld : 0); // set data\n\n      data.priceUSD = (data === null || data === void 0 ? void 0 : data.derivedETH) * ethPrice;\n      data.totalLiquidityUSD = currentLiquidityUSD;\n      data.oneDayVolumeUSD = parseFloat(oneDayVolumeUSD);\n      data.volumeChangeUSD = volumeChangeUSD;\n      data.priceChangeUSD = priceChangeUSD;\n      data.liquidityChangeUSD = getPercentChange(currentLiquidityUSD !== null && currentLiquidityUSD !== void 0 ? currentLiquidityUSD : 0, oldLiquidityUSD !== null && oldLiquidityUSD !== void 0 ? oldLiquidityUSD : 0);\n      data.oneDayTxns = oneDayTxns;\n      data.txnChange = txnChange; // new tokens\n\n      if (!oneDayHistory && data) {\n        data.oneDayVolumeUSD = data.tradeVolumeUSD;\n        data.oneDayVolumeETH = data.tradeVolume * data.derivedETH;\n        data.oneDayTxns = data.txCount;\n      } // update name data for\n\n\n      updateNameData({\n        token0: data\n      }); // HOTFIX for Aave\n\n      if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\n        const aaveData = await client.query({\n          query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\n          fetchPolicy: 'cache-first'\n        });\n        const result = aaveData.data.pairs[0];\n        data.totalLiquidityUSD = parseFloat(result.reserveUSD) / 2;\n        data.liquidityChangeUSD = 0;\n        data.priceChangeUSD = 0;\n      }\n\n      return data;\n    })));\n    return bulkResults; // calculate percentage changes and daily changes\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst getTokenData = async (address, ethPrice, ethPriceOld) => {\n  // const utcCurrentTime = dayjs.unix(1616025600)\n  const utcCurrentTime = dayjs.unix(1665062000);\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix();\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').startOf('minute').unix();\n  let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n  let twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack); // initialize data arrays\n\n  let data = {};\n  let oneDayData = {};\n  let twoDayData = {};\n\n  try {\n    var _result$data, _result$data$tokens, _ref5, _oneDayData, _ref6, _twoDayData, _ref7, _oneDayData2, _ref8, _twoDayData2, _ref9, _oneDayData3, _ref10, _twoDayData3, _data, _ref11, _oneDayData4, _data2, _data3, _oneDayData5, _oneDayData6, _data4;\n\n    // fetch all current and historical data\n    let result = await client.query({\n      query: TOKEN_DATA(address),\n      fetchPolicy: 'cache-first'\n    });\n    data = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$tokens = _result$data.tokens) === null || _result$data$tokens === void 0 ? void 0 : _result$data$tokens[0]; // get results from 24 hours in past\n\n    let oneDayResult = await client.query({\n      query: TOKEN_DATA(address, oneDayBlock),\n      fetchPolicy: 'cache-first'\n    });\n    oneDayData = oneDayResult.data.tokens[0]; // get results from 48 hours in past\n\n    let twoDayResult = await client.query({\n      query: TOKEN_DATA(address, twoDayBlock),\n      fetchPolicy: 'cache-first'\n    });\n    twoDayData = twoDayResult.data.tokens[0]; // catch the case where token wasnt in top list in previous days\n\n    if (!oneDayData) {\n      let oneDayResult = await client.query({\n        query: TOKEN_DATA(address, oneDayBlock),\n        fetchPolicy: 'cache-first'\n      });\n      oneDayData = oneDayResult.data.tokens[0];\n    }\n\n    if (!twoDayData) {\n      let twoDayResult = await client.query({\n        query: TOKEN_DATA(address, twoDayBlock),\n        fetchPolicy: 'cache-first'\n      });\n      twoDayData = twoDayResult.data.tokens[0];\n    } // calculate percentage changes and daily changes\n\n\n    const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data.tradeVolumeUSD, (_ref5 = (_oneDayData = oneDayData) === null || _oneDayData === void 0 ? void 0 : _oneDayData.tradeVolumeUSD) !== null && _ref5 !== void 0 ? _ref5 : 0, (_ref6 = (_twoDayData = twoDayData) === null || _twoDayData === void 0 ? void 0 : _twoDayData.tradeVolumeUSD) !== null && _ref6 !== void 0 ? _ref6 : 0); // calculate percentage changes and daily changes\n\n    const [oneDayVolumeUT, volumeChangeUT] = get2DayPercentChange(data.untrackedVolumeUSD, (_ref7 = (_oneDayData2 = oneDayData) === null || _oneDayData2 === void 0 ? void 0 : _oneDayData2.untrackedVolumeUSD) !== null && _ref7 !== void 0 ? _ref7 : 0, (_ref8 = (_twoDayData2 = twoDayData) === null || _twoDayData2 === void 0 ? void 0 : _twoDayData2.untrackedVolumeUSD) !== null && _ref8 !== void 0 ? _ref8 : 0); // calculate percentage changes and daily changes\n\n    const [oneDayTxns, txnChange] = get2DayPercentChange(data.txCount, (_ref9 = (_oneDayData3 = oneDayData) === null || _oneDayData3 === void 0 ? void 0 : _oneDayData3.txCount) !== null && _ref9 !== void 0 ? _ref9 : 0, (_ref10 = (_twoDayData3 = twoDayData) === null || _twoDayData3 === void 0 ? void 0 : _twoDayData3.txCount) !== null && _ref10 !== void 0 ? _ref10 : 0);\n    const priceChangeUSD = getPercentChange(((_data = data) === null || _data === void 0 ? void 0 : _data.derivedETH) * ethPrice, parseFloat((_ref11 = (_oneDayData4 = oneDayData) === null || _oneDayData4 === void 0 ? void 0 : _oneDayData4.derivedETH) !== null && _ref11 !== void 0 ? _ref11 : 0) * ethPriceOld);\n    const currentLiquidityUSD = ((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.totalLiquidity) * ethPrice * ((_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.derivedETH);\n    const oldLiquidityUSD = ((_oneDayData5 = oneDayData) === null || _oneDayData5 === void 0 ? void 0 : _oneDayData5.totalLiquidity) * ethPriceOld * ((_oneDayData6 = oneDayData) === null || _oneDayData6 === void 0 ? void 0 : _oneDayData6.derivedETH); // set data\n\n    data.priceUSD = ((_data4 = data) === null || _data4 === void 0 ? void 0 : _data4.derivedETH) * ethPrice;\n    data.totalLiquidityUSD = currentLiquidityUSD;\n    data.oneDayVolumeUSD = oneDayVolumeUSD;\n    data.volumeChangeUSD = volumeChangeUSD;\n    data.priceChangeUSD = priceChangeUSD;\n    data.oneDayVolumeUT = oneDayVolumeUT;\n    data.volumeChangeUT = volumeChangeUT;\n    const liquidityChangeUSD = getPercentChange(currentLiquidityUSD !== null && currentLiquidityUSD !== void 0 ? currentLiquidityUSD : 0, oldLiquidityUSD !== null && oldLiquidityUSD !== void 0 ? oldLiquidityUSD : 0);\n    data.liquidityChangeUSD = liquidityChangeUSD;\n    data.oneDayTxns = oneDayTxns;\n    data.txnChange = txnChange; // new tokens\n\n    if (!oneDayData && data) {\n      data.oneDayVolumeUSD = data.tradeVolumeUSD;\n      data.oneDayVolumeETH = data.tradeVolume * data.derivedETH;\n      data.oneDayTxns = data.txCount;\n    } // update name data for\n\n\n    updateNameData({\n      token0: data\n    }); // HOTFIX for Aave\n\n    if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\n      const aaveData = await client.query({\n        query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\n        fetchPolicy: 'cache-first'\n      });\n      const result = aaveData.data.pairs[0];\n      data.totalLiquidityUSD = parseFloat(result.reserveUSD) / 2;\n      data.liquidityChangeUSD = 0;\n      data.priceChangeUSD = 0;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n};\n\nconst getTokenTransactions = async allPairsFormatted => {\n  const transactions = {};\n\n  try {\n    let result = await client.query({\n      query: FILTERED_TRANSACTIONS,\n      variables: {\n        allPairs: allPairsFormatted\n      },\n      fetchPolicy: 'cache-first'\n    });\n    transactions.mints = result.data.mints;\n    transactions.burns = result.data.burns;\n    transactions.swaps = result.data.swaps;\n  } catch (e) {\n    console.log(e);\n  }\n\n  return transactions;\n};\n\nconst getTokenPairs = async tokenAddress => {\n  try {\n    var _result$data2, _result$data3;\n\n    // fetch all current and historical data\n    let result = await client.query({\n      query: TOKEN_DATA(tokenAddress),\n      fetchPolicy: 'cache-first'\n    });\n    return (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : _result$data2['pairs0'].concat((_result$data3 = result.data) === null || _result$data3 === void 0 ? void 0 : _result$data3['pairs1']);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst getIntervalTokenData = async (tokenAddress, startTime, interval = 3600, latestBlock) => {\n  const utcEndTime = dayjs.utc();\n  let time = startTime; // create an array of hour start times until we reach current hour\n  // buffer by half hour to catch case where graph isnt synced to latest block\n\n  const timestamps = [];\n\n  while (time < utcEndTime.unix()) {\n    timestamps.push(time);\n    time += interval;\n  } // backout if invalid timestamp format\n\n\n  if (timestamps.length === 0) {\n    return [];\n  } // once you have all the timestamps, get the blocks for each timestamp in a bulk query\n\n\n  let blocks;\n\n  try {\n    blocks = await getBlocksFromTimestamps(timestamps, 100); // catch failing case\n\n    if (!blocks || blocks.length === 0) {\n      return [];\n    }\n\n    if (latestBlock) {\n      blocks = blocks.filter(b => {\n        return parseFloat(b.number) <= parseFloat(latestBlock) && parseFloat(b.number) >= 12591500;\n      });\n    }\n\n    let result = await splitQuery(PRICES_BY_BLOCK, client, [tokenAddress], blocks, 50); // format token ETH price results\n\n    let values = [];\n\n    for (var row in result) {\n      var _result$row;\n\n      let timestamp = row.split('t')[1];\n      let derivedETH = parseFloat((_result$row = result[row]) === null || _result$row === void 0 ? void 0 : _result$row.derivedETH);\n\n      if (timestamp) {\n        values.push({\n          timestamp,\n          derivedETH\n        });\n      }\n    } // go through eth usd prices and assign to original values array\n\n\n    let index = 0;\n\n    for (var brow in result) {\n      let timestamp = brow.split('b')[1];\n\n      if (timestamp) {\n        values[index].priceUSD = result[brow].ethPrice * values[index].derivedETH;\n        index += 1;\n      }\n    }\n\n    let formattedHistory = []; // for each hour, construct the open and close price\n\n    for (let i = 0; i < values.length - 1; i++) {\n      formattedHistory.push({\n        timestamp: values[i].timestamp,\n        open: parseFloat(values[i].priceUSD),\n        close: parseFloat(values[i + 1].priceUSD)\n      });\n    }\n\n    return formattedHistory;\n  } catch (e) {\n    console.log(e);\n    console.log('error fetching blocks');\n    return [];\n  }\n};\n\nconst getTokenChartData = async tokenAddress => {\n  let data = [];\n  const utcEndTime = dayjs.utc();\n  let utcStartTime = utcEndTime.subtract(1, 'year');\n  let startTime = utcStartTime.startOf('minute').unix() - 1;\n\n  try {\n    let allFound = false;\n    let skip = 0;\n\n    while (!allFound) {\n      let result = await client.query({\n        query: TOKEN_CHART,\n        variables: {\n          tokenAddr: tokenAddress,\n          skip\n        },\n        fetchPolicy: 'cache-first'\n      });\n\n      if (result.data.tokenDayDatas.length < 1000) {\n        allFound = true;\n      }\n\n      skip += 1000;\n      data = data.concat(result.data.tokenDayDatas);\n    }\n\n    let dayIndexSet = new Set();\n    let dayIndexArray = [];\n    const oneDay = 24 * 60 * 60;\n    data.forEach((dayData, i) => {\n      // add the day index to the set of days\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n      dayIndexArray.push(data[i]);\n      dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD);\n    }); // fill in empty days\n\n    let timestamp = data[0] && data[0].date ? data[0].date : startTime;\n    let latestLiquidityUSD = data[0] && data[0].totalLiquidityUSD;\n    let latestPriceUSD = data[0] && data[0].priceUSD;\n    let index = 1;\n\n    while (timestamp < utcEndTime.startOf('minute').unix() - oneDay) {\n      const nextDay = timestamp + oneDay;\n      let currentDayIndex = (nextDay / oneDay).toFixed(0);\n\n      if (!dayIndexSet.has(currentDayIndex)) {\n        data.push({\n          date: nextDay,\n          dayString: nextDay,\n          dailyVolumeUSD: 0,\n          priceUSD: latestPriceUSD,\n          totalLiquidityUSD: latestLiquidityUSD\n        });\n      } else {\n        latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD;\n        latestPriceUSD = dayIndexArray[index].priceUSD;\n        index = index + 1;\n      }\n\n      timestamp = nextDay;\n    }\n\n    data = data.sort((a, b) => parseInt(a.date) > parseInt(b.date) ? 1 : -1);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n};\n\nexport function Updater() {\n  const [, {\n    updateTopTokens\n  }] = useTokenDataContext();\n  const [ethPrice, ethPriceOld] = useEthPrice();\n  useEffect(() => {\n    async function getData() {\n      // get top pairs for overview list\n      let topTokens = await getTopTokens(ethPrice, ethPriceOld);\n      topTokens && updateTopTokens(topTokens);\n    }\n\n    ethPrice && ethPriceOld && getData();\n  }, [ethPrice, ethPriceOld, updateTopTokens]);\n  return null;\n}\nexport function useTokenData(tokenAddress) {\n  const [state, {\n    update\n  }] = useTokenDataContext();\n  const [ethPrice, ethPriceOld] = useEthPrice();\n  const tokenData = state === null || state === void 0 ? void 0 : state[tokenAddress];\n  useEffect(() => {\n    if (!tokenData && ethPrice && ethPriceOld && isAddress(tokenAddress)) {\n      getTokenData(tokenAddress, ethPrice, ethPriceOld).then(data => {\n        update(tokenAddress, data);\n      });\n    }\n  }, [ethPrice, ethPriceOld, tokenAddress, tokenData, update]);\n  return tokenData || {};\n}\nexport function useTokenTransactions(tokenAddress) {\n  var _state$tokenAddress;\n\n  const [state, {\n    updateTokenTxns\n  }] = useTokenDataContext();\n  const tokenTxns = state === null || state === void 0 ? void 0 : (_state$tokenAddress = state[tokenAddress]) === null || _state$tokenAddress === void 0 ? void 0 : _state$tokenAddress.txns;\n  const allPairsFormatted = state[tokenAddress] && state[tokenAddress].TOKEN_PAIRS_KEY && state[tokenAddress].TOKEN_PAIRS_KEY.map(pair => {\n    return pair.id;\n  });\n  useEffect(() => {\n    async function checkForTxns() {\n      if (!tokenTxns && allPairsFormatted) {\n        let transactions = await getTokenTransactions(allPairsFormatted);\n        updateTokenTxns(tokenAddress, transactions);\n      }\n    }\n\n    checkForTxns();\n  }, [tokenTxns, tokenAddress, updateTokenTxns, allPairsFormatted]);\n  return tokenTxns || [];\n}\nexport function useTokenPairs(tokenAddress) {\n  var _state$tokenAddress2;\n\n  const [state, {\n    updateAllPairs\n  }] = useTokenDataContext();\n  const tokenPairs = state === null || state === void 0 ? void 0 : (_state$tokenAddress2 = state[tokenAddress]) === null || _state$tokenAddress2 === void 0 ? void 0 : _state$tokenAddress2[TOKEN_PAIRS_KEY];\n  useEffect(() => {\n    async function fetchData() {\n      let allPairs = await getTokenPairs(tokenAddress);\n      updateAllPairs(tokenAddress, allPairs);\n    }\n\n    if (!tokenPairs && isAddress(tokenAddress)) {\n      fetchData();\n    }\n  }, [tokenAddress, tokenPairs, updateAllPairs]);\n  return tokenPairs || [];\n}\nexport function useTokenChartData(tokenAddress) {\n  var _state$tokenAddress3;\n\n  const [state, {\n    updateChartData\n  }] = useTokenDataContext();\n  const chartData = state === null || state === void 0 ? void 0 : (_state$tokenAddress3 = state[tokenAddress]) === null || _state$tokenAddress3 === void 0 ? void 0 : _state$tokenAddress3.chartData;\n  useEffect(() => {\n    async function checkForChartData() {\n      if (!chartData) {\n        let data = await getTokenChartData(tokenAddress);\n        updateChartData(tokenAddress, data);\n      }\n    }\n\n    checkForChartData();\n  }, [chartData, tokenAddress, updateChartData]);\n  return chartData;\n}\n/**\r\n * get candlestick data for a token - saves in context based on the window and the\r\n * interval size\r\n * @param {*} tokenAddress\r\n * @param {*} timeWindow // a preset time window from constant - how far back to look\r\n * @param {*} interval  // the chunk size in seconds - default is 1 hour of 3600s\r\n */\n\nexport function useTokenPriceData(tokenAddress, timeWindow, interval = 3600) {\n  var _state$tokenAddress4, _state$tokenAddress4$;\n\n  const [state, {\n    updatePriceData\n  }] = useTokenDataContext();\n  const chartData = state === null || state === void 0 ? void 0 : (_state$tokenAddress4 = state[tokenAddress]) === null || _state$tokenAddress4 === void 0 ? void 0 : (_state$tokenAddress4$ = _state$tokenAddress4[timeWindow]) === null || _state$tokenAddress4$ === void 0 ? void 0 : _state$tokenAddress4$[interval];\n  const [latestBlock] = useLatestBlocks();\n  useEffect(() => {\n    const currentTime = dayjs.utc();\n    const windowSize = timeWindow === timeframeOptions.MONTH ? 'month' : 'week';\n    const startTime = timeWindow === timeframeOptions.ALL_TIME ? 1589760000 : currentTime.subtract(1, windowSize).startOf('hour').unix();\n\n    async function fetch() {\n      let data = await getIntervalTokenData(tokenAddress, startTime, interval, latestBlock);\n      updatePriceData(tokenAddress, data, timeWindow, interval);\n    }\n\n    if (!chartData) {\n      fetch();\n    }\n  }, [chartData, interval, timeWindow, tokenAddress, updatePriceData, latestBlock]);\n  return chartData;\n}\nexport function useAllTokenData() {\n  const [state] = useTokenDataContext();\n  return state;\n}","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/pancake-info-v1/src/contexts/TokenData.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","client","TOKEN_DATA","FILTERED_TRANSACTIONS","TOKEN_CHART","TOKENS_CURRENT","TOKENS_DYNAMIC","PRICES_BY_BLOCK","PAIR_DATA","useEthPrice","dayjs","utc","get2DayPercentChange","getPercentChange","getBlockFromTimestamp","isAddress","getBlocksFromTimestamps","splitQuery","timeframeOptions","useLatestBlocks","updateNameData","UPDATE","UPDATE_TOKEN_TXNS","UPDATE_CHART_DATA","UPDATE_PRICE_DATA","UPDATE_TOP_TOKENS","UPDATE_ALL_PAIRS","TOKEN_PAIRS_KEY","extend","TokenDataContext","useTokenDataContext","reducer","state","type","payload","tokenAddress","data","topTokens","added","map","token","id","address","transactions","txns","chartData","timeWindow","interval","allPairs","Error","Provider","children","dispatch","update","updateTopTokens","updateTokenTxns","updateChartData","updateAllPairs","updatePriceData","getTopTokens","ethPrice","ethPriceOld","utcCurrentTime","unix","utcOneDayBack","subtract","utcTwoDaysBack","oneDayBlock","twoDayBlock","current","query","fetchPolicy","oneDayResult","twoDayResult","oneDayData","tokens","reduce","obj","cur","i","twoDayData","bulkResults","Promise","all","oneDayHistory","twoDayHistory","oneDayVolumeUSD","volumeChangeUSD","tradeVolumeUSD","oneDayTxns","txnChange","txCount","currentLiquidityUSD","totalLiquidity","derivedETH","oldLiquidityUSD","priceChangeUSD","priceUSD","totalLiquidityUSD","parseFloat","liquidityChangeUSD","oneDayVolumeETH","tradeVolume","token0","aaveData","result","pairs","reserveUSD","e","console","log","getTokenData","startOf","oneDayVolumeUT","volumeChangeUT","untrackedVolumeUSD","getTokenTransactions","allPairsFormatted","variables","mints","burns","swaps","getTokenPairs","concat","getIntervalTokenData","startTime","latestBlock","utcEndTime","time","timestamps","push","length","blocks","filter","b","number","values","row","timestamp","split","index","brow","formattedHistory","open","close","getTokenChartData","utcStartTime","allFound","skip","tokenAddr","tokenDayDatas","dayIndexSet","Set","dayIndexArray","oneDay","forEach","dayData","add","date","toFixed","dailyVolumeUSD","latestLiquidityUSD","latestPriceUSD","nextDay","currentDayIndex","has","dayString","sort","a","parseInt","Updater","getData","useTokenData","tokenData","then","useTokenTransactions","tokenTxns","pair","checkForTxns","useTokenPairs","tokenPairs","fetchData","useTokenChartData","checkForChartData","useTokenPriceData","currentTime","windowSize","MONTH","ALL_TIME","fetch","useAllTokenData"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react'\r\n\r\nimport { client } from '../apollo/client'\r\nimport {\r\n  TOKEN_DATA,\r\n  FILTERED_TRANSACTIONS,\r\n  TOKEN_CHART,\r\n  TOKENS_CURRENT,\r\n  TOKENS_DYNAMIC,\r\n  PRICES_BY_BLOCK,\r\n  PAIR_DATA,\r\n} from '../apollo/queries'\r\n\r\nimport { useEthPrice } from './GlobalData'\r\n\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\n\r\nimport {\r\n  get2DayPercentChange,\r\n  getPercentChange,\r\n  getBlockFromTimestamp,\r\n  isAddress,\r\n  getBlocksFromTimestamps,\r\n  splitQuery,\r\n} from '../utils'\r\nimport { timeframeOptions } from '../constants'\r\nimport { useLatestBlocks } from './Application'\r\nimport { updateNameData } from '../utils/data'\r\n\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_TOKEN_TXNS = 'UPDATE_TOKEN_TXNS'\r\nconst UPDATE_CHART_DATA = 'UPDATE_CHART_DATA'\r\nconst UPDATE_PRICE_DATA = 'UPDATE_PRICE_DATA'\r\nconst UPDATE_TOP_TOKENS = ' UPDATE_TOP_TOKENS'\r\nconst UPDATE_ALL_PAIRS = 'UPDATE_ALL_PAIRS'\r\n\r\nconst TOKEN_PAIRS_KEY = 'TOKEN_PAIRS_KEY'\r\n\r\ndayjs.extend(utc)\r\n\r\nconst TokenDataContext = createContext()\r\n\r\nfunction useTokenDataContext() {\r\n  return useContext(TokenDataContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { tokenAddress, data } = payload\r\n      return {\r\n        ...state,\r\n        [tokenAddress]: {\r\n          ...state?.[tokenAddress],\r\n          ...data,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_TOP_TOKENS: {\r\n      const { topTokens } = payload\r\n      let added = {}\r\n      topTokens &&\r\n        topTokens.map((token) => {\r\n          return (added[token.id] = token)\r\n        })\r\n      return {\r\n        ...state,\r\n        ...added,\r\n      }\r\n    }\r\n\r\n    case UPDATE_TOKEN_TXNS: {\r\n      const { address, transactions } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          txns: transactions,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_CHART_DATA: {\r\n      const { address, chartData } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          chartData,\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_PRICE_DATA: {\r\n      const { address, data, timeWindow, interval } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          [timeWindow]: {\r\n            ...state?.[address]?.[timeWindow],\r\n            [interval]: data,\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_ALL_PAIRS: {\r\n      const { address, allPairs } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          [TOKEN_PAIRS_KEY]: allPairs,\r\n        },\r\n      }\r\n    }\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {})\r\n  const update = useCallback((tokenAddress, data) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        tokenAddress,\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTopTokens = useCallback((topTokens) => {\r\n    dispatch({\r\n      type: UPDATE_TOP_TOKENS,\r\n      payload: {\r\n        topTokens,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTokenTxns = useCallback((address, transactions) => {\r\n    dispatch({\r\n      type: UPDATE_TOKEN_TXNS,\r\n      payload: { address, transactions },\r\n    })\r\n  }, [])\r\n\r\n  const updateChartData = useCallback((address, chartData) => {\r\n    dispatch({\r\n      type: UPDATE_CHART_DATA,\r\n      payload: { address, chartData },\r\n    })\r\n  }, [])\r\n\r\n  const updateAllPairs = useCallback((address, allPairs) => {\r\n    dispatch({\r\n      type: UPDATE_ALL_PAIRS,\r\n      payload: { address, allPairs },\r\n    })\r\n  }, [])\r\n\r\n  const updatePriceData = useCallback((address, data, timeWindow, interval) => {\r\n    dispatch({\r\n      type: UPDATE_PRICE_DATA,\r\n      payload: { address, data, timeWindow, interval },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <TokenDataContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updateTokenTxns,\r\n            updateChartData,\r\n            updateTopTokens,\r\n            updateAllPairs,\r\n            updatePriceData,\r\n          },\r\n        ],\r\n        [state, update, updateTokenTxns, updateChartData, updateTopTokens, updateAllPairs, updatePriceData]\r\n      )}\r\n    >\r\n      {children}\r\n    </TokenDataContext.Provider>\r\n  )\r\n}\r\n\r\nconst getTopTokens = async (ethPrice, ethPriceOld) => {\r\n  // const utcCurrentTime = dayjs.unix(1616025600)\r\n  const utcCurrentTime = dayjs.unix(1665062000)\r\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix()\r\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix()\r\n  let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack)\r\n  let twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack)\r\n\r\n  try {\r\n    let current = await client.query({\r\n      query: TOKENS_CURRENT,\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let oneDayResult = await client.query({\r\n      query: TOKENS_DYNAMIC(oneDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let twoDayResult = await client.query({\r\n      query: TOKENS_DYNAMIC(twoDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let oneDayData = oneDayResult?.data?.tokens.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let twoDayData = twoDayResult?.data?.tokens.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let bulkResults = await Promise.all(\r\n      current &&\r\n      oneDayData &&\r\n      twoDayData &&\r\n      current?.data?.tokens.map(async (token) => {\r\n        let data = token\r\n\r\n        // let liquidityDataThisToken = liquidityData?.[token.id]\r\n        let oneDayHistory = oneDayData?.[token.id]\r\n        let twoDayHistory = twoDayData?.[token.id]\r\n\r\n        // catch the case where token wasnt in top list in previous days\r\n        if (!oneDayHistory) {\r\n          let oneDayResult = await client.query({\r\n            query: TOKEN_DATA(token.id, oneDayBlock),\r\n            fetchPolicy: 'cache-first',\r\n          })\r\n          oneDayHistory = oneDayResult.data.tokens[0]\r\n        }\r\n        if (!twoDayHistory) {\r\n          let twoDayResult = await client.query({\r\n            query: TOKEN_DATA(token.id, twoDayBlock),\r\n            fetchPolicy: 'cache-first',\r\n          })\r\n          twoDayHistory = twoDayResult.data.tokens[0]\r\n        }\r\n\r\n        // calculate percentage changes and daily changes\r\n        const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n          data.tradeVolumeUSD,\r\n          oneDayHistory?.tradeVolumeUSD ?? 0,\r\n          twoDayHistory?.tradeVolumeUSD ?? 0\r\n        )\r\n        const [oneDayTxns, txnChange] = get2DayPercentChange(\r\n          data.txCount,\r\n          oneDayHistory?.txCount ?? 0,\r\n          twoDayHistory?.txCount ?? 0\r\n        )\r\n\r\n        const currentLiquidityUSD = data?.totalLiquidity * ethPrice * data?.derivedETH\r\n        const oldLiquidityUSD = oneDayHistory?.totalLiquidity * ethPriceOld * oneDayHistory?.derivedETH\r\n\r\n        // percent changes\r\n        const priceChangeUSD = getPercentChange(\r\n          data?.derivedETH * ethPrice,\r\n          oneDayHistory?.derivedETH ? oneDayHistory?.derivedETH * ethPriceOld : 0\r\n        )\r\n\r\n        // set data\r\n        data.priceUSD = data?.derivedETH * ethPrice\r\n        data.totalLiquidityUSD = currentLiquidityUSD\r\n        data.oneDayVolumeUSD = parseFloat(oneDayVolumeUSD)\r\n        data.volumeChangeUSD = volumeChangeUSD\r\n        data.priceChangeUSD = priceChangeUSD\r\n        data.liquidityChangeUSD = getPercentChange(currentLiquidityUSD ?? 0, oldLiquidityUSD ?? 0)\r\n        data.oneDayTxns = oneDayTxns\r\n        data.txnChange = txnChange\r\n\r\n        // new tokens\r\n        if (!oneDayHistory && data) {\r\n          data.oneDayVolumeUSD = data.tradeVolumeUSD\r\n          data.oneDayVolumeETH = data.tradeVolume * data.derivedETH\r\n          data.oneDayTxns = data.txCount\r\n        }\r\n\r\n        // update name data for\r\n        updateNameData({\r\n          token0: data,\r\n        })\r\n\r\n        // HOTFIX for Aave\r\n        if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\r\n          const aaveData = await client.query({\r\n            query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\r\n            fetchPolicy: 'cache-first',\r\n          })\r\n          const result = aaveData.data.pairs[0]\r\n          data.totalLiquidityUSD = parseFloat(result.reserveUSD) / 2\r\n          data.liquidityChangeUSD = 0\r\n          data.priceChangeUSD = 0\r\n        }\r\n\r\n        return data\r\n      })\r\n    )\r\n\r\n    return bulkResults\r\n\r\n    // calculate percentage changes and daily changes\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nconst getTokenData = async (address, ethPrice, ethPriceOld) => {\r\n  // const utcCurrentTime = dayjs.unix(1616025600)\r\n  const utcCurrentTime = dayjs.unix(1665062000)\r\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\r\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').startOf('minute').unix()\r\n  let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack)\r\n  let twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack)\r\n\r\n  // initialize data arrays\r\n  let data = {}\r\n  let oneDayData = {}\r\n  let twoDayData = {}\r\n\r\n  try {\r\n    // fetch all current and historical data\r\n    let result = await client.query({\r\n      query: TOKEN_DATA(address),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    data = result?.data?.tokens?.[0]\r\n\r\n    // get results from 24 hours in past\r\n    let oneDayResult = await client.query({\r\n      query: TOKEN_DATA(address, oneDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    oneDayData = oneDayResult.data.tokens[0]\r\n\r\n    // get results from 48 hours in past\r\n    let twoDayResult = await client.query({\r\n      query: TOKEN_DATA(address, twoDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    twoDayData = twoDayResult.data.tokens[0]\r\n\r\n    // catch the case where token wasnt in top list in previous days\r\n    if (!oneDayData) {\r\n      let oneDayResult = await client.query({\r\n        query: TOKEN_DATA(address, oneDayBlock),\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      oneDayData = oneDayResult.data.tokens[0]\r\n    }\r\n    if (!twoDayData) {\r\n      let twoDayResult = await client.query({\r\n        query: TOKEN_DATA(address, twoDayBlock),\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      twoDayData = twoDayResult.data.tokens[0]\r\n    }\r\n\r\n    // calculate percentage changes and daily changes\r\n    const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n      data.tradeVolumeUSD,\r\n      oneDayData?.tradeVolumeUSD ?? 0,\r\n      twoDayData?.tradeVolumeUSD ?? 0\r\n    )\r\n\r\n    // calculate percentage changes and daily changes\r\n    const [oneDayVolumeUT, volumeChangeUT] = get2DayPercentChange(\r\n      data.untrackedVolumeUSD,\r\n      oneDayData?.untrackedVolumeUSD ?? 0,\r\n      twoDayData?.untrackedVolumeUSD ?? 0\r\n    )\r\n\r\n    // calculate percentage changes and daily changes\r\n    const [oneDayTxns, txnChange] = get2DayPercentChange(\r\n      data.txCount,\r\n      oneDayData?.txCount ?? 0,\r\n      twoDayData?.txCount ?? 0\r\n    )\r\n\r\n    const priceChangeUSD = getPercentChange(\r\n      data?.derivedETH * ethPrice,\r\n      parseFloat(oneDayData?.derivedETH ?? 0) * ethPriceOld\r\n    )\r\n\r\n    const currentLiquidityUSD = data?.totalLiquidity * ethPrice * data?.derivedETH\r\n    const oldLiquidityUSD = oneDayData?.totalLiquidity * ethPriceOld * oneDayData?.derivedETH\r\n\r\n    // set data\r\n    data.priceUSD = data?.derivedETH * ethPrice\r\n    data.totalLiquidityUSD = currentLiquidityUSD\r\n    data.oneDayVolumeUSD = oneDayVolumeUSD\r\n    data.volumeChangeUSD = volumeChangeUSD\r\n    data.priceChangeUSD = priceChangeUSD\r\n    data.oneDayVolumeUT = oneDayVolumeUT\r\n    data.volumeChangeUT = volumeChangeUT\r\n    const liquidityChangeUSD = getPercentChange(currentLiquidityUSD ?? 0, oldLiquidityUSD ?? 0)\r\n    data.liquidityChangeUSD = liquidityChangeUSD\r\n    data.oneDayTxns = oneDayTxns\r\n    data.txnChange = txnChange\r\n\r\n    // new tokens\r\n    if (!oneDayData && data) {\r\n      data.oneDayVolumeUSD = data.tradeVolumeUSD\r\n      data.oneDayVolumeETH = data.tradeVolume * data.derivedETH\r\n      data.oneDayTxns = data.txCount\r\n    }\r\n\r\n    // update name data for\r\n    updateNameData({\r\n      token0: data,\r\n    })\r\n\r\n    // HOTFIX for Aave\r\n    if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\r\n      const aaveData = await client.query({\r\n        query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      const result = aaveData.data.pairs[0]\r\n      data.totalLiquidityUSD = parseFloat(result.reserveUSD) / 2\r\n      data.liquidityChangeUSD = 0\r\n      data.priceChangeUSD = 0\r\n    }\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return data\r\n}\r\n\r\nconst getTokenTransactions = async (allPairsFormatted) => {\r\n  const transactions = {}\r\n  try {\r\n    let result = await client.query({\r\n      query: FILTERED_TRANSACTIONS,\r\n      variables: {\r\n        allPairs: allPairsFormatted,\r\n      },\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    transactions.mints = result.data.mints\r\n    transactions.burns = result.data.burns\r\n    transactions.swaps = result.data.swaps\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return transactions\r\n}\r\n\r\nconst getTokenPairs = async (tokenAddress) => {\r\n  try {\r\n    // fetch all current and historical data\r\n    let result = await client.query({\r\n      query: TOKEN_DATA(tokenAddress),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    return result.data?.['pairs0'].concat(result.data?.['pairs1'])\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nconst getIntervalTokenData = async (tokenAddress, startTime, interval = 3600, latestBlock) => {\r\n  const utcEndTime = dayjs.utc()\r\n  let time = startTime\r\n\r\n  // create an array of hour start times until we reach current hour\r\n  // buffer by half hour to catch case where graph isnt synced to latest block\r\n  const timestamps = []\r\n  while (time < utcEndTime.unix()) {\r\n    timestamps.push(time)\r\n    time += interval\r\n  }\r\n\r\n  // backout if invalid timestamp format\r\n  if (timestamps.length === 0) {\r\n    return []\r\n  }\r\n\r\n  // once you have all the timestamps, get the blocks for each timestamp in a bulk query\r\n  let blocks\r\n  try {\r\n    blocks = await getBlocksFromTimestamps(timestamps, 100)\r\n\r\n    // catch failing case\r\n    if (!blocks || blocks.length === 0) {\r\n      return []\r\n    }\r\n\r\n    if (latestBlock) {\r\n      blocks = blocks.filter((b) => {\r\n        return parseFloat(b.number) <= parseFloat(latestBlock) && parseFloat(b.number) >= 12591500;\r\n      })\r\n    }\r\n    let result = await splitQuery(PRICES_BY_BLOCK, client, [tokenAddress], blocks, 50)\r\n\r\n    // format token ETH price results\r\n    let values = []\r\n    for (var row in result) {\r\n      let timestamp = row.split('t')[1]\r\n      let derivedETH = parseFloat(result[row]?.derivedETH)\r\n      if (timestamp) {\r\n        values.push({\r\n          timestamp,\r\n          derivedETH,\r\n        })\r\n      }\r\n    }\r\n\r\n    // go through eth usd prices and assign to original values array\r\n    let index = 0\r\n    for (var brow in result) {\r\n      let timestamp = brow.split('b')[1]\r\n      if (timestamp) {\r\n        values[index].priceUSD = result[brow].ethPrice * values[index].derivedETH\r\n        index += 1\r\n      }\r\n    }\r\n\r\n    let formattedHistory = []\r\n\r\n    // for each hour, construct the open and close price\r\n    for (let i = 0; i < values.length - 1; i++) {\r\n      formattedHistory.push({\r\n        timestamp: values[i].timestamp,\r\n        open: parseFloat(values[i].priceUSD),\r\n        close: parseFloat(values[i + 1].priceUSD),\r\n      })\r\n    }\r\n\r\n    return formattedHistory\r\n  } catch (e) {\r\n    console.log(e)\r\n    console.log('error fetching blocks')\r\n    return []\r\n  }\r\n}\r\n\r\nconst getTokenChartData = async (tokenAddress) => {\r\n  let data = []\r\n  const utcEndTime = dayjs.utc()\r\n  let utcStartTime = utcEndTime.subtract(1, 'year')\r\n  let startTime = utcStartTime.startOf('minute').unix() - 1\r\n\r\n  try {\r\n    let allFound = false\r\n    let skip = 0\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: TOKEN_CHART,\r\n        variables: {\r\n          tokenAddr: tokenAddress,\r\n          skip,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      if (result.data.tokenDayDatas.length < 1000) {\r\n        allFound = true\r\n      }\r\n      skip += 1000\r\n      data = data.concat(result.data.tokenDayDatas)\r\n    }\r\n\r\n    let dayIndexSet = new Set()\r\n    let dayIndexArray = []\r\n    const oneDay = 24 * 60 * 60\r\n    data.forEach((dayData, i) => {\r\n      // add the day index to the set of days\r\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0))\r\n      dayIndexArray.push(data[i])\r\n      dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD)\r\n    })\r\n\r\n    // fill in empty days\r\n    let timestamp = data[0] && data[0].date ? data[0].date : startTime\r\n    let latestLiquidityUSD = data[0] && data[0].totalLiquidityUSD\r\n    let latestPriceUSD = data[0] && data[0].priceUSD\r\n    let index = 1\r\n    while (timestamp < utcEndTime.startOf('minute').unix() - oneDay) {\r\n      const nextDay = timestamp + oneDay\r\n      let currentDayIndex = (nextDay / oneDay).toFixed(0)\r\n      if (!dayIndexSet.has(currentDayIndex)) {\r\n        data.push({\r\n          date: nextDay,\r\n          dayString: nextDay,\r\n          dailyVolumeUSD: 0,\r\n          priceUSD: latestPriceUSD,\r\n          totalLiquidityUSD: latestLiquidityUSD,\r\n        })\r\n      } else {\r\n        latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD\r\n        latestPriceUSD = dayIndexArray[index].priceUSD\r\n        index = index + 1\r\n      }\r\n      timestamp = nextDay\r\n    }\r\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return data\r\n}\r\n\r\nexport function Updater() {\r\n  const [, { updateTopTokens }] = useTokenDataContext()\r\n  const [ethPrice, ethPriceOld] = useEthPrice()\r\n  useEffect(() => {\r\n    async function getData() {\r\n      // get top pairs for overview list\r\n      let topTokens = await getTopTokens(ethPrice, ethPriceOld)\r\n      topTokens && updateTopTokens(topTokens)\r\n    }\r\n    ethPrice && ethPriceOld && getData()\r\n  }, [ethPrice, ethPriceOld, updateTopTokens])\r\n  return null\r\n}\r\n\r\nexport function useTokenData(tokenAddress) {\r\n  const [state, { update }] = useTokenDataContext()\r\n  const [ethPrice, ethPriceOld] = useEthPrice()\r\n  const tokenData = state?.[tokenAddress]\r\n\r\n  useEffect(() => {\r\n    if (!tokenData && ethPrice && ethPriceOld && isAddress(tokenAddress)) {\r\n      getTokenData(tokenAddress, ethPrice, ethPriceOld).then((data) => {\r\n        update(tokenAddress, data)\r\n      })\r\n    }\r\n  }, [ethPrice, ethPriceOld, tokenAddress, tokenData, update])\r\n\r\n  return tokenData || {}\r\n}\r\n\r\nexport function useTokenTransactions(tokenAddress) {\r\n  const [state, { updateTokenTxns }] = useTokenDataContext()\r\n  const tokenTxns = state?.[tokenAddress]?.txns\r\n\r\n  const allPairsFormatted =\r\n    state[tokenAddress] &&\r\n    state[tokenAddress].TOKEN_PAIRS_KEY &&\r\n    state[tokenAddress].TOKEN_PAIRS_KEY.map((pair) => {\r\n      return pair.id\r\n    })\r\n\r\n  useEffect(() => {\r\n    async function checkForTxns() {\r\n      if (!tokenTxns && allPairsFormatted) {\r\n        let transactions = await getTokenTransactions(allPairsFormatted)\r\n        updateTokenTxns(tokenAddress, transactions)\r\n      }\r\n    }\r\n    checkForTxns()\r\n  }, [tokenTxns, tokenAddress, updateTokenTxns, allPairsFormatted])\r\n\r\n  return tokenTxns || []\r\n}\r\n\r\nexport function useTokenPairs(tokenAddress) {\r\n  const [state, { updateAllPairs }] = useTokenDataContext()\r\n  const tokenPairs = state?.[tokenAddress]?.[TOKEN_PAIRS_KEY]\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let allPairs = await getTokenPairs(tokenAddress)\r\n      updateAllPairs(tokenAddress, allPairs)\r\n    }\r\n    if (!tokenPairs && isAddress(tokenAddress)) {\r\n      fetchData()\r\n    }\r\n  }, [tokenAddress, tokenPairs, updateAllPairs])\r\n\r\n  return tokenPairs || []\r\n}\r\n\r\nexport function useTokenChartData(tokenAddress) {\r\n  const [state, { updateChartData }] = useTokenDataContext()\r\n  const chartData = state?.[tokenAddress]?.chartData\r\n  useEffect(() => {\r\n    async function checkForChartData() {\r\n      if (!chartData) {\r\n        let data = await getTokenChartData(tokenAddress)\r\n        updateChartData(tokenAddress, data)\r\n      }\r\n    }\r\n    checkForChartData()\r\n  }, [chartData, tokenAddress, updateChartData])\r\n  return chartData\r\n}\r\n\r\n/**\r\n * get candlestick data for a token - saves in context based on the window and the\r\n * interval size\r\n * @param {*} tokenAddress\r\n * @param {*} timeWindow // a preset time window from constant - how far back to look\r\n * @param {*} interval  // the chunk size in seconds - default is 1 hour of 3600s\r\n */\r\nexport function useTokenPriceData(tokenAddress, timeWindow, interval = 3600) {\r\n  const [state, { updatePriceData }] = useTokenDataContext()\r\n  const chartData = state?.[tokenAddress]?.[timeWindow]?.[interval]\r\n  const [latestBlock] = useLatestBlocks()\r\n\r\n  useEffect(() => {\r\n    const currentTime = dayjs.utc()\r\n    const windowSize = timeWindow === timeframeOptions.MONTH ? 'month' : 'week'\r\n    const startTime =\r\n      timeWindow === timeframeOptions.ALL_TIME ? 1589760000 : currentTime.subtract(1, windowSize).startOf('hour').unix()\r\n\r\n    async function fetch() {\r\n      let data = await getIntervalTokenData(tokenAddress, startTime, interval, latestBlock)\r\n      updatePriceData(tokenAddress, data, timeWindow, interval)\r\n    }\r\n    if (!chartData) {\r\n      fetch()\r\n    }\r\n  }, [chartData, interval, timeWindow, tokenAddress, updatePriceData, latestBlock])\r\n\r\n  return chartData\r\n}\r\n\r\nexport function useAllTokenData() {\r\n  const [state] = useTokenDataContext()\r\n  return state\r\n}\r\n"]},"metadata":{},"sourceType":"module"}