{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\viralswap-info-bsc\\\\src\\\\components\\\\FormattedName\\\\index.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Tooltip } from '../QuestionHelper';\nconst TextWrapper = styled.div`\n  position: relative;\n  margin-left: ${({\n  margin\n}) => margin && '4px'};\n  color: ${({\n  theme,\n  link\n}) => link ? theme.blue : theme.text1};\n  font-size: ${({\n  fontSize\n}) => fontSize !== null && fontSize !== void 0 ? fontSize : 'inherit'};\n\n  :hover {\n    cursor: pointer;\n  }\n\n  @media screen and (max-width: 600px) {\n    font-size: ${({\n  adjustSize\n}) => adjustSize && '12px'};\n  }\n`;\n\nconst FormattedName = ({\n  text,\n  maxCharacters,\n  margin = false,\n  adjustSize = false,\n  fontSize,\n  link,\n  ...rest\n}) => {\n  const [showHover, setShowHover] = useState(false);\n\n  if (!text) {\n    return '';\n  }\n\n  if (text.length > maxCharacters) {\n    return React.createElement(Tooltip, {\n      text: text,\n      show: showHover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(TextWrapper, Object.assign({\n      onMouseEnter: () => setShowHover(true),\n      onMouseLeave: () => setShowHover(false),\n      margin: margin,\n      adjustSize: adjustSize,\n      link: link,\n      fontSize: fontSize\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), ' ' + text.slice(0, maxCharacters - 1) + '...'));\n  }\n\n  return React.createElement(TextWrapper, Object.assign({\n    margin: margin,\n    adjustSize: adjustSize,\n    link: link,\n    fontSize: fontSize\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), text);\n};\n\nexport default FormattedName;","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/viralswap-info-bsc/src/components/FormattedName/index.js"],"names":["React","useState","styled","Tooltip","TextWrapper","div","margin","theme","link","blue","text1","fontSize","adjustSize","FormattedName","text","maxCharacters","rest","showHover","setShowHover","length","slice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,MAAMC,WAAW,GAAGF,MAAM,CAACG,GAAI;;iBAEd,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgBA,MAAM,IAAI,KAAM;WACtC,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAsBA,IAAI,GAAGD,KAAK,CAACE,IAAT,GAAgBF,KAAK,CAACG,KAAO;eACnD,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,QAAlB,aAAkBA,QAAlB,cAAkBA,QAAlB,GAA8B,SAAU;;;;;;;iBAOtC,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoBA,UAAU,IAAI,MAAO;;CAX1D;;AAeA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,aAAR;AAAuBT,EAAAA,MAAM,GAAG,KAAhC;AAAuCM,EAAAA,UAAU,GAAG,KAApD;AAA2DD,EAAAA,QAA3D;AAAqEH,EAAAA,IAArE;AAA2E,KAAGQ;AAA9E,CAAD,KAA0F;AAC9G,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,MAAI,CAACa,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,MAAIA,IAAI,CAACK,MAAL,GAAcJ,aAAlB,EAAiC;AAC/B,WACE,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAf;AAAqB,MAAA,IAAI,EAAEG,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AACE,MAAA,YAAY,EAAE,MAAMC,YAAY,CAAC,IAAD,CADlC;AAEE,MAAA,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD,CAFlC;AAGE,MAAA,MAAM,EAAEZ,MAHV;AAIE,MAAA,UAAU,EAAEM,UAJd;AAKE,MAAA,IAAI,EAAEJ,IALR;AAME,MAAA,QAAQ,EAAEG;AANZ,OAOMK,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASG,MAAMF,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcL,aAAa,GAAG,CAA9B,CAAN,GAAyC,KAT5C,CADF,CADF;AAeD;;AAED,SACE,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAET,MAArB;AAA6B,IAAA,UAAU,EAAEM,UAAzC;AAAqD,IAAA,IAAI,EAAEJ,IAA3D;AAAiE,IAAA,QAAQ,EAAEG;AAA3E,KAAyFK,IAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGF,IADH,CADF;AAKD,CA9BD;;AAgCA,eAAeD,aAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tooltip } from '../QuestionHelper'\r\n\r\nconst TextWrapper = styled.div`\r\n  position: relative;\r\n  margin-left: ${({ margin }) => margin && '4px'};\r\n  color: ${({ theme, link }) => (link ? theme.blue : theme.text1)};\r\n  font-size: ${({ fontSize }) => fontSize ?? 'inherit'};\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media screen and (max-width: 600px) {\r\n    font-size: ${({ adjustSize }) => adjustSize && '12px'};\r\n  }\r\n`\r\n\r\nconst FormattedName = ({ text, maxCharacters, margin = false, adjustSize = false, fontSize, link, ...rest }) => {\r\n  const [showHover, setShowHover] = useState(false)\r\n\r\n  if (!text) {\r\n    return ''\r\n  }\r\n\r\n  if (text.length > maxCharacters) {\r\n    return (\r\n      <Tooltip text={text} show={showHover}>\r\n        <TextWrapper\r\n          onMouseEnter={() => setShowHover(true)}\r\n          onMouseLeave={() => setShowHover(false)}\r\n          margin={margin}\r\n          adjustSize={adjustSize}\r\n          link={link}\r\n          fontSize={fontSize}\r\n          {...rest}\r\n        >\r\n          {' ' + text.slice(0, maxCharacters - 1) + '...'}\r\n        </TextWrapper>\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TextWrapper margin={margin} adjustSize={adjustSize} link={link} fontSize={fontSize} {...rest}>\r\n      {text}\r\n    </TextWrapper>\r\n  )\r\n}\r\n\r\nexport default FormattedName\r\n"]},"metadata":{},"sourceType":"module"}