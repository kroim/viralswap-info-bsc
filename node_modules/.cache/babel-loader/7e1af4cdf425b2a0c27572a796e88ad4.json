{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\pancake-info-v1\\\\src\\\\contexts\\\\PairData.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react';\nimport { client } from '../apollo/client';\nimport { PAIR_DATA, PAIR_CHART, FILTERED_TRANSACTIONS, PAIRS_CURRENT, PAIRS_BULK, PAIRS_HISTORICAL_BULK, HOURLY_PAIR_RATES } from '../apollo/queries';\nimport { useEthPrice } from './GlobalData';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { getPercentChange, get2DayPercentChange, isAddress, getBlocksFromTimestamps, getTimestampsForChanges, splitQuery } from '../utils';\nimport { timeframeOptions } from '../constants';\nimport { useLatestBlocks } from './Application';\nimport { updateNameData } from '../utils/data';\nconst UPDATE = 'UPDATE';\nconst UPDATE_PAIR_TXNS = 'UPDATE_PAIR_TXNS';\nconst UPDATE_CHART_DATA = 'UPDATE_CHART_DATA';\nconst UPDATE_TOP_PAIRS = 'UPDATE_TOP_PAIRS';\nconst UPDATE_HOURLY_DATA = 'UPDATE_HOURLY_DATA';\ndayjs.extend(utc);\nexport function safeAccess(object, path) {\n  return object ? path.reduce((accumulator, currentValue) => accumulator && accumulator[currentValue] ? accumulator[currentValue] : null, object) : null;\n}\nconst PairDataContext = createContext();\n\nfunction usePairDataContext() {\n  return useContext(PairDataContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE:\n      {\n        const {\n          pairAddress,\n          data\n        } = payload;\n        return { ...state,\n          [pairAddress]: { ...(state === null || state === void 0 ? void 0 : state[pairAddress]),\n            ...data\n          }\n        };\n      }\n\n    case UPDATE_TOP_PAIRS:\n      {\n        const {\n          topPairs\n        } = payload;\n        let added = {};\n        topPairs.map(pair => {\n          return added[pair.id] = pair;\n        });\n        return { ...state,\n          ...added\n        };\n      }\n\n    case UPDATE_PAIR_TXNS:\n      {\n        const {\n          address,\n          transactions\n        } = payload;\n        return { ...state,\n          [address]: { ...(safeAccess(state, [address]) || {}),\n            txns: transactions\n          }\n        };\n      }\n\n    case UPDATE_CHART_DATA:\n      {\n        const {\n          address,\n          chartData\n        } = payload;\n        return { ...state,\n          [address]: { ...(safeAccess(state, [address]) || {}),\n            chartData\n          }\n        };\n      }\n\n    case UPDATE_HOURLY_DATA:\n      {\n        var _state$address;\n\n        const {\n          address,\n          hourlyData,\n          timeWindow\n        } = payload;\n        return { ...state,\n          [address]: { ...(state === null || state === void 0 ? void 0 : state[address]),\n            hourlyData: { ...(state === null || state === void 0 ? void 0 : (_state$address = state[address]) === null || _state$address === void 0 ? void 0 : _state$address.hourlyData),\n              [timeWindow]: hourlyData\n            }\n          }\n        };\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in DataContext reducer: '${type}'.`);\n      }\n  }\n}\n\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, {}); // update pair specific data\n\n  const update = useCallback((pairAddress, data) => {\n    dispatch({\n      type: UPDATE,\n      payload: {\n        pairAddress,\n        data\n      }\n    });\n  }, []);\n  const updateTopPairs = useCallback(topPairs => {\n    dispatch({\n      type: UPDATE_TOP_PAIRS,\n      payload: {\n        topPairs\n      }\n    });\n  }, []);\n  const updatePairTxns = useCallback((address, transactions) => {\n    dispatch({\n      type: UPDATE_PAIR_TXNS,\n      payload: {\n        address,\n        transactions\n      }\n    });\n  }, []);\n  const updateChartData = useCallback((address, chartData) => {\n    dispatch({\n      type: UPDATE_CHART_DATA,\n      payload: {\n        address,\n        chartData\n      }\n    });\n  }, []);\n  const updateHourlyData = useCallback((address, hourlyData, timeWindow) => {\n    dispatch({\n      type: UPDATE_HOURLY_DATA,\n      payload: {\n        address,\n        hourlyData,\n        timeWindow\n      }\n    });\n  }, []);\n  return React.createElement(PairDataContext.Provider, {\n    value: useMemo(() => [state, {\n      update,\n      updatePairTxns,\n      updateChartData,\n      updateTopPairs,\n      updateHourlyData\n    }], [state, update, updatePairTxns, updateChartData, updateTopPairs, updateHourlyData]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, children);\n}\n\nasync function getBulkPairData(pairList, ethPrice) {\n  const [t1, t2, tWeek] = getTimestampsForChanges();\n  let [{\n    number: b1\n  }, {\n    number: b2\n  }, {\n    number: bWeek\n  }] = await getBlocksFromTimestamps([t1, t2, tWeek]);\n\n  try {\n    var _oneDayResult$data, _twoDayResult$data, _oneWeekResult$data;\n\n    let current = await client.query({\n      query: PAIRS_BULK,\n      variables: {\n        allPairs: pairList\n      },\n      fetchPolicy: 'cache-first'\n    });\n    let [oneDayResult, twoDayResult, oneWeekResult] = await Promise.all([b1, b2, bWeek].map(async block => {\n      let result = client.query({\n        query: PAIRS_HISTORICAL_BULK(block, pairList),\n        fetchPolicy: 'cache-first'\n      });\n      return result;\n    }));\n    let oneDayData = oneDayResult === null || oneDayResult === void 0 ? void 0 : (_oneDayResult$data = oneDayResult.data) === null || _oneDayResult$data === void 0 ? void 0 : _oneDayResult$data.pairs.reduce((obj, cur, i) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    let twoDayData = twoDayResult === null || twoDayResult === void 0 ? void 0 : (_twoDayResult$data = twoDayResult.data) === null || _twoDayResult$data === void 0 ? void 0 : _twoDayResult$data.pairs.reduce((obj, cur, i) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    let oneWeekData = oneWeekResult === null || oneWeekResult === void 0 ? void 0 : (_oneWeekResult$data = oneWeekResult.data) === null || _oneWeekResult$data === void 0 ? void 0 : _oneWeekResult$data.pairs.reduce((obj, cur, i) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    let pairData = await Promise.all(current && current.data.pairs.map(async pair => {\n      let data = pair;\n      let oneDayHistory = oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData[pair.id];\n\n      if (!oneDayHistory) {\n        let newData = await client.query({\n          query: PAIR_DATA(pair.id, b1),\n          fetchPolicy: 'cache-first'\n        });\n        oneDayHistory = newData.data.pairs[0];\n      }\n\n      let twoDayHistory = twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData[pair.id];\n\n      if (!twoDayHistory) {\n        let newData = await client.query({\n          query: PAIR_DATA(pair.id, b2),\n          fetchPolicy: 'cache-first'\n        });\n        twoDayHistory = newData.data.pairs[0];\n      }\n\n      let oneWeekHistory = oneWeekData === null || oneWeekData === void 0 ? void 0 : oneWeekData[pair.id];\n\n      if (!oneWeekHistory) {\n        let newData = await client.query({\n          query: PAIR_DATA(pair.id, bWeek),\n          fetchPolicy: 'cache-first'\n        });\n        oneWeekHistory = newData.data.pairs[0];\n      }\n\n      data = parseData(data, oneDayHistory, twoDayHistory, oneWeekHistory, ethPrice, b1);\n      return data;\n    }));\n    return pairData;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction parseData(data, oneDayData, twoDayData, oneWeekData, ethPrice, oneDayBlock) {\n  // get volume changes\n  const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data === null || data === void 0 ? void 0 : data.volumeUSD, (oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.volumeUSD) ? oneDayData.volumeUSD : 0, (twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData.volumeUSD) ? twoDayData.volumeUSD : 0);\n  const [oneDayVolumeUntracked, volumeChangeUntracked] = get2DayPercentChange(data === null || data === void 0 ? void 0 : data.untrackedVolumeUSD, (oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.untrackedVolumeUSD) ? parseFloat(oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.untrackedVolumeUSD) : 0, (twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData.untrackedVolumeUSD) ? twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData.untrackedVolumeUSD : 0);\n  const oneWeekVolumeUSD = parseFloat(oneWeekData ? (data === null || data === void 0 ? void 0 : data.volumeUSD) - (oneWeekData === null || oneWeekData === void 0 ? void 0 : oneWeekData.volumeUSD) : data.volumeUSD); // set volume properties\n\n  data.oneDayVolumeUSD = parseFloat(oneDayVolumeUSD);\n  data.oneWeekVolumeUSD = oneWeekVolumeUSD;\n  data.volumeChangeUSD = volumeChangeUSD;\n  data.oneDayVolumeUntracked = oneDayVolumeUntracked;\n  data.volumeChangeUntracked = volumeChangeUntracked; // set liquiditry properties\n\n  data.trackedReserveUSD = data.trackedReserveETH * ethPrice;\n  data.liquidityChangeUSD = getPercentChange(data.reserveUSD, oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.reserveUSD); // format if pair hasnt existed for a day or a week\n\n  if (!oneDayData && data && data.createdAtBlockNumber > oneDayBlock) {\n    data.oneDayVolumeUSD = parseFloat(data.volumeUSD);\n  }\n\n  if (!oneDayData && data) {\n    data.oneDayVolumeUSD = parseFloat(data.volumeUSD);\n  }\n\n  if (!oneWeekData && data) {\n    data.oneWeekVolumeUSD = parseFloat(data.volumeUSD);\n  } // format incorrect names\n\n\n  updateNameData(data);\n  return data;\n}\n\nconst getPairTransactions = async pairAddress => {\n  const transactions = {};\n\n  try {\n    let result = await client.query({\n      query: FILTERED_TRANSACTIONS,\n      variables: {\n        allPairs: [pairAddress]\n      },\n      fetchPolicy: 'no-cache'\n    });\n    transactions.mints = result.data.mints;\n    transactions.burns = result.data.burns;\n    transactions.swaps = result.data.swaps;\n  } catch (e) {\n    console.log(e);\n  }\n\n  return transactions;\n};\n\nconst getPairChartData = async pairAddress => {\n  let data = [];\n  const utcEndTime = dayjs.utc();\n  let utcStartTime = utcEndTime.subtract(1, 'year').startOf('minute');\n  let startTime = utcStartTime.unix() - 1;\n\n  try {\n    let allFound = false;\n    let skip = 0;\n\n    while (!allFound) {\n      let result = await client.query({\n        query: PAIR_CHART,\n        variables: {\n          pairAddress: pairAddress,\n          skip\n        },\n        fetchPolicy: 'cache-first'\n      });\n      skip += 1000;\n      data = data.concat(result.data.pairDayDatas);\n\n      if (result.data.pairDayDatas.length < 1000) {\n        allFound = true;\n      }\n    }\n\n    let dayIndexSet = new Set();\n    let dayIndexArray = [];\n    const oneDay = 24 * 60 * 60;\n    data.forEach((dayData, i) => {\n      // add the day index to the set of days\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n      dayIndexArray.push(data[i]);\n      dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD);\n      dayData.reserveUSD = parseFloat(dayData.reserveUSD);\n    });\n\n    if (data[0]) {\n      // fill in empty days\n      let timestamp = data[0].date ? data[0].date : startTime;\n      let latestLiquidityUSD = data[0].reserveUSD;\n      let index = 1;\n\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay;\n        let currentDayIndex = (nextDay / oneDay).toFixed(0);\n\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dayString: nextDay,\n            dailyVolumeUSD: 0,\n            reserveUSD: latestLiquidityUSD\n          });\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].reserveUSD;\n          index = index + 1;\n        }\n\n        timestamp = nextDay;\n      }\n    }\n\n    data = data.sort((a, b) => parseInt(a.date) > parseInt(b.date) ? 1 : -1);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n};\n\nconst getHourlyRateData = async (pairAddress, startTime, latestBlock) => {\n  try {\n    var _blocks;\n\n    const utcEndTime = dayjs.utc();\n    let time = startTime; // create an array of hour start times until we reach current hour\n\n    const timestamps = [];\n\n    while (time <= utcEndTime.unix() - 3600) {\n      timestamps.push(time);\n      time += 3600;\n    } // backout if invalid timestamp format\n\n\n    if (timestamps.length === 0) {\n      return [];\n    } // once you have all the timestamps, get the blocks for each timestamp in a bulk query\n\n\n    let blocks;\n    blocks = await getBlocksFromTimestamps(timestamps, 100); // catch failing case\n\n    if (!blocks || ((_blocks = blocks) === null || _blocks === void 0 ? void 0 : _blocks.length) === 0) {\n      return [];\n    }\n\n    if (latestBlock) {\n      blocks = blocks.filter(b => {\n        return parseFloat(b.number) <= parseFloat(latestBlock);\n      });\n    }\n\n    const result = await splitQuery(HOURLY_PAIR_RATES, client, [pairAddress], blocks, 100); // format token ETH price results\n\n    let values = [];\n\n    for (var row in result) {\n      let timestamp = row.split('t')[1];\n\n      if (timestamp) {\n        var _result$row, _result$row2;\n\n        values.push({\n          timestamp,\n          rate0: parseFloat((_result$row = result[row]) === null || _result$row === void 0 ? void 0 : _result$row.token0Price),\n          rate1: parseFloat((_result$row2 = result[row]) === null || _result$row2 === void 0 ? void 0 : _result$row2.token1Price)\n        });\n      }\n    }\n\n    let formattedHistoryRate0 = [];\n    let formattedHistoryRate1 = []; // for each hour, construct the open and close price\n\n    for (let i = 0; i < values.length - 1; i++) {\n      formattedHistoryRate0.push({\n        timestamp: values[i].timestamp,\n        open: parseFloat(values[i].rate0),\n        close: parseFloat(values[i + 1].rate0)\n      });\n      formattedHistoryRate1.push({\n        timestamp: values[i].timestamp,\n        open: parseFloat(values[i].rate1),\n        close: parseFloat(values[i + 1].rate1)\n      });\n    }\n\n    return [formattedHistoryRate0, formattedHistoryRate1];\n  } catch (e) {\n    console.log(e);\n    return [[], []];\n  }\n};\n\nexport function Updater() {\n  const [, {\n    updateTopPairs\n  }] = usePairDataContext();\n  const [ethPrice] = useEthPrice();\n  useEffect(() => {\n    async function getData() {\n      // get top pairs by reserves\n      let {\n        data: {\n          pairs\n        }\n      } = await client.query({\n        query: PAIRS_CURRENT,\n        fetchPolicy: 'cache-first'\n      }); // format as array of addresses\n\n      const formattedPairs = pairs.map(pair => {\n        return pair.id;\n      }); // get data for every pair in list\n\n      let topPairs = await getBulkPairData(formattedPairs, ethPrice);\n      topPairs && updateTopPairs(topPairs);\n    }\n\n    ethPrice && getData();\n  }, [ethPrice, updateTopPairs]);\n  return null;\n}\nexport function useHourlyRateData(pairAddress, timeWindow) {\n  var _state$pairAddress, _state$pairAddress$ho;\n\n  const [state, {\n    updateHourlyData\n  }] = usePairDataContext();\n  const chartData = state === null || state === void 0 ? void 0 : (_state$pairAddress = state[pairAddress]) === null || _state$pairAddress === void 0 ? void 0 : (_state$pairAddress$ho = _state$pairAddress.hourlyData) === null || _state$pairAddress$ho === void 0 ? void 0 : _state$pairAddress$ho[timeWindow];\n  const [latestBlock] = useLatestBlocks();\n  useEffect(() => {\n    const currentTime = dayjs.utc();\n    const windowSize = timeWindow === timeframeOptions.MONTH ? 'month' : 'week';\n    const startTime = timeWindow === timeframeOptions.ALL_TIME ? 1589760000 : currentTime.subtract(1, windowSize).startOf('hour').unix();\n\n    async function fetch() {\n      let data = await getHourlyRateData(pairAddress, startTime, latestBlock);\n      updateHourlyData(pairAddress, data, timeWindow);\n    }\n\n    if (!chartData) {\n      fetch();\n    }\n  }, [chartData, timeWindow, pairAddress, updateHourlyData, latestBlock]);\n  return chartData;\n}\n/**\r\n * @todo\r\n * store these updates to reduce future redundant calls\r\n */\n\nexport function useDataForList(pairList) {\n  const [state] = usePairDataContext();\n  const [ethPrice] = useEthPrice();\n  const [stale, setStale] = useState(false);\n  const [fetched, setFetched] = useState([]); // reset\n\n  useEffect(() => {\n    if (pairList) {\n      setStale(false);\n      setFetched();\n    }\n  }, [pairList]);\n  useEffect(() => {\n    async function fetchNewPairData() {\n      let newFetched = [];\n      let unfetched = [];\n      pairList.map(async pair => {\n        let currentData = state === null || state === void 0 ? void 0 : state[pair.id];\n\n        if (!currentData) {\n          unfetched.push(pair.id);\n        } else {\n          newFetched.push(currentData);\n        }\n      });\n      let newPairData = await getBulkPairData(unfetched.map(pair => {\n        return pair;\n      }), ethPrice);\n      setFetched(newFetched.concat(newPairData));\n    }\n\n    if (ethPrice && pairList && pairList.length > 0 && !fetched && !stale) {\n      setStale(true);\n      fetchNewPairData();\n    }\n  }, [ethPrice, state, pairList, stale, fetched]);\n  let formattedFetch = fetched && fetched.reduce((obj, cur) => {\n    return { ...obj,\n      [cur === null || cur === void 0 ? void 0 : cur.id]: cur\n    };\n  }, {});\n  return formattedFetch;\n}\n/**\r\n * Get all the current and 24hr changes for a pair\r\n */\n\nexport function usePairData(pairAddress) {\n  const [state, {\n    update\n  }] = usePairDataContext();\n  const [ethPrice] = useEthPrice();\n  const pairData = state === null || state === void 0 ? void 0 : state[pairAddress];\n  useEffect(() => {\n    async function fetchData() {\n      if (!pairData && pairAddress) {\n        let data = await getBulkPairData([pairAddress], ethPrice);\n        data && update(pairAddress, data[0]);\n      }\n    }\n\n    if (!pairData && pairAddress && ethPrice && isAddress(pairAddress)) {\n      fetchData();\n    }\n  }, [pairAddress, pairData, update, ethPrice]);\n  return pairData || {};\n}\n/**\r\n * Get most recent txns for a pair\r\n */\n\nexport function usePairTransactions(pairAddress) {\n  var _state$pairAddress2;\n\n  const [state, {\n    updatePairTxns\n  }] = usePairDataContext();\n  const pairTxns = state === null || state === void 0 ? void 0 : (_state$pairAddress2 = state[pairAddress]) === null || _state$pairAddress2 === void 0 ? void 0 : _state$pairAddress2.txns;\n  useEffect(() => {\n    async function checkForTxns() {\n      if (!pairTxns) {\n        let transactions = await getPairTransactions(pairAddress);\n        updatePairTxns(pairAddress, transactions);\n      }\n    }\n\n    checkForTxns();\n  }, [pairTxns, pairAddress, updatePairTxns]);\n  return pairTxns;\n}\nexport function usePairChartData(pairAddress) {\n  var _state$pairAddress3;\n\n  const [state, {\n    updateChartData\n  }] = usePairDataContext();\n  const chartData = state === null || state === void 0 ? void 0 : (_state$pairAddress3 = state[pairAddress]) === null || _state$pairAddress3 === void 0 ? void 0 : _state$pairAddress3.chartData;\n  useEffect(() => {\n    async function checkForChartData() {\n      if (!chartData) {\n        let data = await getPairChartData(pairAddress);\n        updateChartData(pairAddress, data);\n      }\n    }\n\n    checkForChartData();\n  }, [chartData, pairAddress, updateChartData]);\n  return chartData;\n}\nexport function useAllPairData() {\n  const [state] = usePairDataContext();\n  return state || {};\n}","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/pancake-info-v1/src/contexts/PairData.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","useState","client","PAIR_DATA","PAIR_CHART","FILTERED_TRANSACTIONS","PAIRS_CURRENT","PAIRS_BULK","PAIRS_HISTORICAL_BULK","HOURLY_PAIR_RATES","useEthPrice","dayjs","utc","getPercentChange","get2DayPercentChange","isAddress","getBlocksFromTimestamps","getTimestampsForChanges","splitQuery","timeframeOptions","useLatestBlocks","updateNameData","UPDATE","UPDATE_PAIR_TXNS","UPDATE_CHART_DATA","UPDATE_TOP_PAIRS","UPDATE_HOURLY_DATA","extend","safeAccess","object","path","reduce","accumulator","currentValue","PairDataContext","usePairDataContext","reducer","state","type","payload","pairAddress","data","topPairs","added","map","pair","id","address","transactions","txns","chartData","hourlyData","timeWindow","Error","Provider","children","dispatch","update","updateTopPairs","updatePairTxns","updateChartData","updateHourlyData","getBulkPairData","pairList","ethPrice","t1","t2","tWeek","number","b1","b2","bWeek","current","query","variables","allPairs","fetchPolicy","oneDayResult","twoDayResult","oneWeekResult","Promise","all","block","result","oneDayData","pairs","obj","cur","i","twoDayData","oneWeekData","pairData","oneDayHistory","newData","twoDayHistory","oneWeekHistory","parseData","e","console","log","oneDayBlock","oneDayVolumeUSD","volumeChangeUSD","volumeUSD","oneDayVolumeUntracked","volumeChangeUntracked","untrackedVolumeUSD","parseFloat","oneWeekVolumeUSD","trackedReserveUSD","trackedReserveETH","liquidityChangeUSD","reserveUSD","createdAtBlockNumber","getPairTransactions","mints","burns","swaps","getPairChartData","utcEndTime","utcStartTime","subtract","startOf","startTime","unix","allFound","skip","concat","pairDayDatas","length","dayIndexSet","Set","dayIndexArray","oneDay","forEach","dayData","add","date","toFixed","push","dailyVolumeUSD","timestamp","latestLiquidityUSD","index","nextDay","currentDayIndex","has","dayString","sort","a","b","parseInt","getHourlyRateData","latestBlock","time","timestamps","blocks","filter","values","row","split","rate0","token0Price","rate1","token1Price","formattedHistoryRate0","formattedHistoryRate1","open","close","Updater","getData","formattedPairs","useHourlyRateData","currentTime","windowSize","MONTH","ALL_TIME","fetch","useDataForList","stale","setStale","fetched","setFetched","fetchNewPairData","newFetched","unfetched","currentData","newPairData","formattedFetch","usePairData","fetchData","usePairTransactions","pairTxns","checkForTxns","usePairChartData","checkForChartData","useAllPairData"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react'\r\n\r\nimport { client } from '../apollo/client'\r\nimport {\r\n  PAIR_DATA,\r\n  PAIR_CHART,\r\n  FILTERED_TRANSACTIONS,\r\n  PAIRS_CURRENT,\r\n  PAIRS_BULK,\r\n  PAIRS_HISTORICAL_BULK,\r\n  HOURLY_PAIR_RATES,\r\n} from '../apollo/queries'\r\n\r\nimport { useEthPrice } from './GlobalData'\r\n\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\n\r\nimport {\r\n  getPercentChange,\r\n  get2DayPercentChange,\r\n  isAddress,\r\n  getBlocksFromTimestamps,\r\n  getTimestampsForChanges,\r\n  splitQuery,\r\n} from '../utils'\r\nimport { timeframeOptions } from '../constants'\r\nimport { useLatestBlocks } from './Application'\r\nimport { updateNameData } from '../utils/data'\r\n\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_PAIR_TXNS = 'UPDATE_PAIR_TXNS'\r\nconst UPDATE_CHART_DATA = 'UPDATE_CHART_DATA'\r\nconst UPDATE_TOP_PAIRS = 'UPDATE_TOP_PAIRS'\r\nconst UPDATE_HOURLY_DATA = 'UPDATE_HOURLY_DATA'\r\n\r\ndayjs.extend(utc)\r\n\r\nexport function safeAccess(object, path) {\r\n  return object\r\n    ? path.reduce(\r\n        (accumulator, currentValue) => (accumulator && accumulator[currentValue] ? accumulator[currentValue] : null),\r\n        object\r\n      )\r\n    : null\r\n}\r\n\r\nconst PairDataContext = createContext()\r\n\r\nfunction usePairDataContext() {\r\n  return useContext(PairDataContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { pairAddress, data } = payload\r\n      return {\r\n        ...state,\r\n        [pairAddress]: {\r\n          ...state?.[pairAddress],\r\n          ...data,\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_TOP_PAIRS: {\r\n      const { topPairs } = payload\r\n      let added = {}\r\n      topPairs.map((pair) => {\r\n        return (added[pair.id] = pair)\r\n      })\r\n      return {\r\n        ...state,\r\n        ...added,\r\n      }\r\n    }\r\n\r\n    case UPDATE_PAIR_TXNS: {\r\n      const { address, transactions } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...(safeAccess(state, [address]) || {}),\r\n          txns: transactions,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_CHART_DATA: {\r\n      const { address, chartData } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...(safeAccess(state, [address]) || {}),\r\n          chartData,\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_HOURLY_DATA: {\r\n      const { address, hourlyData, timeWindow } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          hourlyData: {\r\n            ...state?.[address]?.hourlyData,\r\n            [timeWindow]: hourlyData,\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {})\r\n\r\n  // update pair specific data\r\n  const update = useCallback((pairAddress, data) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        pairAddress,\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTopPairs = useCallback((topPairs) => {\r\n    dispatch({\r\n      type: UPDATE_TOP_PAIRS,\r\n      payload: {\r\n        topPairs,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updatePairTxns = useCallback((address, transactions) => {\r\n    dispatch({\r\n      type: UPDATE_PAIR_TXNS,\r\n      payload: { address, transactions },\r\n    })\r\n  }, [])\r\n\r\n  const updateChartData = useCallback((address, chartData) => {\r\n    dispatch({\r\n      type: UPDATE_CHART_DATA,\r\n      payload: { address, chartData },\r\n    })\r\n  }, [])\r\n\r\n  const updateHourlyData = useCallback((address, hourlyData, timeWindow) => {\r\n    dispatch({\r\n      type: UPDATE_HOURLY_DATA,\r\n      payload: { address, hourlyData, timeWindow },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <PairDataContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updatePairTxns,\r\n            updateChartData,\r\n            updateTopPairs,\r\n            updateHourlyData,\r\n          },\r\n        ],\r\n        [state, update, updatePairTxns, updateChartData, updateTopPairs, updateHourlyData]\r\n      )}\r\n    >\r\n      {children}\r\n    </PairDataContext.Provider>\r\n  )\r\n}\r\n\r\nasync function getBulkPairData(pairList, ethPrice) {\r\n  const [t1, t2, tWeek] = getTimestampsForChanges()\r\n  let [{ number: b1 }, { number: b2 }, { number: bWeek }] = await getBlocksFromTimestamps([t1, t2, tWeek])\r\n\r\n  try {\r\n    let current = await client.query({\r\n      query: PAIRS_BULK,\r\n      variables: {\r\n        allPairs: pairList,\r\n      },\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let [oneDayResult, twoDayResult, oneWeekResult] = await Promise.all(\r\n      [b1, b2, bWeek].map(async (block) => {\r\n        let result = client.query({\r\n          query: PAIRS_HISTORICAL_BULK(block, pairList),\r\n          fetchPolicy: 'cache-first',\r\n        })\r\n        return result\r\n      })\r\n    )\r\n\r\n    let oneDayData = oneDayResult?.data?.pairs.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let twoDayData = twoDayResult?.data?.pairs.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let oneWeekData = oneWeekResult?.data?.pairs.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let pairData = await Promise.all(\r\n      current &&\r\n        current.data.pairs.map(async (pair) => {\r\n          let data = pair\r\n          let oneDayHistory = oneDayData?.[pair.id]\r\n          if (!oneDayHistory) {\r\n            let newData = await client.query({\r\n              query: PAIR_DATA(pair.id, b1),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            oneDayHistory = newData.data.pairs[0]\r\n          }\r\n          let twoDayHistory = twoDayData?.[pair.id]\r\n          if (!twoDayHistory) {\r\n            let newData = await client.query({\r\n              query: PAIR_DATA(pair.id, b2),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            twoDayHistory = newData.data.pairs[0]\r\n          }\r\n          let oneWeekHistory = oneWeekData?.[pair.id]\r\n          if (!oneWeekHistory) {\r\n            let newData = await client.query({\r\n              query: PAIR_DATA(pair.id, bWeek),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            oneWeekHistory = newData.data.pairs[0]\r\n          }\r\n          data = parseData(data, oneDayHistory, twoDayHistory, oneWeekHistory, ethPrice, b1)\r\n          return data\r\n        })\r\n    )\r\n    return pairData\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nfunction parseData(data, oneDayData, twoDayData, oneWeekData, ethPrice, oneDayBlock) {\r\n  // get volume changes\r\n  const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n    data?.volumeUSD,\r\n    oneDayData?.volumeUSD ? oneDayData.volumeUSD : 0,\r\n    twoDayData?.volumeUSD ? twoDayData.volumeUSD : 0\r\n  )\r\n  const [oneDayVolumeUntracked, volumeChangeUntracked] = get2DayPercentChange(\r\n    data?.untrackedVolumeUSD,\r\n    oneDayData?.untrackedVolumeUSD ? parseFloat(oneDayData?.untrackedVolumeUSD) : 0,\r\n    twoDayData?.untrackedVolumeUSD ? twoDayData?.untrackedVolumeUSD : 0\r\n  )\r\n  const oneWeekVolumeUSD = parseFloat(oneWeekData ? data?.volumeUSD - oneWeekData?.volumeUSD : data.volumeUSD)\r\n\r\n  // set volume properties\r\n  data.oneDayVolumeUSD = parseFloat(oneDayVolumeUSD)\r\n  data.oneWeekVolumeUSD = oneWeekVolumeUSD\r\n  data.volumeChangeUSD = volumeChangeUSD\r\n  data.oneDayVolumeUntracked = oneDayVolumeUntracked\r\n  data.volumeChangeUntracked = volumeChangeUntracked\r\n\r\n  // set liquiditry properties\r\n  data.trackedReserveUSD = data.trackedReserveETH * ethPrice\r\n  data.liquidityChangeUSD = getPercentChange(data.reserveUSD, oneDayData?.reserveUSD)\r\n\r\n  // format if pair hasnt existed for a day or a week\r\n  if (!oneDayData && data && data.createdAtBlockNumber > oneDayBlock) {\r\n    data.oneDayVolumeUSD = parseFloat(data.volumeUSD)\r\n  }\r\n  if (!oneDayData && data) {\r\n    data.oneDayVolumeUSD = parseFloat(data.volumeUSD)\r\n  }\r\n  if (!oneWeekData && data) {\r\n    data.oneWeekVolumeUSD = parseFloat(data.volumeUSD)\r\n  }\r\n\r\n  // format incorrect names\r\n  updateNameData(data)\r\n\r\n  return data\r\n}\r\n\r\nconst getPairTransactions = async (pairAddress) => {\r\n  const transactions = {}\r\n\r\n  try {\r\n    let result = await client.query({\r\n      query: FILTERED_TRANSACTIONS,\r\n      variables: {\r\n        allPairs: [pairAddress],\r\n      },\r\n      fetchPolicy: 'no-cache',\r\n    })\r\n    transactions.mints = result.data.mints\r\n    transactions.burns = result.data.burns\r\n    transactions.swaps = result.data.swaps\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return transactions\r\n}\r\n\r\nconst getPairChartData = async (pairAddress) => {\r\n  let data = []\r\n  const utcEndTime = dayjs.utc()\r\n  let utcStartTime = utcEndTime.subtract(1, 'year').startOf('minute')\r\n  let startTime = utcStartTime.unix() - 1\r\n\r\n  try {\r\n    let allFound = false\r\n    let skip = 0\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: PAIR_CHART,\r\n        variables: {\r\n          pairAddress: pairAddress,\r\n          skip,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      skip += 1000\r\n      data = data.concat(result.data.pairDayDatas)\r\n      if (result.data.pairDayDatas.length < 1000) {\r\n        allFound = true\r\n      }\r\n    }\r\n\r\n    let dayIndexSet = new Set()\r\n    let dayIndexArray = []\r\n    const oneDay = 24 * 60 * 60\r\n    data.forEach((dayData, i) => {\r\n      // add the day index to the set of days\r\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0))\r\n      dayIndexArray.push(data[i])\r\n      dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD)\r\n      dayData.reserveUSD = parseFloat(dayData.reserveUSD)\r\n    })\r\n\r\n    if (data[0]) {\r\n      // fill in empty days\r\n      let timestamp = data[0].date ? data[0].date : startTime\r\n      let latestLiquidityUSD = data[0].reserveUSD\r\n      let index = 1\r\n      while (timestamp < utcEndTime.unix() - oneDay) {\r\n        const nextDay = timestamp + oneDay\r\n        let currentDayIndex = (nextDay / oneDay).toFixed(0)\r\n        if (!dayIndexSet.has(currentDayIndex)) {\r\n          data.push({\r\n            date: nextDay,\r\n            dayString: nextDay,\r\n            dailyVolumeUSD: 0,\r\n            reserveUSD: latestLiquidityUSD,\r\n          })\r\n        } else {\r\n          latestLiquidityUSD = dayIndexArray[index].reserveUSD\r\n          index = index + 1\r\n        }\r\n        timestamp = nextDay\r\n      }\r\n    }\r\n\r\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nconst getHourlyRateData = async (pairAddress, startTime, latestBlock) => {\r\n  try {\r\n    const utcEndTime = dayjs.utc()\r\n    let time = startTime\r\n\r\n    // create an array of hour start times until we reach current hour\r\n    const timestamps = []\r\n    while (time <= utcEndTime.unix() - 3600) {\r\n      timestamps.push(time)\r\n      time += 3600\r\n    }\r\n\r\n    // backout if invalid timestamp format\r\n    if (timestamps.length === 0) {\r\n      return []\r\n    }\r\n\r\n    // once you have all the timestamps, get the blocks for each timestamp in a bulk query\r\n    let blocks\r\n\r\n    blocks = await getBlocksFromTimestamps(timestamps, 100)\r\n\r\n    // catch failing case\r\n    if (!blocks || blocks?.length === 0) {\r\n      return []\r\n    }\r\n\r\n    if (latestBlock) {\r\n      blocks = blocks.filter((b) => {\r\n        return parseFloat(b.number) <= parseFloat(latestBlock)\r\n      })\r\n    }\r\n\r\n    const result = await splitQuery(HOURLY_PAIR_RATES, client, [pairAddress], blocks, 100)\r\n\r\n    // format token ETH price results\r\n    let values = []\r\n    for (var row in result) {\r\n      let timestamp = row.split('t')[1]\r\n      if (timestamp) {\r\n        values.push({\r\n          timestamp,\r\n          rate0: parseFloat(result[row]?.token0Price),\r\n          rate1: parseFloat(result[row]?.token1Price),\r\n        })\r\n      }\r\n    }\r\n\r\n    let formattedHistoryRate0 = []\r\n    let formattedHistoryRate1 = []\r\n\r\n    // for each hour, construct the open and close price\r\n    for (let i = 0; i < values.length - 1; i++) {\r\n      formattedHistoryRate0.push({\r\n        timestamp: values[i].timestamp,\r\n        open: parseFloat(values[i].rate0),\r\n        close: parseFloat(values[i + 1].rate0),\r\n      })\r\n      formattedHistoryRate1.push({\r\n        timestamp: values[i].timestamp,\r\n        open: parseFloat(values[i].rate1),\r\n        close: parseFloat(values[i + 1].rate1),\r\n      })\r\n    }\r\n\r\n    return [formattedHistoryRate0, formattedHistoryRate1]\r\n  } catch (e) {\r\n    console.log(e)\r\n    return [[], []]\r\n  }\r\n}\r\n\r\nexport function Updater() {\r\n  const [, { updateTopPairs }] = usePairDataContext()\r\n  const [ethPrice] = useEthPrice()\r\n  useEffect(() => {\r\n    async function getData() {\r\n      // get top pairs by reserves\r\n      let {\r\n        data: { pairs },\r\n      } = await client.query({\r\n        query: PAIRS_CURRENT,\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n\r\n      // format as array of addresses\r\n      const formattedPairs = pairs.map((pair) => {\r\n        return pair.id\r\n      })\r\n\r\n      // get data for every pair in list\r\n      let topPairs = await getBulkPairData(formattedPairs, ethPrice)\r\n      topPairs && updateTopPairs(topPairs)\r\n    }\r\n    ethPrice && getData()\r\n  }, [ethPrice, updateTopPairs])\r\n  return null\r\n}\r\n\r\nexport function useHourlyRateData(pairAddress, timeWindow) {\r\n  const [state, { updateHourlyData }] = usePairDataContext()\r\n  const chartData = state?.[pairAddress]?.hourlyData?.[timeWindow]\r\n  const [latestBlock] = useLatestBlocks()\r\n\r\n  useEffect(() => {\r\n    const currentTime = dayjs.utc()\r\n    const windowSize = timeWindow === timeframeOptions.MONTH ? 'month' : 'week'\r\n    const startTime =\r\n      timeWindow === timeframeOptions.ALL_TIME ? 1589760000 : currentTime.subtract(1, windowSize).startOf('hour').unix()\r\n\r\n    async function fetch() {\r\n      let data = await getHourlyRateData(pairAddress, startTime, latestBlock)\r\n      updateHourlyData(pairAddress, data, timeWindow)\r\n    }\r\n    if (!chartData) {\r\n      fetch()\r\n    }\r\n  }, [chartData, timeWindow, pairAddress, updateHourlyData, latestBlock])\r\n\r\n  return chartData\r\n}\r\n\r\n/**\r\n * @todo\r\n * store these updates to reduce future redundant calls\r\n */\r\nexport function useDataForList(pairList) {\r\n  const [state] = usePairDataContext()\r\n  const [ethPrice] = useEthPrice()\r\n\r\n  const [stale, setStale] = useState(false)\r\n  const [fetched, setFetched] = useState([])\r\n\r\n  // reset\r\n  useEffect(() => {\r\n    if (pairList) {\r\n      setStale(false)\r\n      setFetched()\r\n    }\r\n  }, [pairList])\r\n\r\n  useEffect(() => {\r\n    async function fetchNewPairData() {\r\n      let newFetched = []\r\n      let unfetched = []\r\n\r\n      pairList.map(async (pair) => {\r\n        let currentData = state?.[pair.id]\r\n        if (!currentData) {\r\n          unfetched.push(pair.id)\r\n        } else {\r\n          newFetched.push(currentData)\r\n        }\r\n      })\r\n\r\n      let newPairData = await getBulkPairData(\r\n        unfetched.map((pair) => {\r\n          return pair\r\n        }),\r\n        ethPrice\r\n      )\r\n      setFetched(newFetched.concat(newPairData))\r\n    }\r\n    if (ethPrice && pairList && pairList.length > 0 && !fetched && !stale) {\r\n      setStale(true)\r\n      fetchNewPairData()\r\n    }\r\n  }, [ethPrice, state, pairList, stale, fetched])\r\n\r\n  let formattedFetch =\r\n    fetched &&\r\n    fetched.reduce((obj, cur) => {\r\n      return { ...obj, [cur?.id]: cur }\r\n    }, {})\r\n\r\n  return formattedFetch\r\n}\r\n\r\n/**\r\n * Get all the current and 24hr changes for a pair\r\n */\r\nexport function usePairData(pairAddress) {\r\n  const [state, { update }] = usePairDataContext()\r\n  const [ethPrice] = useEthPrice()\r\n  const pairData = state?.[pairAddress]\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if (!pairData && pairAddress) {\r\n        let data = await getBulkPairData([pairAddress], ethPrice)\r\n        data && update(pairAddress, data[0])\r\n      }\r\n    }\r\n    if (!pairData && pairAddress && ethPrice && isAddress(pairAddress)) {\r\n      fetchData()\r\n    }\r\n  }, [pairAddress, pairData, update, ethPrice])\r\n\r\n  return pairData || {}\r\n}\r\n\r\n/**\r\n * Get most recent txns for a pair\r\n */\r\nexport function usePairTransactions(pairAddress) {\r\n  const [state, { updatePairTxns }] = usePairDataContext()\r\n  const pairTxns = state?.[pairAddress]?.txns\r\n  useEffect(() => {\r\n    async function checkForTxns() {\r\n      if (!pairTxns) {\r\n        let transactions = await getPairTransactions(pairAddress)\r\n        updatePairTxns(pairAddress, transactions)\r\n      }\r\n    }\r\n    checkForTxns()\r\n  }, [pairTxns, pairAddress, updatePairTxns])\r\n  return pairTxns\r\n}\r\n\r\nexport function usePairChartData(pairAddress) {\r\n  const [state, { updateChartData }] = usePairDataContext()\r\n  const chartData = state?.[pairAddress]?.chartData\r\n\r\n  useEffect(() => {\r\n    async function checkForChartData() {\r\n      if (!chartData) {\r\n        let data = await getPairChartData(pairAddress)\r\n        updateChartData(pairAddress, data)\r\n      }\r\n    }\r\n    checkForChartData()\r\n  }, [chartData, pairAddress, updateChartData])\r\n  return chartData\r\n}\r\n\r\nexport function useAllPairData() {\r\n  const [state] = usePairDataContext()\r\n  return state || {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}