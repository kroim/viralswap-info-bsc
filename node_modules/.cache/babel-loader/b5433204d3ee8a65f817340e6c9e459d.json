{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\pancake-info-v1\\\\src\\\\components\\\\TradingviewChart\\\\index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { formattedNum } from '../../utils';\nimport styled from 'styled-components';\nimport { usePrevious } from 'react-use';\nimport { Play } from 'react-feather';\nimport { useDarkModeManager } from '../../contexts/LocalStorage';\nimport { IconWrapper } from '..';\ndayjs.extend(utc);\nexport const CHART_TYPES = {\n  BAR: 'BAR',\n  AREA: 'AREA'\n};\nconst Wrapper = styled.div`\n  position: relative;\n`; // constant height for charts\n\nconst HEIGHT = 300;\n\nconst TradingViewChart = ({\n  type = CHART_TYPES.BAR,\n  data,\n  base,\n  baseChange,\n  field,\n  title,\n  width,\n  useWeekly = false\n}) => {\n  // reference for DOM element to create with chart\n  const ref = useRef(); // pointer to the chart object\n\n  const [chartCreated, setChartCreated] = useState(false);\n  const dataPrev = usePrevious(data);\n  useEffect(() => {\n    if (data !== dataPrev && chartCreated && type === CHART_TYPES.BAR) {\n      // remove the tooltip element\n      let tooltip = document.getElementById('tooltip-id' + type);\n      let node = document.getElementById('test-id' + type);\n      node.removeChild(tooltip);\n      chartCreated.resize(0, 0);\n      setChartCreated();\n    }\n  }, [chartCreated, data, dataPrev, type]); // parese the data and format for tardingview consumption\n\n  const formattedData = data === null || data === void 0 ? void 0 : data.map(entry => {\n    return {\n      time: dayjs.unix(entry.date).utc().format('YYYY-MM-DD'),\n      value: parseFloat(entry[field])\n    };\n  }); // adjust the scale based on the type of chart\n\n  const topScale = type === CHART_TYPES.AREA ? 0.32 : 0.2;\n  const [darkMode] = useDarkModeManager();\n  const textColor = darkMode ? 'white' : 'black';\n  const previousTheme = usePrevious(darkMode); // reset the chart if them switches\n\n  useEffect(() => {\n    if (chartCreated && previousTheme !== darkMode) {\n      // remove the tooltip element\n      let tooltip = document.getElementById('tooltip-id' + type);\n      let node = document.getElementById('test-id' + type);\n      node.removeChild(tooltip);\n      chartCreated.resize(0, 0);\n      setChartCreated();\n    }\n  }, [chartCreated, darkMode, previousTheme, type]); // if no chart created yet, create one with options and add to DOM manually\n\n  useEffect(() => {\n    if (!chartCreated && formattedData) {\n      var chart = createChart(ref.current, {\n        width: width,\n        height: HEIGHT,\n        layout: {\n          backgroundColor: 'transparent',\n          textColor: textColor\n        },\n        rightPriceScale: {\n          scaleMargins: {\n            top: topScale,\n            bottom: 0\n          },\n          borderVisible: false\n        },\n        timeScale: {\n          borderVisible: false\n        },\n        grid: {\n          horzLines: {\n            color: 'rgba(79, 216, 222, 0.5)',\n            visible: false\n          },\n          vertLines: {\n            color: 'rgba(79, 216, 222, 0.5)',\n            visible: false\n          }\n        },\n        crosshair: {\n          horzLine: {\n            visible: false,\n            labelVisible: false\n          },\n          vertLine: {\n            visible: true,\n            style: 0,\n            width: 2,\n            color: 'rgba(32, 38, 46, 0.1)',\n            labelVisible: false\n          }\n        },\n        localization: {\n          priceFormatter: val => formattedNum(val, true)\n        }\n      });\n      var series = type === CHART_TYPES.BAR ? chart.addHistogramSeries({\n        color: '#4FD8DE',\n        priceFormat: {\n          type: 'volume'\n        },\n        scaleMargins: {\n          top: 0.32,\n          bottom: 0\n        },\n        lineColor: '#4FD8DE',\n        lineWidth: 3\n      }) : chart.addAreaSeries({\n        topColor: '#4FD8DE',\n        bottomColor: 'rgba(79, 216, 222, 0)',\n        lineColor: '#4FD8DE',\n        lineWidth: 3\n      });\n      series.setData(formattedData);\n      var toolTip = document.createElement('div');\n      toolTip.setAttribute('id', 'tooltip-id' + type);\n      toolTip.className = darkMode ? 'three-line-legend-dark' : 'three-line-legend';\n      ref.current.appendChild(toolTip);\n      toolTip.style.display = 'block';\n      toolTip.style.fontWeight = '500';\n      toolTip.style.left = -4 + 'px';\n      toolTip.style.top = '-' + 8 + 'px';\n      toolTip.style.backgroundColor = 'transparent'; // format numbers\n\n      let percentChange = baseChange === null || baseChange === void 0 ? void 0 : baseChange.toFixed(2);\n      let formattedPercentChange = (percentChange > 0 ? '+' : '') + percentChange + '%';\n      let color = percentChange >= 0 ? 'green' : 'red'; // get the title of the chart\n\n      function setLastBarText() {\n        toolTip.innerHTML = `<div style=\"font-size: 16px; margin: 4px 0px; color: ${textColor};\">${title} ${type === CHART_TYPES.BAR && !useWeekly ? '(24hr)' : ''}</div>` + `<div style=\"font-size: 22px; margin: 4px 0px; color:${textColor}\" >` + formattedNum(base !== null && base !== void 0 ? base : 0, true) + `<span style=\"margin-left: 10px; font-size: 16px; color: ${color};\">${formattedPercentChange}</span>` + '</div>';\n      }\n\n      setLastBarText(); // update the title when hovering on the chart\n\n      chart.subscribeCrosshairMove(function (param) {\n        if (param === undefined || param.time === undefined || param.point.x < 0 || param.point.x > width || param.point.y < 0 || param.point.y > HEIGHT) {\n          setLastBarText();\n        } else {\n          let dateStr = useWeekly ? dayjs(param.time.year + '-' + param.time.month + '-' + param.time.day).startOf('week').format('MMMM D, YYYY') + '-' + dayjs(param.time.year + '-' + param.time.month + '-' + param.time.day).endOf('week').format('MMMM D, YYYY') : dayjs(param.time.year + '-' + param.time.month + '-' + param.time.day).format('MMMM D, YYYY');\n          var price = param.seriesPrices.get(series);\n          toolTip.innerHTML = `<div style=\"font-size: 16px; margin: 4px 0px; color: ${textColor};\">${title}</div>` + `<div style=\"font-size: 22px; margin: 4px 0px; color: ${textColor}\">` + formattedNum(price, true) + '</div>' + '<div>' + dateStr + '</div>';\n        }\n      });\n      chart.timeScale().fitContent();\n      setChartCreated(chart);\n    }\n  }, [base, baseChange, chartCreated, darkMode, data, formattedData, textColor, title, topScale, type, useWeekly, width]); // responsiveness\n\n  useEffect(() => {\n    if (width) {\n      chartCreated && chartCreated.resize(width, HEIGHT);\n      chartCreated && chartCreated.timeScale().scrollToPosition(0);\n    }\n  }, [chartCreated, width]);\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: ref,\n    id: 'test-id' + type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), React.createElement(IconWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, React.createElement(Play, {\n    onClick: () => {\n      chartCreated && chartCreated.timeScale().fitContent();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  })));\n};\n\nexport default TradingViewChart;","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/pancake-info-v1/src/components/TradingviewChart/index.js"],"names":["React","useState","useEffect","useRef","createChart","dayjs","utc","formattedNum","styled","usePrevious","Play","useDarkModeManager","IconWrapper","extend","CHART_TYPES","BAR","AREA","Wrapper","div","HEIGHT","TradingViewChart","type","data","base","baseChange","field","title","width","useWeekly","ref","chartCreated","setChartCreated","dataPrev","tooltip","document","getElementById","node","removeChild","resize","formattedData","map","entry","time","unix","date","format","value","parseFloat","topScale","darkMode","textColor","previousTheme","chart","current","height","layout","backgroundColor","rightPriceScale","scaleMargins","top","bottom","borderVisible","timeScale","grid","horzLines","color","visible","vertLines","crosshair","horzLine","labelVisible","vertLine","style","localization","priceFormatter","val","series","addHistogramSeries","priceFormat","lineColor","lineWidth","addAreaSeries","topColor","bottomColor","setData","toolTip","createElement","setAttribute","className","appendChild","display","fontWeight","left","percentChange","toFixed","formattedPercentChange","setLastBarText","innerHTML","subscribeCrosshairMove","param","undefined","point","x","y","dateStr","year","month","day","startOf","endOf","price","seriesPrices","get","fitContent","scrollToPosition"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { createChart } from 'lightweight-charts'\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\nimport { formattedNum } from '../../utils'\r\nimport styled from 'styled-components'\r\nimport { usePrevious } from 'react-use'\r\nimport { Play } from 'react-feather'\r\nimport { useDarkModeManager } from '../../contexts/LocalStorage'\r\nimport { IconWrapper } from '..'\r\n\r\ndayjs.extend(utc)\r\n\r\nexport const CHART_TYPES = {\r\n  BAR: 'BAR',\r\n  AREA: 'AREA',\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n`\r\n\r\n// constant height for charts\r\nconst HEIGHT = 300\r\n\r\nconst TradingViewChart = ({\r\n  type = CHART_TYPES.BAR,\r\n  data,\r\n  base,\r\n  baseChange,\r\n  field,\r\n  title,\r\n  width,\r\n  useWeekly = false,\r\n}) => {\r\n  // reference for DOM element to create with chart\r\n  const ref = useRef()\r\n\r\n  // pointer to the chart object\r\n  const [chartCreated, setChartCreated] = useState(false)\r\n  const dataPrev = usePrevious(data)\r\n\r\n  useEffect(() => {\r\n    if (data !== dataPrev && chartCreated && type === CHART_TYPES.BAR) {\r\n      // remove the tooltip element\r\n      let tooltip = document.getElementById('tooltip-id' + type)\r\n      let node = document.getElementById('test-id' + type)\r\n      node.removeChild(tooltip)\r\n      chartCreated.resize(0, 0)\r\n      setChartCreated()\r\n    }\r\n  }, [chartCreated, data, dataPrev, type])\r\n\r\n  // parese the data and format for tardingview consumption\r\n  const formattedData = data?.map((entry) => {\r\n    return {\r\n      time: dayjs.unix(entry.date).utc().format('YYYY-MM-DD'),\r\n      value: parseFloat(entry[field]),\r\n    }\r\n  })\r\n\r\n  // adjust the scale based on the type of chart\r\n  const topScale = type === CHART_TYPES.AREA ? 0.32 : 0.2\r\n\r\n  const [darkMode] = useDarkModeManager()\r\n  const textColor = darkMode ? 'white' : 'black'\r\n  const previousTheme = usePrevious(darkMode)\r\n\r\n  // reset the chart if them switches\r\n  useEffect(() => {\r\n    if (chartCreated && previousTheme !== darkMode) {\r\n      // remove the tooltip element\r\n      let tooltip = document.getElementById('tooltip-id' + type)\r\n      let node = document.getElementById('test-id' + type)\r\n      node.removeChild(tooltip)\r\n      chartCreated.resize(0, 0)\r\n      setChartCreated()\r\n    }\r\n  }, [chartCreated, darkMode, previousTheme, type])\r\n\r\n  // if no chart created yet, create one with options and add to DOM manually\r\n  useEffect(() => {\r\n    if (!chartCreated && formattedData) {\r\n      var chart = createChart(ref.current, {\r\n        width: width,\r\n        height: HEIGHT,\r\n        layout: {\r\n          backgroundColor: 'transparent',\r\n          textColor: textColor,\r\n        },\r\n        rightPriceScale: {\r\n          scaleMargins: {\r\n            top: topScale,\r\n            bottom: 0,\r\n          },\r\n          borderVisible: false,\r\n        },\r\n        timeScale: {\r\n          borderVisible: false,\r\n        },\r\n        grid: {\r\n          horzLines: {\r\n            color: 'rgba(79, 216, 222, 0.5)',\r\n            visible: false,\r\n          },\r\n          vertLines: {\r\n            color: 'rgba(79, 216, 222, 0.5)',\r\n            visible: false,\r\n          },\r\n        },\r\n        crosshair: {\r\n          horzLine: {\r\n            visible: false,\r\n            labelVisible: false,\r\n          },\r\n          vertLine: {\r\n            visible: true,\r\n            style: 0,\r\n            width: 2,\r\n            color: 'rgba(32, 38, 46, 0.1)',\r\n            labelVisible: false,\r\n          },\r\n        },\r\n        localization: {\r\n          priceFormatter: (val) => formattedNum(val, true),\r\n        },\r\n      })\r\n\r\n      var series =\r\n        type === CHART_TYPES.BAR\r\n          ? chart.addHistogramSeries({\r\n              color: '#4FD8DE',\r\n              priceFormat: {\r\n                type: 'volume',\r\n              },\r\n              scaleMargins: {\r\n                top: 0.32,\r\n                bottom: 0,\r\n              },\r\n              lineColor: '#4FD8DE',\r\n              lineWidth: 3,\r\n            })\r\n          : chart.addAreaSeries({\r\n              topColor: '#4FD8DE',\r\n              bottomColor: 'rgba(79, 216, 222, 0)',\r\n              lineColor: '#4FD8DE',\r\n              lineWidth: 3,\r\n            })\r\n\r\n      series.setData(formattedData)\r\n      var toolTip = document.createElement('div')\r\n      toolTip.setAttribute('id', 'tooltip-id' + type)\r\n      toolTip.className = darkMode ? 'three-line-legend-dark' : 'three-line-legend'\r\n      ref.current.appendChild(toolTip)\r\n      toolTip.style.display = 'block'\r\n      toolTip.style.fontWeight = '500'\r\n      toolTip.style.left = -4 + 'px'\r\n      toolTip.style.top = '-' + 8 + 'px'\r\n      toolTip.style.backgroundColor = 'transparent'\r\n\r\n      // format numbers\r\n      let percentChange = baseChange?.toFixed(2)\r\n      let formattedPercentChange = (percentChange > 0 ? '+' : '') + percentChange + '%'\r\n      let color = percentChange >= 0 ? 'green' : 'red'\r\n\r\n      // get the title of the chart\r\n      function setLastBarText() {\r\n        toolTip.innerHTML =\r\n          `<div style=\"font-size: 16px; margin: 4px 0px; color: ${textColor};\">${title} ${\r\n            type === CHART_TYPES.BAR && !useWeekly ? '(24hr)' : ''\r\n          }</div>` +\r\n          `<div style=\"font-size: 22px; margin: 4px 0px; color:${textColor}\" >` +\r\n          formattedNum(base ?? 0, true) +\r\n          `<span style=\"margin-left: 10px; font-size: 16px; color: ${color};\">${formattedPercentChange}</span>` +\r\n          '</div>'\r\n      }\r\n      setLastBarText()\r\n\r\n      // update the title when hovering on the chart\r\n      chart.subscribeCrosshairMove(function (param) {\r\n        if (\r\n          param === undefined ||\r\n          param.time === undefined ||\r\n          param.point.x < 0 ||\r\n          param.point.x > width ||\r\n          param.point.y < 0 ||\r\n          param.point.y > HEIGHT\r\n        ) {\r\n          setLastBarText()\r\n        } else {\r\n          let dateStr = useWeekly\r\n            ? dayjs(param.time.year + '-' + param.time.month + '-' + param.time.day)\r\n                .startOf('week')\r\n                .format('MMMM D, YYYY') +\r\n              '-' +\r\n              dayjs(param.time.year + '-' + param.time.month + '-' + param.time.day)\r\n                .endOf('week')\r\n                .format('MMMM D, YYYY')\r\n            : dayjs(param.time.year + '-' + param.time.month + '-' + param.time.day).format('MMMM D, YYYY')\r\n          var price = param.seriesPrices.get(series)\r\n\r\n          toolTip.innerHTML =\r\n            `<div style=\"font-size: 16px; margin: 4px 0px; color: ${textColor};\">${title}</div>` +\r\n            `<div style=\"font-size: 22px; margin: 4px 0px; color: ${textColor}\">` +\r\n            formattedNum(price, true) +\r\n            '</div>' +\r\n            '<div>' +\r\n            dateStr +\r\n            '</div>'\r\n        }\r\n      })\r\n\r\n      chart.timeScale().fitContent()\r\n\r\n      setChartCreated(chart)\r\n    }\r\n  }, [\r\n    base,\r\n    baseChange,\r\n    chartCreated,\r\n    darkMode,\r\n    data,\r\n    formattedData,\r\n    textColor,\r\n    title,\r\n    topScale,\r\n    type,\r\n    useWeekly,\r\n    width,\r\n  ])\r\n\r\n  // responsiveness\r\n  useEffect(() => {\r\n    if (width) {\r\n      chartCreated && chartCreated.resize(width, HEIGHT)\r\n      chartCreated && chartCreated.timeScale().scrollToPosition(0)\r\n    }\r\n  }, [chartCreated, width])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div ref={ref} id={'test-id' + type} />\r\n      <IconWrapper>\r\n        <Play\r\n          onClick={() => {\r\n            chartCreated && chartCreated.timeScale().fitContent()\r\n          }}\r\n        />\r\n      </IconWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TradingViewChart\r\n"]},"metadata":{},"sourceType":"module"}