{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\viralswap-info-bsc\\\\src\\\\contexts\\\\User.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react';\nimport { client } from '../apollo/client';\nimport { USER_TRANSACTIONS } from '../apollo/queries';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\ndayjs.extend(utc);\nconst UPDATE_TRANSACTIONS = 'UPDATE_TRANSACTIONS';\nconst UPDATE_POSITIONS = 'UPDATE_POSITIONS ';\nconst UPDATE_MINING_POSITIONS = 'UPDATE_MINING_POSITIONS';\nconst UPDATE_USER_POSITION_HISTORY = 'UPDATE_USER_POSITION_HISTORY';\nconst UPDATE_USER_PAIR_RETURNS = 'UPDATE_USER_PAIR_RETURNS';\nconst TRANSACTIONS_KEY = 'TRANSACTIONS_KEY';\nconst POSITIONS_KEY = 'POSITIONS_KEY';\nconst MINING_POSITIONS_KEY = 'MINING_POSITIONS_KEY';\nconst USER_SNAPSHOTS = 'USER_SNAPSHOTS';\nconst USER_PAIR_RETURNS_KEY = 'USER_PAIR_RETURNS_KEY';\nconst UserContext = createContext();\n\nfunction useUserContext() {\n  return useContext(UserContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE_TRANSACTIONS:\n      {\n        const {\n          account,\n          transactions\n        } = payload;\n        return { ...state,\n          [account]: { ...(state === null || state === void 0 ? void 0 : state[account]),\n            [TRANSACTIONS_KEY]: transactions\n          }\n        };\n      }\n\n    case UPDATE_POSITIONS:\n      {\n        const {\n          account,\n          positions\n        } = payload;\n        return { ...state,\n          [account]: { ...(state === null || state === void 0 ? void 0 : state[account]),\n            [POSITIONS_KEY]: positions\n          }\n        };\n      }\n\n    case UPDATE_MINING_POSITIONS:\n      {\n        const {\n          account,\n          miningPositions\n        } = payload;\n        return { ...state,\n          [account]: { ...(state === null || state === void 0 ? void 0 : state[account]),\n            [MINING_POSITIONS_KEY]: miningPositions\n          }\n        };\n      }\n\n    case UPDATE_USER_POSITION_HISTORY:\n      {\n        const {\n          account,\n          historyData\n        } = payload;\n        return { ...state,\n          [account]: { ...(state === null || state === void 0 ? void 0 : state[account]),\n            [USER_SNAPSHOTS]: historyData\n          }\n        };\n      }\n\n    case UPDATE_USER_PAIR_RETURNS:\n      {\n        var _state$account;\n\n        const {\n          account,\n          pairAddress,\n          data\n        } = payload;\n        return { ...state,\n          [account]: { ...(state === null || state === void 0 ? void 0 : state[account]),\n            [USER_PAIR_RETURNS_KEY]: { ...(state === null || state === void 0 ? void 0 : (_state$account = state[account]) === null || _state$account === void 0 ? void 0 : _state$account[USER_PAIR_RETURNS_KEY]),\n              [pairAddress]: data\n            }\n          }\n        };\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in DataContext reducer: '${type}'.`);\n      }\n  }\n}\n\nconst INITIAL_STATE = {};\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n  const updateTransactions = useCallback((account, transactions) => {\n    dispatch({\n      type: UPDATE_TRANSACTIONS,\n      payload: {\n        account,\n        transactions\n      }\n    });\n  }, []);\n  const updatePositions = useCallback((account, positions) => {\n    dispatch({\n      type: UPDATE_POSITIONS,\n      payload: {\n        account,\n        positions\n      }\n    });\n  }, []);\n  const updateMiningPositions = useCallback((account, miningPositions) => {\n    dispatch({\n      type: UPDATE_MINING_POSITIONS,\n      payload: {\n        account,\n        miningPositions\n      }\n    });\n  }, []);\n  const updateUserSnapshots = useCallback((account, historyData) => {\n    dispatch({\n      type: UPDATE_USER_POSITION_HISTORY,\n      payload: {\n        account,\n        historyData\n      }\n    });\n  }, []);\n  const updateUserPairReturns = useCallback((account, pairAddress, data) => {\n    dispatch({\n      type: UPDATE_USER_PAIR_RETURNS,\n      payload: {\n        account,\n        pairAddress,\n        data\n      }\n    });\n  }, []);\n  return React.createElement(UserContext.Provider, {\n    value: useMemo(() => [state, {\n      updateTransactions,\n      updatePositions,\n      updateMiningPositions,\n      updateUserSnapshots,\n      updateUserPairReturns\n    }], [state, updateTransactions, updatePositions, updateMiningPositions, updateUserSnapshots, updateUserPairReturns]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, children);\n}\nexport function useUserTransactions(account) {\n  var _state$account2;\n\n  const [state, {\n    updateTransactions\n  }] = useUserContext();\n  const transactions = state === null || state === void 0 ? void 0 : (_state$account2 = state[account]) === null || _state$account2 === void 0 ? void 0 : _state$account2[TRANSACTIONS_KEY];\n  useEffect(() => {\n    async function fetchData(account) {\n      try {\n        let result = await client.query({\n          query: USER_TRANSACTIONS,\n          variables: {\n            user: account\n          },\n          fetchPolicy: 'no-cache'\n        });\n\n        if (result === null || result === void 0 ? void 0 : result.data) {\n          updateTransactions(account, result === null || result === void 0 ? void 0 : result.data);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    if (!transactions && account) {\n      fetchData(account);\n    }\n  }, [account, transactions, updateTransactions]);\n  return transactions || {};\n}","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/viralswap-info-bsc/src/contexts/User.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","client","USER_TRANSACTIONS","dayjs","utc","extend","UPDATE_TRANSACTIONS","UPDATE_POSITIONS","UPDATE_MINING_POSITIONS","UPDATE_USER_POSITION_HISTORY","UPDATE_USER_PAIR_RETURNS","TRANSACTIONS_KEY","POSITIONS_KEY","MINING_POSITIONS_KEY","USER_SNAPSHOTS","USER_PAIR_RETURNS_KEY","UserContext","useUserContext","reducer","state","type","payload","account","transactions","positions","miningPositions","historyData","pairAddress","data","Error","INITIAL_STATE","Provider","children","dispatch","updateTransactions","updatePositions","updateMiningPositions","updateUserSnapshots","updateUserPairReturns","useUserTransactions","fetchData","result","query","variables","user","fetchPolicy","e","console","log"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react'\r\nimport { client } from '../apollo/client'\r\nimport { USER_TRANSACTIONS } from '../apollo/queries'\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\n\r\ndayjs.extend(utc)\r\n\r\nconst UPDATE_TRANSACTIONS = 'UPDATE_TRANSACTIONS'\r\nconst UPDATE_POSITIONS = 'UPDATE_POSITIONS '\r\nconst UPDATE_MINING_POSITIONS = 'UPDATE_MINING_POSITIONS'\r\nconst UPDATE_USER_POSITION_HISTORY = 'UPDATE_USER_POSITION_HISTORY'\r\nconst UPDATE_USER_PAIR_RETURNS = 'UPDATE_USER_PAIR_RETURNS'\r\n\r\nconst TRANSACTIONS_KEY = 'TRANSACTIONS_KEY'\r\nconst POSITIONS_KEY = 'POSITIONS_KEY'\r\nconst MINING_POSITIONS_KEY = 'MINING_POSITIONS_KEY'\r\nconst USER_SNAPSHOTS = 'USER_SNAPSHOTS'\r\nconst USER_PAIR_RETURNS_KEY = 'USER_PAIR_RETURNS_KEY'\r\n\r\nconst UserContext = createContext()\r\n\r\nfunction useUserContext() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE_TRANSACTIONS: {\r\n      const { account, transactions } = payload\r\n      return {\r\n        ...state,\r\n        [account]: {\r\n          ...state?.[account],\r\n          [TRANSACTIONS_KEY]: transactions,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_POSITIONS: {\r\n      const { account, positions } = payload\r\n      return {\r\n        ...state,\r\n        [account]: { ...state?.[account], [POSITIONS_KEY]: positions },\r\n      }\r\n    }\r\n    case UPDATE_MINING_POSITIONS: {\r\n      const { account, miningPositions } = payload\r\n      return {\r\n        ...state,\r\n        [account]: { ...state?.[account], [MINING_POSITIONS_KEY]: miningPositions },\r\n      }\r\n    }\r\n    case UPDATE_USER_POSITION_HISTORY: {\r\n      const { account, historyData } = payload\r\n      return {\r\n        ...state,\r\n        [account]: { ...state?.[account], [USER_SNAPSHOTS]: historyData },\r\n      }\r\n    }\r\n\r\n    case UPDATE_USER_PAIR_RETURNS: {\r\n      const { account, pairAddress, data } = payload\r\n      return {\r\n        ...state,\r\n        [account]: {\r\n          ...state?.[account],\r\n          [USER_PAIR_RETURNS_KEY]: {\r\n            ...state?.[account]?.[USER_PAIR_RETURNS_KEY],\r\n            [pairAddress]: data,\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nconst INITIAL_STATE = {}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE)\r\n\r\n  const updateTransactions = useCallback((account, transactions) => {\r\n    dispatch({\r\n      type: UPDATE_TRANSACTIONS,\r\n      payload: {\r\n        account,\r\n        transactions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updatePositions = useCallback((account, positions) => {\r\n    dispatch({\r\n      type: UPDATE_POSITIONS,\r\n      payload: {\r\n        account,\r\n        positions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateMiningPositions = useCallback((account, miningPositions) => {\r\n    dispatch({\r\n      type: UPDATE_MINING_POSITIONS,\r\n      payload: {\r\n        account,\r\n        miningPositions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateUserSnapshots = useCallback((account, historyData) => {\r\n    dispatch({\r\n      type: UPDATE_USER_POSITION_HISTORY,\r\n      payload: {\r\n        account,\r\n        historyData,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateUserPairReturns = useCallback((account, pairAddress, data) => {\r\n    dispatch({\r\n      type: UPDATE_USER_PAIR_RETURNS,\r\n      payload: {\r\n        account,\r\n        pairAddress,\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <UserContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          { updateTransactions, updatePositions, updateMiningPositions, updateUserSnapshots, updateUserPairReturns },\r\n        ],\r\n        [state, updateTransactions, updatePositions, updateMiningPositions, updateUserSnapshots, updateUserPairReturns]\r\n      )}\r\n    >\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useUserTransactions(account) {\r\n  const [state, { updateTransactions }] = useUserContext()\r\n  const transactions = state?.[account]?.[TRANSACTIONS_KEY]\r\n  useEffect(() => {\r\n    async function fetchData(account) {\r\n      try {\r\n        let result = await client.query({\r\n          query: USER_TRANSACTIONS,\r\n          variables: {\r\n            user: account,\r\n          },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (result?.data) {\r\n          updateTransactions(account, result?.data)\r\n        }\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    if (!transactions && account) {\r\n      fetchData(account)\r\n    }\r\n  }, [account, transactions, updateTransactions])\r\n\r\n  return transactions || {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}