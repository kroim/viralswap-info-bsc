{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\viralswap-info-bsc\\\\src\\\\contexts\\\\GlobalData.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react';\nimport { client } from '../apollo/client';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { useTimeframe } from './Application';\nimport { getPercentChange, getBlockFromTimestamp, getBlocksFromTimestamps, get2DayPercentChange, getTimeframe } from '../utils';\nimport { GLOBAL_DATA, GLOBAL_TXNS, GLOBAL_CHART, ETH_PRICE, ALL_PAIRS, ALL_TOKENS } from '../apollo/queries';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nconst UPDATE = 'UPDATE';\nconst UPDATE_TXNS = 'UPDATE_TXNS';\nconst UPDATE_CHART = 'UPDATE_CHART';\nconst UPDATE_ETH_PRICE = 'UPDATE_ETH_PRICE';\nconst ETH_PRICE_KEY = 'ETH_PRICE_KEY';\nconst UPDATE_ALL_PAIRS_IN_UNISWAP = 'UPDAUPDATE_ALL_PAIRS_IN_UNISWAPTE_TOP_PAIRS';\nconst UPDATE_ALL_TOKENS_IN_UNISWAP = 'UPDATE_ALL_TOKENS_IN_UNISWAP';\nconst UPDATE_TOP_LPS = 'UPDATE_TOP_LPS'; // format dayjs with the libraries that we need\n\ndayjs.extend(utc);\ndayjs.extend(weekOfYear);\nconst GlobalDataContext = createContext();\n\nfunction useGlobalDataContext() {\n  return useContext(GlobalDataContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE:\n      {\n        const {\n          data\n        } = payload;\n        return { ...state,\n          globalData: data\n        };\n      }\n\n    case UPDATE_TXNS:\n      {\n        const {\n          transactions\n        } = payload;\n        return { ...state,\n          transactions\n        };\n      }\n\n    case UPDATE_CHART:\n      {\n        const {\n          daily,\n          weekly\n        } = payload;\n        return { ...state,\n          chartData: {\n            daily,\n            weekly\n          }\n        };\n      }\n\n    case UPDATE_ETH_PRICE:\n      {\n        const {\n          ethPrice,\n          oneDayPrice,\n          ethPriceChange\n        } = payload;\n        return {\n          [ETH_PRICE_KEY]: ethPrice,\n          oneDayPrice,\n          ethPriceChange\n        };\n      }\n\n    case UPDATE_ALL_PAIRS_IN_UNISWAP:\n      {\n        const {\n          allPairs\n        } = payload;\n        return { ...state,\n          allPairs\n        };\n      }\n\n    case UPDATE_ALL_TOKENS_IN_UNISWAP:\n      {\n        const {\n          allTokens\n        } = payload;\n        return { ...state,\n          allTokens\n        };\n      }\n\n    case UPDATE_TOP_LPS:\n      {\n        const {\n          topLps\n        } = payload;\n        return { ...state,\n          topLps\n        };\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in DataContext reducer: '${type}'.`);\n      }\n  }\n}\n\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, {});\n  const update = useCallback(data => {\n    dispatch({\n      type: UPDATE,\n      payload: {\n        data\n      }\n    });\n  }, []);\n  const updateTransactions = useCallback(transactions => {\n    dispatch({\n      type: UPDATE_TXNS,\n      payload: {\n        transactions\n      }\n    });\n  }, []);\n  const updateChart = useCallback((daily, weekly) => {\n    dispatch({\n      type: UPDATE_CHART,\n      payload: {\n        daily,\n        weekly\n      }\n    });\n  }, []);\n  const updateEthPrice = useCallback((ethPrice, oneDayPrice, ethPriceChange) => {\n    dispatch({\n      type: UPDATE_ETH_PRICE,\n      payload: {\n        ethPrice,\n        oneDayPrice,\n        ethPriceChange\n      }\n    });\n  }, []);\n  const updateAllPairsInUniswap = useCallback(allPairs => {\n    dispatch({\n      type: UPDATE_ALL_PAIRS_IN_UNISWAP,\n      payload: {\n        allPairs\n      }\n    });\n  }, []);\n  const updateAllTokensInUniswap = useCallback(allTokens => {\n    dispatch({\n      type: UPDATE_ALL_TOKENS_IN_UNISWAP,\n      payload: {\n        allTokens\n      }\n    });\n  }, []);\n  const updateTopLps = useCallback(topLps => {\n    dispatch({\n      type: UPDATE_TOP_LPS,\n      payload: {\n        topLps\n      }\n    });\n  }, []);\n  return React.createElement(GlobalDataContext.Provider, {\n    value: useMemo(() => [state, {\n      update,\n      updateTransactions,\n      updateChart,\n      updateEthPrice,\n      updateTopLps,\n      updateAllPairsInUniswap,\n      updateAllTokensInUniswap\n    }], [state, update, updateTransactions, updateTopLps, updateChart, updateEthPrice, updateAllPairsInUniswap, updateAllTokensInUniswap]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, children);\n}\n/**\r\n * Gets all the global data for the overview page.\r\n * Needs current eth price and the old eth price to get\r\n * 24 hour USD changes.\r\n * @param {*} ethPrice\r\n * @param {*} oldEthPrice\r\n */\n\nasync function getGlobalData(ethPrice, oldEthPrice) {\n  // data for each day , historic data used for % changes\n  let data = {};\n  let oneDayData = {};\n  let twoDayData = {};\n\n  try {\n    // get timestamps for the days\n    // const utcCurrentTime = dayjs.unix(1616025600)  // kroim\n    let curTimestamp = parseInt(Date.now() / 1000 - 300);\n    console.log(\"Current: \", dayjs.unix(curTimestamp));\n    const utcCurrentTime = dayjs.unix(1665062000);\n    const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n    const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n    const utcOneWeekBack = utcCurrentTime.subtract(1, 'week').unix();\n    const utcTwoWeeksBack = utcCurrentTime.subtract(2, 'week').unix(); // get the blocks needed for time travel queries\n\n    let [oneDayBlock, twoDayBlock, oneWeekBlock, twoWeekBlock] = await getBlocksFromTimestamps([utcOneDayBack, utcTwoDaysBack, utcOneWeekBack, utcTwoWeeksBack]); // fetch the global data\n\n    let result = await client.query({\n      query: GLOBAL_DATA(),\n      fetchPolicy: 'cache-first'\n    });\n    data = result.data.pancakeFactories[0]; // fetch the historical data\n\n    let oneDayResult = await client.query({\n      query: GLOBAL_DATA(oneDayBlock === null || oneDayBlock === void 0 ? void 0 : oneDayBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    oneDayData = oneDayResult.data.pancakeFactories[0];\n    let twoDayResult = await client.query({\n      query: GLOBAL_DATA(twoDayBlock === null || twoDayBlock === void 0 ? void 0 : twoDayBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    twoDayData = twoDayResult.data.pancakeFactories[0];\n    let oneWeekResult = await client.query({\n      query: GLOBAL_DATA(oneWeekBlock === null || oneWeekBlock === void 0 ? void 0 : oneWeekBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    const oneWeekData = oneWeekResult.data.pancakeFactories[0];\n    let twoWeekResult = await client.query({\n      query: GLOBAL_DATA(twoWeekBlock === null || twoWeekBlock === void 0 ? void 0 : twoWeekBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    const twoWeekData = twoWeekResult.data.pancakeFactories[0];\n\n    if (data && oneDayData && twoDayData && twoWeekData) {\n      let [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data.totalVolumeUSD, oneDayData.totalVolumeUSD ? oneDayData.totalVolumeUSD : 0, twoDayData.totalVolumeUSD ? twoDayData.totalVolumeUSD : 0);\n      const [oneWeekVolume, weeklyVolumeChange] = get2DayPercentChange(data.totalVolumeUSD, oneWeekData.totalVolumeUSD, twoWeekData.totalVolumeUSD);\n      const [oneDayTxns, txnChange] = get2DayPercentChange(data.totalTransactions, oneDayData.totalTransactions ? oneDayData.totalTransactions : 0, twoDayData.totalTransactions ? twoDayData.totalTransactions : 0); // format the total liquidity in USD\n\n      data.totalLiquidityUSD = data.totalLiquidityBNB * ethPrice;\n      const liquidityChangeUSD = getPercentChange(data.totalLiquidityBNB * ethPrice, oneDayData.totalLiquidityBNB * oldEthPrice); // add relevant fields with the calculated amounts\n\n      data.oneDayVolumeUSD = oneDayVolumeUSD;\n      data.oneWeekVolume = oneWeekVolume;\n      data.weeklyVolumeChange = weeklyVolumeChange;\n      data.volumeChangeUSD = volumeChangeUSD;\n      data.liquidityChangeUSD = liquidityChangeUSD;\n      data.oneDayTxns = oneDayTxns;\n      data.txnChange = txnChange;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n}\n/**\r\n * Get historical data for volume and liquidity used in global charts\r\n * on main page\r\n * @param {*} oldestDateToFetch // start of window to fetch from\r\n */\n\n\nconst getChartData = async oldestDateToFetch => {\n  let data = [];\n  let weeklyData = [];\n  const utcEndTime = dayjs.utc();\n  let skip = 0;\n  let allFound = false;\n\n  try {\n    while (!allFound) {\n      let result = await client.query({\n        query: GLOBAL_CHART,\n        variables: {\n          startTime: oldestDateToFetch,\n          skip\n        },\n        fetchPolicy: 'cache-first'\n      });\n      skip += 1000;\n      data = data.concat(result.data.pancakeDayDatas);\n\n      if (result.data.pancakeDayDatas.length < 1000) {\n        allFound = true;\n      }\n    }\n\n    if (data) {\n      let dayIndexSet = new Set();\n      let dayIndexArray = [];\n      const oneDay = 24 * 60 * 60; // for each day, parse the daily volume and format for chart array\n\n      data.forEach((dayData, i) => {\n        // add the day index to the set of days\n        dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n        dayIndexArray.push(data[i]);\n        dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD);\n      }); // fill in empty days ( there will be no day datas if no trades made that day )\n\n      let timestamp = data[0].date ? data[0].date : oldestDateToFetch;\n      let latestLiquidityUSD = data[0].totalLiquidityUSD;\n      let latestDayDats = data[0].mostLiquidTokens;\n      let index = 1;\n\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay;\n        let currentDayIndex = (nextDay / oneDay).toFixed(0);\n\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dailyVolumeUSD: 0,\n            totalLiquidityUSD: latestLiquidityUSD,\n            mostLiquidTokens: latestDayDats\n          });\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD;\n          latestDayDats = dayIndexArray[index].mostLiquidTokens;\n          index = index + 1;\n        }\n\n        timestamp = nextDay;\n      }\n    } // format weekly data for weekly sized chunks\n\n\n    data = data.sort((a, b) => parseInt(a.date) > parseInt(b.date) ? 1 : -1);\n    let startIndexWeekly = -1;\n    let currentWeek = -1;\n    data.forEach((entry, i) => {\n      var _weeklyData$startInde;\n\n      const week = dayjs.utc(dayjs.unix(data[i].date)).week();\n\n      if (week !== currentWeek) {\n        currentWeek = week;\n        startIndexWeekly++;\n      }\n\n      weeklyData[startIndexWeekly] = weeklyData[startIndexWeekly] || {};\n      weeklyData[startIndexWeekly].date = data[i].date;\n      weeklyData[startIndexWeekly].weeklyVolumeUSD = ((_weeklyData$startInde = weeklyData[startIndexWeekly].weeklyVolumeUSD) !== null && _weeklyData$startInde !== void 0 ? _weeklyData$startInde : 0) + data[i].dailyVolumeUSD;\n    });\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [data, weeklyData];\n};\n/**\r\n * Get and format transactions for global page\r\n */\n\n\nconst getGlobalTransactions = async () => {\n  let transactions = {};\n\n  try {\n    var _result$data;\n\n    let result = await client.query({\n      query: GLOBAL_TXNS,\n      fetchPolicy: 'cache-first'\n    });\n    transactions.mints = [];\n    transactions.burns = [];\n    transactions.swaps = [];\n    (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.transactions) && result.data.transactions.map(transaction => {\n      if (transaction.mints.length > 0) {\n        transaction.mints.map(mint => {\n          return transactions.mints.push(mint);\n        });\n      }\n\n      if (transaction.burns.length > 0) {\n        transaction.burns.map(burn => {\n          return transactions.burns.push(burn);\n        });\n      }\n\n      if (transaction.swaps.length > 0) {\n        transaction.swaps.map(swap => {\n          return transactions.swaps.push(swap);\n        });\n      }\n\n      return true;\n    });\n  } catch (e) {\n    console.log(e);\n  }\n\n  return transactions;\n};\n/**\r\n * Gets the current price  of ETH, 24 hour price, and % change between them\r\n */\n\n\nconst getEthPrice = async () => {\n  // const utcCurrentTime = dayjs.unix(1616025600)  // kroim\n  const utcCurrentTime = dayjs.unix(1665062000);\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix();\n  let ethPrice = 0;\n  let ethPriceOneDay = 0;\n  let priceChangeETH = 0;\n\n  try {\n    var _result$data2, _result$data2$bundles, _resultOneDay$data, _resultOneDay$data$bu;\n\n    let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n    let result = await client.query({\n      query: ETH_PRICE(),\n      fetchPolicy: 'cache-first'\n    });\n    let resultOneDay = await client.query({\n      query: ETH_PRICE(oneDayBlock),\n      fetchPolicy: 'cache-first'\n    });\n    const currentPrice = result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$bundles = _result$data2.bundles[0]) === null || _result$data2$bundles === void 0 ? void 0 : _result$data2$bundles.bnbPrice;\n    const oneDayBackPrice = resultOneDay === null || resultOneDay === void 0 ? void 0 : (_resultOneDay$data = resultOneDay.data) === null || _resultOneDay$data === void 0 ? void 0 : (_resultOneDay$data$bu = _resultOneDay$data.bundles[0]) === null || _resultOneDay$data$bu === void 0 ? void 0 : _resultOneDay$data$bu.bnbPrice;\n    priceChangeETH = getPercentChange(currentPrice, oneDayBackPrice);\n    ethPrice = currentPrice;\n    ethPriceOneDay = oneDayBackPrice;\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [ethPrice, ethPriceOneDay, priceChangeETH];\n};\n\nconst PAIRS_TO_FETCH = 100;\nconst TOKENS_TO_FETCH = 100;\n/**\r\n * Loop through every pair on uniswap, used for search\r\n */\n\nasync function getAllPairsOnUniswap() {\n  // const utcCurrentTime = dayjs.unix(1614556800)\n  const utcCurrentTime = dayjs.unix(1665062000);\n  const utcOneHourBack = utcCurrentTime.subtract(3, 'day').startOf('minute').unix();\n  let oneHourBlock = await getBlockFromTimestamp(utcOneHourBack);\n\n  try {\n    let allFound = false;\n    let pairs = [];\n    let skipCount = 0;\n\n    while (!allFound) {\n      var _result$data3, _result$data4;\n\n      let result = await client.query({\n        query: ALL_PAIRS(oneHourBlock),\n        variables: {\n          skip: skipCount\n        },\n        fetchPolicy: 'cache-first'\n      });\n      skipCount = skipCount + PAIRS_TO_FETCH;\n      pairs = pairs.concat(result === null || result === void 0 ? void 0 : (_result$data3 = result.data) === null || _result$data3 === void 0 ? void 0 : _result$data3.pairs);\n\n      if ((result === null || result === void 0 ? void 0 : (_result$data4 = result.data) === null || _result$data4 === void 0 ? void 0 : _result$data4.pairs.length) < PAIRS_TO_FETCH || pairs.length > PAIRS_TO_FETCH) {\n        allFound = true;\n      }\n    }\n\n    return pairs;\n  } catch (e) {\n    console.log(e);\n  }\n}\n/**\r\n * Loop through every token on uniswap, used for search\r\n */\n\n\nasync function getAllTokensOnUniswap() {\n  try {\n    let allFound = false;\n    let skipCount = 0;\n    let tokens = [];\n\n    while (!allFound) {\n      var _result$data5, _result$data6, _result$data6$tokens;\n\n      let result = await client.query({\n        query: ALL_TOKENS,\n        variables: {\n          skip: skipCount\n        },\n        fetchPolicy: 'cache-first'\n      });\n      tokens = tokens.concat(result === null || result === void 0 ? void 0 : (_result$data5 = result.data) === null || _result$data5 === void 0 ? void 0 : _result$data5.tokens);\n\n      if ((result === null || result === void 0 ? void 0 : (_result$data6 = result.data) === null || _result$data6 === void 0 ? void 0 : (_result$data6$tokens = _result$data6.tokens) === null || _result$data6$tokens === void 0 ? void 0 : _result$data6$tokens.length) < TOKENS_TO_FETCH || tokens.length > TOKENS_TO_FETCH) {\n        allFound = true;\n      }\n\n      skipCount = skipCount += TOKENS_TO_FETCH;\n    }\n\n    return tokens;\n  } catch (e) {\n    console.log(e);\n  }\n}\n/**\r\n * Hook that fetches overview data, plus all tokens and pairs for search\r\n */\n\n\nexport function useGlobalData() {\n  const [state, {\n    update,\n    updateAllPairsInUniswap,\n    updateAllTokensInUniswap\n  }] = useGlobalDataContext();\n  const [ethPrice, oldEthPrice] = useEthPrice();\n  const data = state === null || state === void 0 ? void 0 : state.globalData;\n  useEffect(() => {\n    async function fetchData() {\n      let globalData = await getGlobalData(ethPrice, oldEthPrice);\n      globalData && update(globalData);\n      let allPairs = await getAllPairsOnUniswap();\n      updateAllPairsInUniswap(allPairs);\n      let allTokens = await getAllTokensOnUniswap();\n      updateAllTokensInUniswap(allTokens);\n    }\n\n    if (!data && ethPrice && oldEthPrice) {\n      fetchData();\n    }\n  }, [ethPrice, oldEthPrice, update, data, updateAllPairsInUniswap, updateAllTokensInUniswap]);\n  return data || {};\n}\nexport function useGlobalChartData() {\n  var _state$chartData, _state$chartData2;\n\n  const [state, {\n    updateChart\n  }] = useGlobalDataContext();\n  const [oldestDateFetch, setOldestDateFetched] = useState();\n  const [activeWindow] = useTimeframe();\n  const chartDataDaily = state === null || state === void 0 ? void 0 : (_state$chartData = state.chartData) === null || _state$chartData === void 0 ? void 0 : _state$chartData.daily;\n  const chartDataWeekly = state === null || state === void 0 ? void 0 : (_state$chartData2 = state.chartData) === null || _state$chartData2 === void 0 ? void 0 : _state$chartData2.weekly;\n  /**\r\n   * Keep track of oldest date fetched. Used to\r\n   * limit data fetched until its actually needed.\r\n   * (dont fetch year long stuff unless year option selected)\r\n   */\n\n  useEffect(() => {\n    // based on window, get starttime\n    let startTime = getTimeframe(activeWindow);\n\n    if (activeWindow && startTime < oldestDateFetch || !oldestDateFetch) {\n      setOldestDateFetched(startTime);\n    }\n  }, [activeWindow, oldestDateFetch]);\n  /**\r\n   * Fetch data if none fetched or older data is needed\r\n   */\n\n  useEffect(() => {\n    async function fetchData() {\n      // historical stuff for chart\n      let [newChartData, newWeeklyData] = await getChartData(oldestDateFetch);\n      updateChart(newChartData, newWeeklyData);\n    }\n\n    if (oldestDateFetch && !(chartDataDaily && chartDataWeekly)) {\n      fetchData();\n    }\n  }, [chartDataDaily, chartDataWeekly, oldestDateFetch, updateChart]);\n  return [chartDataDaily, chartDataWeekly];\n}\nexport function useGlobalTransactions() {\n  const [state, {\n    updateTransactions\n  }] = useGlobalDataContext();\n  const transactions = state === null || state === void 0 ? void 0 : state.transactions;\n  useEffect(() => {\n    async function fetchData() {\n      if (!transactions) {\n        let txns = await getGlobalTransactions();\n        updateTransactions(txns);\n      }\n    }\n\n    fetchData();\n  }, [updateTransactions, transactions]);\n  return transactions;\n}\nexport function useEthPrice() {\n  const [state, {\n    updateEthPrice\n  }] = useGlobalDataContext();\n  const ethPrice = state === null || state === void 0 ? void 0 : state[ETH_PRICE_KEY];\n  const ethPriceOld = state === null || state === void 0 ? void 0 : state['oneDayPrice'];\n  useEffect(() => {\n    async function checkForEthPrice() {\n      if (!ethPrice) {\n        let [newPrice, oneDayPrice, priceChange] = await getEthPrice();\n        updateEthPrice(newPrice, oneDayPrice, priceChange);\n      }\n    }\n\n    checkForEthPrice();\n  }, [ethPrice, updateEthPrice]);\n  return [ethPrice, ethPriceOld];\n}\nexport function useAllPairsInUniswap() {\n  const [state] = useGlobalDataContext();\n  let allPairs = state === null || state === void 0 ? void 0 : state.allPairs;\n  return allPairs || [];\n}\nexport function useAllTokensInUniswap() {\n  const [state] = useGlobalDataContext();\n  let allTokens = state === null || state === void 0 ? void 0 : state.allTokens;\n  return allTokens || [];\n}","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/viralswap-info-bsc/src/contexts/GlobalData.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","useState","client","dayjs","utc","useTimeframe","getPercentChange","getBlockFromTimestamp","getBlocksFromTimestamps","get2DayPercentChange","getTimeframe","GLOBAL_DATA","GLOBAL_TXNS","GLOBAL_CHART","ETH_PRICE","ALL_PAIRS","ALL_TOKENS","weekOfYear","UPDATE","UPDATE_TXNS","UPDATE_CHART","UPDATE_ETH_PRICE","ETH_PRICE_KEY","UPDATE_ALL_PAIRS_IN_UNISWAP","UPDATE_ALL_TOKENS_IN_UNISWAP","UPDATE_TOP_LPS","extend","GlobalDataContext","useGlobalDataContext","reducer","state","type","payload","data","globalData","transactions","daily","weekly","chartData","ethPrice","oneDayPrice","ethPriceChange","allPairs","allTokens","topLps","Error","Provider","children","dispatch","update","updateTransactions","updateChart","updateEthPrice","updateAllPairsInUniswap","updateAllTokensInUniswap","updateTopLps","getGlobalData","oldEthPrice","oneDayData","twoDayData","curTimestamp","parseInt","Date","now","console","log","unix","utcCurrentTime","utcOneDayBack","subtract","utcTwoDaysBack","utcOneWeekBack","utcTwoWeeksBack","oneDayBlock","twoDayBlock","oneWeekBlock","twoWeekBlock","result","query","fetchPolicy","pancakeFactories","oneDayResult","number","twoDayResult","oneWeekResult","oneWeekData","twoWeekResult","twoWeekData","oneDayVolumeUSD","volumeChangeUSD","totalVolumeUSD","oneWeekVolume","weeklyVolumeChange","oneDayTxns","txnChange","totalTransactions","totalLiquidityUSD","totalLiquidityBNB","liquidityChangeUSD","e","getChartData","oldestDateToFetch","weeklyData","utcEndTime","skip","allFound","variables","startTime","concat","pancakeDayDatas","length","dayIndexSet","Set","dayIndexArray","oneDay","forEach","dayData","i","add","date","toFixed","push","dailyVolumeUSD","parseFloat","timestamp","latestLiquidityUSD","latestDayDats","mostLiquidTokens","index","nextDay","currentDayIndex","has","sort","a","b","startIndexWeekly","currentWeek","entry","week","weeklyVolumeUSD","getGlobalTransactions","mints","burns","swaps","map","transaction","mint","burn","swap","getEthPrice","startOf","ethPriceOneDay","priceChangeETH","resultOneDay","currentPrice","bundles","bnbPrice","oneDayBackPrice","PAIRS_TO_FETCH","TOKENS_TO_FETCH","getAllPairsOnUniswap","utcOneHourBack","oneHourBlock","pairs","skipCount","getAllTokensOnUniswap","tokens","useGlobalData","useEthPrice","fetchData","useGlobalChartData","oldestDateFetch","setOldestDateFetched","activeWindow","chartDataDaily","chartDataWeekly","newChartData","newWeeklyData","useGlobalTransactions","txns","ethPriceOld","checkForEthPrice","newPrice","priceChange","useAllPairsInUniswap","useAllTokensInUniswap"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react'\r\nimport { client } from '../apollo/client'\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\nimport { useTimeframe } from './Application'\r\nimport {\r\n  getPercentChange,\r\n  getBlockFromTimestamp,\r\n  getBlocksFromTimestamps,\r\n  get2DayPercentChange,\r\n  getTimeframe,\r\n} from '../utils'\r\nimport { GLOBAL_DATA, GLOBAL_TXNS, GLOBAL_CHART, ETH_PRICE, ALL_PAIRS, ALL_TOKENS } from '../apollo/queries'\r\nimport weekOfYear from 'dayjs/plugin/weekOfYear'\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_TXNS = 'UPDATE_TXNS'\r\nconst UPDATE_CHART = 'UPDATE_CHART'\r\nconst UPDATE_ETH_PRICE = 'UPDATE_ETH_PRICE'\r\nconst ETH_PRICE_KEY = 'ETH_PRICE_KEY'\r\nconst UPDATE_ALL_PAIRS_IN_UNISWAP = 'UPDAUPDATE_ALL_PAIRS_IN_UNISWAPTE_TOP_PAIRS'\r\nconst UPDATE_ALL_TOKENS_IN_UNISWAP = 'UPDATE_ALL_TOKENS_IN_UNISWAP'\r\nconst UPDATE_TOP_LPS = 'UPDATE_TOP_LPS'\r\n\r\n// format dayjs with the libraries that we need\r\ndayjs.extend(utc)\r\ndayjs.extend(weekOfYear)\r\n\r\nconst GlobalDataContext = createContext()\r\n\r\nfunction useGlobalDataContext() {\r\n  return useContext(GlobalDataContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { data } = payload\r\n      return {\r\n        ...state,\r\n        globalData: data,\r\n      }\r\n    }\r\n    case UPDATE_TXNS: {\r\n      const { transactions } = payload\r\n      return {\r\n        ...state,\r\n        transactions,\r\n      }\r\n    }\r\n    case UPDATE_CHART: {\r\n      const { daily, weekly } = payload\r\n      return {\r\n        ...state,\r\n        chartData: {\r\n          daily,\r\n          weekly,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_ETH_PRICE: {\r\n      const { ethPrice, oneDayPrice, ethPriceChange } = payload\r\n      return {\r\n        [ETH_PRICE_KEY]: ethPrice,\r\n        oneDayPrice,\r\n        ethPriceChange,\r\n      }\r\n    }\r\n\r\n    case UPDATE_ALL_PAIRS_IN_UNISWAP: {\r\n      const { allPairs } = payload\r\n      return {\r\n        ...state,\r\n        allPairs,\r\n      }\r\n    }\r\n\r\n    case UPDATE_ALL_TOKENS_IN_UNISWAP: {\r\n      const { allTokens } = payload\r\n      return {\r\n        ...state,\r\n        allTokens,\r\n      }\r\n    }\r\n\r\n    case UPDATE_TOP_LPS: {\r\n      const { topLps } = payload\r\n      return {\r\n        ...state,\r\n        topLps,\r\n      }\r\n    }\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {})\r\n  const update = useCallback((data) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTransactions = useCallback((transactions) => {\r\n    dispatch({\r\n      type: UPDATE_TXNS,\r\n      payload: {\r\n        transactions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateChart = useCallback((daily, weekly) => {\r\n    dispatch({\r\n      type: UPDATE_CHART,\r\n      payload: {\r\n        daily,\r\n        weekly,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateEthPrice = useCallback((ethPrice, oneDayPrice, ethPriceChange) => {\r\n    dispatch({\r\n      type: UPDATE_ETH_PRICE,\r\n      payload: {\r\n        ethPrice,\r\n        oneDayPrice,\r\n        ethPriceChange,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateAllPairsInUniswap = useCallback((allPairs) => {\r\n    dispatch({\r\n      type: UPDATE_ALL_PAIRS_IN_UNISWAP,\r\n      payload: {\r\n        allPairs,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateAllTokensInUniswap = useCallback((allTokens) => {\r\n    dispatch({\r\n      type: UPDATE_ALL_TOKENS_IN_UNISWAP,\r\n      payload: {\r\n        allTokens,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTopLps = useCallback((topLps) => {\r\n    dispatch({\r\n      type: UPDATE_TOP_LPS,\r\n      payload: {\r\n        topLps,\r\n      },\r\n    })\r\n  }, [])\r\n  return (\r\n    <GlobalDataContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updateTransactions,\r\n            updateChart,\r\n            updateEthPrice,\r\n            updateTopLps,\r\n            updateAllPairsInUniswap,\r\n            updateAllTokensInUniswap,\r\n          },\r\n        ],\r\n        [\r\n          state,\r\n          update,\r\n          updateTransactions,\r\n          updateTopLps,\r\n          updateChart,\r\n          updateEthPrice,\r\n          updateAllPairsInUniswap,\r\n          updateAllTokensInUniswap,\r\n        ]\r\n      )}\r\n    >\r\n      {children}\r\n    </GlobalDataContext.Provider>\r\n  )\r\n}\r\n\r\n/**\r\n * Gets all the global data for the overview page.\r\n * Needs current eth price and the old eth price to get\r\n * 24 hour USD changes.\r\n * @param {*} ethPrice\r\n * @param {*} oldEthPrice\r\n */\r\nasync function getGlobalData(ethPrice, oldEthPrice) {\r\n  // data for each day , historic data used for % changes\r\n  let data = {}\r\n  let oneDayData = {}\r\n  let twoDayData = {}\r\n\r\n  try {\r\n    // get timestamps for the days\r\n    // const utcCurrentTime = dayjs.unix(1616025600)  // kroim\r\n    let curTimestamp = parseInt(Date.now() / 1000 - 300)\r\n    console.log(\"Current: \", dayjs.unix(curTimestamp))\r\n    const utcCurrentTime = dayjs.unix(1665062000)\r\n    const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix()\r\n    const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix()\r\n    const utcOneWeekBack = utcCurrentTime.subtract(1, 'week').unix()\r\n    const utcTwoWeeksBack = utcCurrentTime.subtract(2, 'week').unix()\r\n\r\n    // get the blocks needed for time travel queries\r\n    let [oneDayBlock, twoDayBlock, oneWeekBlock, twoWeekBlock] = await getBlocksFromTimestamps([\r\n      utcOneDayBack,\r\n      utcTwoDaysBack,\r\n      utcOneWeekBack,\r\n      utcTwoWeeksBack,\r\n    ])\r\n\r\n    // fetch the global data\r\n    let result = await client.query({\r\n      query: GLOBAL_DATA(),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    data = result.data.pancakeFactories[0]\r\n\r\n    // fetch the historical data\r\n    let oneDayResult = await client.query({\r\n      query: GLOBAL_DATA(oneDayBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    oneDayData = oneDayResult.data.pancakeFactories[0]\r\n\r\n    let twoDayResult = await client.query({\r\n      query: GLOBAL_DATA(twoDayBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    twoDayData = twoDayResult.data.pancakeFactories[0]\r\n\r\n    let oneWeekResult = await client.query({\r\n      query: GLOBAL_DATA(oneWeekBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    const oneWeekData = oneWeekResult.data.pancakeFactories[0]\r\n\r\n    let twoWeekResult = await client.query({\r\n      query: GLOBAL_DATA(twoWeekBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    const twoWeekData = twoWeekResult.data.pancakeFactories[0]\r\n\r\n    if (data && oneDayData && twoDayData && twoWeekData) {\r\n      let [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n        data.totalVolumeUSD,\r\n        oneDayData.totalVolumeUSD ? oneDayData.totalVolumeUSD : 0,\r\n        twoDayData.totalVolumeUSD ? twoDayData.totalVolumeUSD : 0\r\n      )\r\n\r\n      const [oneWeekVolume, weeklyVolumeChange] = get2DayPercentChange(\r\n        data.totalVolumeUSD,\r\n        oneWeekData.totalVolumeUSD,\r\n        twoWeekData.totalVolumeUSD\r\n      )\r\n\r\n      const [oneDayTxns, txnChange] = get2DayPercentChange(\r\n        data.totalTransactions,\r\n        oneDayData.totalTransactions ? oneDayData.totalTransactions : 0,\r\n        twoDayData.totalTransactions ? twoDayData.totalTransactions : 0\r\n      )\r\n\r\n      // format the total liquidity in USD\r\n      data.totalLiquidityUSD = data.totalLiquidityBNB * ethPrice\r\n      const liquidityChangeUSD = getPercentChange(\r\n        data.totalLiquidityBNB * ethPrice,\r\n        oneDayData.totalLiquidityBNB * oldEthPrice\r\n      )\r\n\r\n      // add relevant fields with the calculated amounts\r\n      data.oneDayVolumeUSD = oneDayVolumeUSD\r\n      data.oneWeekVolume = oneWeekVolume\r\n      data.weeklyVolumeChange = weeklyVolumeChange\r\n      data.volumeChangeUSD = volumeChangeUSD\r\n      data.liquidityChangeUSD = liquidityChangeUSD\r\n      data.oneDayTxns = oneDayTxns\r\n      data.txnChange = txnChange\r\n    }\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return data\r\n}\r\n\r\n/**\r\n * Get historical data for volume and liquidity used in global charts\r\n * on main page\r\n * @param {*} oldestDateToFetch // start of window to fetch from\r\n */\r\nconst getChartData = async (oldestDateToFetch) => {\r\n  let data = []\r\n  let weeklyData = []\r\n  const utcEndTime = dayjs.utc()\r\n  let skip = 0\r\n  let allFound = false\r\n\r\n  try {\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: GLOBAL_CHART,\r\n        variables: {\r\n          startTime: oldestDateToFetch,\r\n          skip,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      skip += 1000\r\n      data = data.concat(result.data.pancakeDayDatas)\r\n      if (result.data.pancakeDayDatas.length < 1000) {\r\n        allFound = true\r\n      }\r\n    }\r\n\r\n    if (data) {\r\n      let dayIndexSet = new Set()\r\n      let dayIndexArray = []\r\n      const oneDay = 24 * 60 * 60\r\n\r\n      // for each day, parse the daily volume and format for chart array\r\n      data.forEach((dayData, i) => {\r\n        // add the day index to the set of days\r\n        dayIndexSet.add((data[i].date / oneDay).toFixed(0))\r\n        dayIndexArray.push(data[i])\r\n        dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD)\r\n      })\r\n\r\n      // fill in empty days ( there will be no day datas if no trades made that day )\r\n      let timestamp = data[0].date ? data[0].date : oldestDateToFetch\r\n      let latestLiquidityUSD = data[0].totalLiquidityUSD\r\n      let latestDayDats = data[0].mostLiquidTokens\r\n      let index = 1\r\n      while (timestamp < utcEndTime.unix() - oneDay) {\r\n        const nextDay = timestamp + oneDay\r\n        let currentDayIndex = (nextDay / oneDay).toFixed(0)\r\n        if (!dayIndexSet.has(currentDayIndex)) {\r\n          data.push({\r\n            date: nextDay,\r\n            dailyVolumeUSD: 0,\r\n            totalLiquidityUSD: latestLiquidityUSD,\r\n            mostLiquidTokens: latestDayDats,\r\n          })\r\n        } else {\r\n          latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD\r\n          latestDayDats = dayIndexArray[index].mostLiquidTokens\r\n          index = index + 1\r\n        }\r\n        timestamp = nextDay\r\n      }\r\n    }\r\n\r\n    // format weekly data for weekly sized chunks\r\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\r\n    let startIndexWeekly = -1\r\n    let currentWeek = -1\r\n    data.forEach((entry, i) => {\r\n      const week = dayjs.utc(dayjs.unix(data[i].date)).week()\r\n      if (week !== currentWeek) {\r\n        currentWeek = week\r\n        startIndexWeekly++\r\n      }\r\n      weeklyData[startIndexWeekly] = weeklyData[startIndexWeekly] || {}\r\n      weeklyData[startIndexWeekly].date = data[i].date\r\n      weeklyData[startIndexWeekly].weeklyVolumeUSD =\r\n        (weeklyData[startIndexWeekly].weeklyVolumeUSD ?? 0) + data[i].dailyVolumeUSD\r\n    })\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return [data, weeklyData]\r\n}\r\n\r\n/**\r\n * Get and format transactions for global page\r\n */\r\nconst getGlobalTransactions = async () => {\r\n  let transactions = {}\r\n\r\n  try {\r\n    let result = await client.query({\r\n      query: GLOBAL_TXNS,\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    transactions.mints = []\r\n    transactions.burns = []\r\n    transactions.swaps = []\r\n    result?.data?.transactions &&\r\n      result.data.transactions.map((transaction) => {\r\n        if (transaction.mints.length > 0) {\r\n          transaction.mints.map((mint) => {\r\n            return transactions.mints.push(mint)\r\n          })\r\n        }\r\n        if (transaction.burns.length > 0) {\r\n          transaction.burns.map((burn) => {\r\n            return transactions.burns.push(burn)\r\n          })\r\n        }\r\n        if (transaction.swaps.length > 0) {\r\n          transaction.swaps.map((swap) => {\r\n            return transactions.swaps.push(swap)\r\n          })\r\n        }\r\n        return true\r\n      })\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return transactions\r\n}\r\n\r\n/**\r\n * Gets the current price  of ETH, 24 hour price, and % change between them\r\n */\r\nconst getEthPrice = async () => {\r\n  // const utcCurrentTime = dayjs.unix(1616025600)  // kroim\r\n  const utcCurrentTime = dayjs.unix(1665062000)\r\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\r\n\r\n  let ethPrice = 0\r\n  let ethPriceOneDay = 0\r\n  let priceChangeETH = 0\r\n\r\n  try {\r\n    let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack)\r\n    let result = await client.query({\r\n      query: ETH_PRICE(),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    let resultOneDay = await client.query({\r\n      query: ETH_PRICE(oneDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    const currentPrice = result?.data?.bundles[0]?.bnbPrice\r\n    const oneDayBackPrice = resultOneDay?.data?.bundles[0]?.bnbPrice\r\n    priceChangeETH = getPercentChange(currentPrice, oneDayBackPrice)\r\n    ethPrice = currentPrice\r\n    ethPriceOneDay = oneDayBackPrice\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return [ethPrice, ethPriceOneDay, priceChangeETH]\r\n}\r\n\r\nconst PAIRS_TO_FETCH = 100\r\nconst TOKENS_TO_FETCH = 100\r\n\r\n/**\r\n * Loop through every pair on uniswap, used for search\r\n */\r\nasync function getAllPairsOnUniswap() {\r\n  // const utcCurrentTime = dayjs.unix(1614556800)\r\n  const utcCurrentTime = dayjs.unix(1665062000)\r\n  const utcOneHourBack = utcCurrentTime.subtract(3, 'day').startOf('minute').unix()\r\n  let oneHourBlock = await getBlockFromTimestamp(utcOneHourBack)\r\n\r\n  try {\r\n    let allFound = false\r\n    let pairs = []\r\n    let skipCount = 0\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: ALL_PAIRS(oneHourBlock),\r\n        variables: {\r\n          skip: skipCount,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      skipCount = skipCount + PAIRS_TO_FETCH\r\n      pairs = pairs.concat(result?.data?.pairs)\r\n      if (result?.data?.pairs.length < PAIRS_TO_FETCH || pairs.length > PAIRS_TO_FETCH) {\r\n        allFound = true\r\n      }\r\n    }\r\n    return pairs\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\n/**\r\n * Loop through every token on uniswap, used for search\r\n */\r\nasync function getAllTokensOnUniswap() {\r\n  try {\r\n    let allFound = false\r\n    let skipCount = 0\r\n    let tokens = []\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: ALL_TOKENS,\r\n        variables: {\r\n          skip: skipCount,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      tokens = tokens.concat(result?.data?.tokens)\r\n      if (result?.data?.tokens?.length < TOKENS_TO_FETCH || tokens.length > TOKENS_TO_FETCH) {\r\n        allFound = true\r\n      }\r\n      skipCount = skipCount += TOKENS_TO_FETCH\r\n    }\r\n    return tokens\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\n/**\r\n * Hook that fetches overview data, plus all tokens and pairs for search\r\n */\r\nexport function useGlobalData() {\r\n  const [state, { update, updateAllPairsInUniswap, updateAllTokensInUniswap }] = useGlobalDataContext()\r\n  const [ethPrice, oldEthPrice] = useEthPrice()\r\n\r\n  const data = state?.globalData\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let globalData = await getGlobalData(ethPrice, oldEthPrice)\r\n      globalData && update(globalData)\r\n\r\n      let allPairs = await getAllPairsOnUniswap()\r\n      updateAllPairsInUniswap(allPairs)\r\n\r\n      let allTokens = await getAllTokensOnUniswap()\r\n      updateAllTokensInUniswap(allTokens)\r\n    }\r\n    if (!data && ethPrice && oldEthPrice) {\r\n      fetchData()\r\n    }\r\n  }, [ethPrice, oldEthPrice, update, data, updateAllPairsInUniswap, updateAllTokensInUniswap])\r\n\r\n  return data || {}\r\n}\r\n\r\nexport function useGlobalChartData() {\r\n  const [state, { updateChart }] = useGlobalDataContext()\r\n  const [oldestDateFetch, setOldestDateFetched] = useState()\r\n  const [activeWindow] = useTimeframe()\r\n\r\n  const chartDataDaily = state?.chartData?.daily\r\n  const chartDataWeekly = state?.chartData?.weekly\r\n\r\n  /**\r\n   * Keep track of oldest date fetched. Used to\r\n   * limit data fetched until its actually needed.\r\n   * (dont fetch year long stuff unless year option selected)\r\n   */\r\n  useEffect(() => {\r\n    // based on window, get starttime\r\n    let startTime = getTimeframe(activeWindow)\r\n\r\n    if ((activeWindow && startTime < oldestDateFetch) || !oldestDateFetch) {\r\n      setOldestDateFetched(startTime)\r\n    }\r\n  }, [activeWindow, oldestDateFetch])\r\n\r\n  /**\r\n   * Fetch data if none fetched or older data is needed\r\n   */\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // historical stuff for chart\r\n      let [newChartData, newWeeklyData] = await getChartData(oldestDateFetch)\r\n      updateChart(newChartData, newWeeklyData)\r\n    }\r\n    if (oldestDateFetch && !(chartDataDaily && chartDataWeekly)) {\r\n      fetchData()\r\n    }\r\n  }, [chartDataDaily, chartDataWeekly, oldestDateFetch, updateChart])\r\n\r\n  return [chartDataDaily, chartDataWeekly]\r\n}\r\n\r\nexport function useGlobalTransactions() {\r\n  const [state, { updateTransactions }] = useGlobalDataContext()\r\n  const transactions = state?.transactions\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if (!transactions) {\r\n        let txns = await getGlobalTransactions()\r\n        updateTransactions(txns)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [updateTransactions, transactions])\r\n  return transactions\r\n}\r\n\r\nexport function useEthPrice() {\r\n  const [state, { updateEthPrice }] = useGlobalDataContext()\r\n  const ethPrice = state?.[ETH_PRICE_KEY]\r\n  const ethPriceOld = state?.['oneDayPrice']\r\n  useEffect(() => {\r\n    async function checkForEthPrice() {\r\n      if (!ethPrice) {\r\n        let [newPrice, oneDayPrice, priceChange] = await getEthPrice()\r\n        updateEthPrice(newPrice, oneDayPrice, priceChange)\r\n      }\r\n    }\r\n    checkForEthPrice()\r\n  }, [ethPrice, updateEthPrice])\r\n\r\n  return [ethPrice, ethPriceOld]\r\n}\r\n\r\nexport function useAllPairsInUniswap() {\r\n  const [state] = useGlobalDataContext()\r\n  let allPairs = state?.allPairs\r\n\r\n  return allPairs || []\r\n}\r\n\r\nexport function useAllTokensInUniswap() {\r\n  const [state] = useGlobalDataContext()\r\n  let allTokens = state?.allTokens\r\n\r\n  return allTokens || []\r\n}\r\n"]},"metadata":{},"sourceType":"module"}