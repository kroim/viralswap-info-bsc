{"ast":null,"code":"import gql from 'graphql-tag';\nimport { FACTORY_ADDRESS, BUNDLE_ID } from '../constants';\nexport const SUBGRAPH_HEALTH = gql`\n  query health {\n    indexingStatusForCurrentVersion(subgraphName: \"pancakeswap/exchange\") {\n      synced\n      health\n      chains {\n        chainHeadBlock {\n          number\n        }\n        latestBlock {\n          number\n        }\n      }\n    }\n  }\n`;\nexport const GET_BLOCK = gql`\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\n    blocks(\n      first: 1\n      orderBy: timestamp\n      orderDirection: asc\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\n    ) {\n      id\n      number\n      timestamp\n    }\n  }\n`;\nexport const GET_BLOCKS = timestamps => {\n  let queryString = 'query blocks {';\n  queryString += timestamps.map(timestamp => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${timestamp + 600} }) {\n      number\n    }`;\n  });\n  queryString += '}';\n  return gql(queryString);\n};\nexport const PRICES_BY_BLOCK = (tokenAddress, blocks) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(block => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedBNB\n      }\n    `);\n  queryString += ',';\n  queryString += blocks.map(block => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        bnbPrice\n      }\n    `);\n  queryString += '}';\n  return gql(queryString);\n};\nexport const HOURLY_PAIR_RATES = (pairAddress, blocks) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(block => `\n      t${block.timestamp}: pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \n        token0Price\n        token1Price\n      }\n    `);\n  queryString += '}';\n  return gql(queryString);\n};\nexport const SHARE_VALUE = (pairAddress, blocks) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(block => `\n      t${block.timestamp}:pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \n        reserve0\n        reserve1\n        reserveUSD\n        totalSupply \n        token0{\n          derivedBNB\n        }\n        token1{\n          derivedBNB\n        }\n      }\n    `);\n  queryString += ',';\n  queryString += blocks.map(block => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        bnbPrice\n      }\n    `);\n  queryString += '}';\n  return gql(queryString);\n};\nexport const ETH_PRICE = block => {\n  const queryString = block ? `\n    query bundles {\n      bundles(where: { id: ${BUNDLE_ID} } block: {number: ${block}}) {\n        id\n        bnbPrice\n      }\n    }\n  ` : ` query bundles {\n      bundles(where: { id: ${BUNDLE_ID} }) {\n        id\n        bnbPrice\n      }\n    }\n  `;\n  return gql(queryString);\n};\nexport const USER_MINTS_BUNRS_PER_PAIR = gql`\n  query events($user: Bytes!, $pair: Bytes!) {\n    mints(where: { to: $user, pair: $pair }) {\n      amountUSD\n      amount0\n      amount1\n      timestamp\n      pair {\n        token0 {\n          id\n        }\n        token1 {\n          id\n        }\n      }\n    }\n    burns(where: { sender: $user, pair: $pair }) {\n      amountUSD\n      amount0\n      amount1\n      timestamp\n      pair {\n        token0 {\n          id\n        }\n        token1 {\n          id\n        }\n      }\n    }\n  }\n`;\nexport const USER_TRANSACTIONS = gql`\n  query transactions($user: Bytes!) {\n    mints(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\n      id\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(orderBy: timestamp, orderDirection: desc, where: { sender: $user }) {\n      id\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        id\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      sender\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\n      id\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`;\nexport const PAIR_CHART = gql`\n  query pairDayDatas($pairAddress: Bytes!, $skip: Int!) {\n    pairDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { pairAddress: $pairAddress }) {\n      id\n      date\n      dailyVolumeToken0\n      dailyVolumeToken1\n      dailyVolumeUSD\n      reserveUSD\n    }\n  }\n`;\nexport const PAIR_DAY_DATA = gql`\n  query pairDayDatas($pairAddress: Bytes!, $date: Int!) {\n    pairDayDatas(first: 1, orderBy: date, orderDirection: desc, where: { pairAddress: $pairAddress, date_lt: $date }) {\n      id\n      date\n      dailyVolumeToken0\n      dailyVolumeToken1\n      dailyVolumeUSD\n      totalSupply\n      reserveUSD\n    }\n  }\n`;\nexport const PAIR_DAY_DATA_BULK = (pairs, startTimestamp) => {\n  let pairsString = `[`;\n  pairs.map(pair => {\n    return pairsString += `\"${pair}\"`;\n  });\n  pairsString += ']';\n  const queryString = `\n    query days {\n      pairDayDatas(first: 1000, orderBy: date, orderDirection: asc, where: { pairAddress_in: ${pairsString}, date_gt: ${startTimestamp} }) {\n        id\n        pairAddress\n        date\n        dailyVolumeToken0\n        dailyVolumeToken1\n        dailyVolumeUSD\n        totalSupply\n        reserveUSD\n      }\n    } \n`;\n  return gql(queryString);\n};\nexport const GLOBAL_CHART = gql`\n  query uniswapDayDatas($startTime: Int!, $skip: Int!) {\n    uniswapDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      id\n      date\n      totalVolumeUSD\n      dailyVolumeUSD\n      dailyVolumeETH\n      totalLiquidityUSD\n      totalLiquidityETH\n    }\n  }\n`;\nexport const GLOBAL_DATA = block => {\n  const queryString = ` query uniswapFactories {\n      uniswapFactories(\n       ${block ? `block: { number: ${block}}` : ``} \n       where: { id: \"${FACTORY_ADDRESS}\" }) {\n        id\n        totalVolumeUSD\n        totalVolumeETH\n        untrackedVolumeUSD\n        totalLiquidityUSD\n        totalLiquidityETH\n        txCount\n        pairCount\n      }\n    }`;\n  return gql(queryString);\n};\nexport const GLOBAL_TXNS = gql`\n  query transactions {\n    transactions(first: 100, orderBy: timestamp, orderDirection: desc) {\n      mints(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          id\n          timestamp\n        }\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        to\n        liquidity\n        amount0\n        amount1\n        amountUSD\n      }\n      burns(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          id\n          timestamp\n        }\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        sender\n        liquidity\n        amount0\n        amount1\n        amountUSD\n      }\n      swaps(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          id\n          timestamp\n        }\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        amount0In\n        amount0Out\n        amount1In\n        amount1Out\n        amountUSD\n        to\n      }\n    }\n  }\n`;\nexport const ALL_TOKENS = gql`\n  query tokens($skip: Int!) {\n    tokens(first: 100, skip: $skip) {\n      id\n      name\n      symbol\n      totalLiquidity\n    }\n  }\n`;\nexport const TOKEN_SEARCH = gql`\n  query tokens($value: String, $id: String) {\n    asSymbol: tokens(where: { symbol: $value }, orderBy: totalLiquidity, orderDirection: desc) {\n      id\n      symbol\n      name\n      totalLiquidity\n    }\n    asName: tokens(where: { name: $value }, orderBy: totalLiquidity, orderDirection: desc) {\n      id\n      symbol\n      name\n      totalLiquidity\n    }\n    asAddress: tokens(where: { id: $id }, orderBy: totalLiquidity, orderDirection: desc) {\n      id\n      symbol\n      name\n      totalLiquidity\n    }\n  }\n`;\nexport const PAIR_SEARCH = gql`\n  query pairs($tokens: [Bytes]!, $id: String) {\n    as0: pairs(where: { token0_in: $tokens }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n    as1: pairs(where: { token1_in: $tokens }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n    asAddress: pairs(where: { id: $id }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n  }\n`;\nexport const ALL_PAIRS = block => {\n  return gql(`\n  query pairs($skip: Int!) {\n    pairs(first: 100, skip: $skip, orderBy: trackedReserveETH, orderDirection: desc, where: { createdAtBlockNumber_gte: 5753123 }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n  }\n`);\n};\nconst PairFields = `\n  fragment PairFields on Pair {\n    id\n    txCount\n    token0 {\n      id\n      symbol\n      name\n      totalLiquidity\n      derivedETH\n    }\n    token1 {\n      id\n      symbol\n      name\n      totalLiquidity\n      derivedETH\n    }\n    reserve0\n    reserve1\n    reserveUSD\n    totalSupply\n    trackedReserveETH\n    reserveETH\n    volumeUSD\n    untrackedVolumeUSD\n    token0Price\n    token1Price\n    createdAtTimestamp\n  }\n`;\nexport const PAIRS_CURRENT = gql`\n  query pairs {\n    pairs(first: 100, where: { createdAtBlockNumber_gte : 5753123 },  orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n    }\n  }\n`;\nexport const PAIR_DATA = (pairAddress, block) => {\n  const queryString = `\n    ${PairFields}\n    query pairs {\n      pairs(${block ? `block: {number: ${block}}` : ``} where: { id: \"${pairAddress}\"} ) {\n        ...PairFields\n      }\n    }`;\n  return gql(queryString);\n};\nexport const PAIRS_BULK = gql`\n  ${PairFields}\n  query pairs($allPairs: [Bytes]!) {\n    pairs(where: { id_in: $allPairs }, orderBy: trackedReserveETH, orderDirection: desc) {\n      ...PairFields\n    }\n  }\n`;\nexport const PAIRS_HISTORICAL_BULK = (block, pairs) => {\n  let pairsString = `[`;\n  pairs.map(pair => {\n    return pairsString += `\"${pair}\"`;\n  });\n  pairsString += ']';\n  let queryString = `\n  query pairs {\n    pairs(first: 200, where: {id_in: ${pairsString}}, block: {number: ${block}}, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n      reserveUSD\n      trackedReserveETH\n      volumeUSD\n      untrackedVolumeUSD\n    }\n  }\n  `;\n  return gql(queryString);\n};\nexport const TOKEN_CHART = gql`\n  query tokenDayDatas($tokenAddr: String!, $skip: Int!) {\n    tokenDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { token: $tokenAddr }) {\n      id\n      date\n      priceUSD\n      totalLiquidityToken\n      totalLiquidityUSD\n      totalLiquidityETH\n      dailyVolumeETH\n      dailyVolumeToken\n      dailyVolumeUSD\n    }\n  }\n`;\nconst TokenFields = `\n  fragment TokenFields on Token {\n    id\n    name\n    symbol\n    derivedETH\n    tradeVolume\n    tradeVolumeUSD\n    untrackedVolumeUSD\n    totalLiquidity\n    txCount\n  }\n`;\nexport const TOKENS_CURRENT = gql`\n  ${TokenFields}\n  query tokens {\n    tokens(first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      ...TokenFields\n    }\n  }\n`;\nexport const TOKENS_DYNAMIC = block => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(block: {number: ${block}} first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\nexport const TOKEN_DATA = (tokenAddress, block) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(${block ? `block : {number: ${block}}` : ``} where: {id:\"${tokenAddress}\"}) {\n        ...TokenFields\n      }\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n    }\n  `;\n  return gql(queryString);\n};\nexport const FILTERED_TRANSACTIONS = gql`\n  query($allPairs: [Bytes]!) {\n    mints(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 30, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\n      transaction {\n        id\n        timestamp\n      }\n      id\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`;","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/pancake-info-v1/src/apollo/queries.js"],"names":["gql","FACTORY_ADDRESS","BUNDLE_ID","SUBGRAPH_HEALTH","GET_BLOCK","GET_BLOCKS","timestamps","queryString","map","timestamp","PRICES_BY_BLOCK","tokenAddress","blocks","block","number","HOURLY_PAIR_RATES","pairAddress","SHARE_VALUE","ETH_PRICE","USER_MINTS_BUNRS_PER_PAIR","USER_TRANSACTIONS","PAIR_CHART","PAIR_DAY_DATA","PAIR_DAY_DATA_BULK","pairs","startTimestamp","pairsString","pair","GLOBAL_CHART","GLOBAL_DATA","GLOBAL_TXNS","ALL_TOKENS","TOKEN_SEARCH","PAIR_SEARCH","ALL_PAIRS","PairFields","PAIRS_CURRENT","PAIR_DATA","PAIRS_BULK","PAIRS_HISTORICAL_BULK","TOKEN_CHART","TokenFields","TOKENS_CURRENT","TOKENS_DYNAMIC","TOKEN_DATA","FILTERED_TRANSACTIONS"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag'\r\nimport { FACTORY_ADDRESS, BUNDLE_ID } from '../constants'\r\n\r\nexport const SUBGRAPH_HEALTH = gql`\r\n  query health {\r\n    indexingStatusForCurrentVersion(subgraphName: \"pancakeswap/exchange\") {\r\n      synced\r\n      health\r\n      chains {\r\n        chainHeadBlock {\r\n          number\r\n        }\r\n        latestBlock {\r\n          number\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_BLOCK = gql`\r\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\r\n    blocks(\r\n      first: 1\r\n      orderBy: timestamp\r\n      orderDirection: asc\r\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\r\n    ) {\r\n      id\r\n      number\r\n      timestamp\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_BLOCKS = (timestamps) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += timestamps.map((timestamp) => {\r\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${timestamp + 600\r\n      } }) {\r\n      number\r\n    }`\r\n  })\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const PRICES_BY_BLOCK = (tokenAddress, blocks) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \r\n        derivedBNB\r\n      }\r\n    `\r\n  )\r\n  queryString += ','\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \r\n        bnbPrice\r\n      }\r\n    `\r\n  )\r\n\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const HOURLY_PAIR_RATES = (pairAddress, blocks) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      t${block.timestamp}: pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \r\n        token0Price\r\n        token1Price\r\n      }\r\n    `\r\n  )\r\n\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const SHARE_VALUE = (pairAddress, blocks) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      t${block.timestamp}:pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \r\n        reserve0\r\n        reserve1\r\n        reserveUSD\r\n        totalSupply \r\n        token0{\r\n          derivedBNB\r\n        }\r\n        token1{\r\n          derivedBNB\r\n        }\r\n      }\r\n    `\r\n  )\r\n  queryString += ','\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \r\n        bnbPrice\r\n      }\r\n    `\r\n  )\r\n\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const ETH_PRICE = (block) => {\r\n  const queryString = block\r\n    ? `\r\n    query bundles {\r\n      bundles(where: { id: ${BUNDLE_ID} } block: {number: ${block}}) {\r\n        id\r\n        bnbPrice\r\n      }\r\n    }\r\n  `\r\n    : ` query bundles {\r\n      bundles(where: { id: ${BUNDLE_ID} }) {\r\n        id\r\n        bnbPrice\r\n      }\r\n    }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const USER_MINTS_BUNRS_PER_PAIR = gql`\r\n  query events($user: Bytes!, $pair: Bytes!) {\r\n    mints(where: { to: $user, pair: $pair }) {\r\n      amountUSD\r\n      amount0\r\n      amount1\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n        }\r\n        token1 {\r\n          id\r\n        }\r\n      }\r\n    }\r\n    burns(where: { sender: $user, pair: $pair }) {\r\n      amountUSD\r\n      amount0\r\n      amount1\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n        }\r\n        token1 {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_TRANSACTIONS = gql`\r\n  query transactions($user: Bytes!) {\r\n    mints(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\r\n      id\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        id\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    burns(orderBy: timestamp, orderDirection: desc, where: { sender: $user }) {\r\n      id\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        id\r\n        token0 {\r\n          symbol\r\n        }\r\n        token1 {\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      to\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\r\n      id\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        token0 {\r\n          symbol\r\n        }\r\n        token1 {\r\n          symbol\r\n        }\r\n      }\r\n      amount0In\r\n      amount0Out\r\n      amount1In\r\n      amount1Out\r\n      amountUSD\r\n      to\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_CHART = gql`\r\n  query pairDayDatas($pairAddress: Bytes!, $skip: Int!) {\r\n    pairDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { pairAddress: $pairAddress }) {\r\n      id\r\n      date\r\n      dailyVolumeToken0\r\n      dailyVolumeToken1\r\n      dailyVolumeUSD\r\n      reserveUSD\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_DAY_DATA = gql`\r\n  query pairDayDatas($pairAddress: Bytes!, $date: Int!) {\r\n    pairDayDatas(first: 1, orderBy: date, orderDirection: desc, where: { pairAddress: $pairAddress, date_lt: $date }) {\r\n      id\r\n      date\r\n      dailyVolumeToken0\r\n      dailyVolumeToken1\r\n      dailyVolumeUSD\r\n      totalSupply\r\n      reserveUSD\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_DAY_DATA_BULK = (pairs, startTimestamp) => {\r\n  let pairsString = `[`\r\n  pairs.map((pair) => {\r\n    return (pairsString += `\"${pair}\"`)\r\n  })\r\n  pairsString += ']'\r\n  const queryString = `\r\n    query days {\r\n      pairDayDatas(first: 1000, orderBy: date, orderDirection: asc, where: { pairAddress_in: ${pairsString}, date_gt: ${startTimestamp} }) {\r\n        id\r\n        pairAddress\r\n        date\r\n        dailyVolumeToken0\r\n        dailyVolumeToken1\r\n        dailyVolumeUSD\r\n        totalSupply\r\n        reserveUSD\r\n      }\r\n    } \r\n`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const GLOBAL_CHART = gql`\r\n  query uniswapDayDatas($startTime: Int!, $skip: Int!) {\r\n    uniswapDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\r\n      id\r\n      date\r\n      totalVolumeUSD\r\n      dailyVolumeUSD\r\n      dailyVolumeETH\r\n      totalLiquidityUSD\r\n      totalLiquidityETH\r\n    }\r\n  }\r\n`\r\n\r\nexport const GLOBAL_DATA = (block) => {\r\n  const queryString = ` query uniswapFactories {\r\n      uniswapFactories(\r\n       ${block ? `block: { number: ${block}}` : ``} \r\n       where: { id: \"${FACTORY_ADDRESS}\" }) {\r\n        id\r\n        totalVolumeUSD\r\n        totalVolumeETH\r\n        untrackedVolumeUSD\r\n        totalLiquidityUSD\r\n        totalLiquidityETH\r\n        txCount\r\n        pairCount\r\n      }\r\n    }`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const GLOBAL_TXNS = gql`\r\n  query transactions {\r\n    transactions(first: 100, orderBy: timestamp, orderDirection: desc) {\r\n      mints(orderBy: timestamp, orderDirection: desc) {\r\n        transaction {\r\n          id\r\n          timestamp\r\n        }\r\n        pair {\r\n          token0 {\r\n            id\r\n            symbol\r\n          }\r\n          token1 {\r\n            id\r\n            symbol\r\n          }\r\n        }\r\n        to\r\n        liquidity\r\n        amount0\r\n        amount1\r\n        amountUSD\r\n      }\r\n      burns(orderBy: timestamp, orderDirection: desc) {\r\n        transaction {\r\n          id\r\n          timestamp\r\n        }\r\n        pair {\r\n          token0 {\r\n            id\r\n            symbol\r\n          }\r\n          token1 {\r\n            id\r\n            symbol\r\n          }\r\n        }\r\n        sender\r\n        liquidity\r\n        amount0\r\n        amount1\r\n        amountUSD\r\n      }\r\n      swaps(orderBy: timestamp, orderDirection: desc) {\r\n        transaction {\r\n          id\r\n          timestamp\r\n        }\r\n        pair {\r\n          token0 {\r\n            id\r\n            symbol\r\n          }\r\n          token1 {\r\n            id\r\n            symbol\r\n          }\r\n        }\r\n        amount0In\r\n        amount0Out\r\n        amount1In\r\n        amount1Out\r\n        amountUSD\r\n        to\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const ALL_TOKENS = gql`\r\n  query tokens($skip: Int!) {\r\n    tokens(first: 100, skip: $skip) {\r\n      id\r\n      name\r\n      symbol\r\n      totalLiquidity\r\n    }\r\n  }\r\n`\r\n\r\nexport const TOKEN_SEARCH = gql`\r\n  query tokens($value: String, $id: String) {\r\n    asSymbol: tokens(where: { symbol: $value }, orderBy: totalLiquidity, orderDirection: desc) {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n    }\r\n    asName: tokens(where: { name: $value }, orderBy: totalLiquidity, orderDirection: desc) {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n    }\r\n    asAddress: tokens(where: { id: $id }, orderBy: totalLiquidity, orderDirection: desc) {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_SEARCH = gql`\r\n  query pairs($tokens: [Bytes]!, $id: String) {\r\n    as0: pairs(where: { token0_in: $tokens }) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n    as1: pairs(where: { token1_in: $tokens }) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n    asAddress: pairs(where: { id: $id }) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const ALL_PAIRS = (block) => {\r\n  return gql(`\r\n  query pairs($skip: Int!) {\r\n    pairs(first: 100, skip: $skip, orderBy: trackedReserveETH, orderDirection: desc, where: { createdAtBlockNumber_gte: 5753123 }) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n  }\r\n`)\r\n}\r\n\r\nconst PairFields = `\r\n  fragment PairFields on Pair {\r\n    id\r\n    txCount\r\n    token0 {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n      derivedETH\r\n    }\r\n    token1 {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n      derivedETH\r\n    }\r\n    reserve0\r\n    reserve1\r\n    reserveUSD\r\n    totalSupply\r\n    trackedReserveETH\r\n    reserveETH\r\n    volumeUSD\r\n    untrackedVolumeUSD\r\n    token0Price\r\n    token1Price\r\n    createdAtTimestamp\r\n  }\r\n`\r\n\r\nexport const PAIRS_CURRENT = gql`\r\n  query pairs {\r\n    pairs(first: 100, where: { createdAtBlockNumber_gte : 5753123 },  orderBy: trackedReserveETH, orderDirection: desc) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_DATA = (pairAddress, block) => {\r\n  const queryString = `\r\n    ${PairFields}\r\n    query pairs {\r\n      pairs(${block ? `block: {number: ${block}}` : ``} where: { id: \"${pairAddress}\"} ) {\r\n        ...PairFields\r\n      }\r\n    }`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const PAIRS_BULK = gql`\r\n  ${PairFields}\r\n  query pairs($allPairs: [Bytes]!) {\r\n    pairs(where: { id_in: $allPairs }, orderBy: trackedReserveETH, orderDirection: desc) {\r\n      ...PairFields\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIRS_HISTORICAL_BULK = (block, pairs) => {\r\n  let pairsString = `[`\r\n  pairs.map((pair) => {\r\n    return (pairsString += `\"${pair}\"`)\r\n  })\r\n  pairsString += ']'\r\n  let queryString = `\r\n  query pairs {\r\n    pairs(first: 200, where: {id_in: ${pairsString}}, block: {number: ${block}}, orderBy: trackedReserveETH, orderDirection: desc) {\r\n      id\r\n      reserveUSD\r\n      trackedReserveETH\r\n      volumeUSD\r\n      untrackedVolumeUSD\r\n    }\r\n  }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const TOKEN_CHART = gql`\r\n  query tokenDayDatas($tokenAddr: String!, $skip: Int!) {\r\n    tokenDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { token: $tokenAddr }) {\r\n      id\r\n      date\r\n      priceUSD\r\n      totalLiquidityToken\r\n      totalLiquidityUSD\r\n      totalLiquidityETH\r\n      dailyVolumeETH\r\n      dailyVolumeToken\r\n      dailyVolumeUSD\r\n    }\r\n  }\r\n`\r\n\r\nconst TokenFields = `\r\n  fragment TokenFields on Token {\r\n    id\r\n    name\r\n    symbol\r\n    derivedETH\r\n    tradeVolume\r\n    tradeVolumeUSD\r\n    untrackedVolumeUSD\r\n    totalLiquidity\r\n    txCount\r\n  }\r\n`\r\n\r\nexport const TOKENS_CURRENT = gql`\r\n  ${TokenFields}\r\n  query tokens {\r\n    tokens(first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      ...TokenFields\r\n    }\r\n  }\r\n`\r\n\r\nexport const TOKENS_DYNAMIC = (block) => {\r\n  const queryString = `\r\n    ${TokenFields}\r\n    query tokens {\r\n      tokens(block: {number: ${block}} first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n        ...TokenFields\r\n      }\r\n    }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const TOKEN_DATA = (tokenAddress, block) => {\r\n  const queryString = `\r\n    ${TokenFields}\r\n    query tokens {\r\n      tokens(${block ? `block : {number: ${block}}` : ``} where: {id:\"${tokenAddress}\"}) {\r\n        ...TokenFields\r\n      }\r\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\r\n        id\r\n      }\r\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\r\n        id\r\n      }\r\n    }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const FILTERED_TRANSACTIONS = gql`\r\n  query($allPairs: [Bytes]!) {\r\n    mints(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    burns(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps(first: 30, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      id\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      amount0In\r\n      amount0Out\r\n      amount1In\r\n      amount1Out\r\n      amountUSD\r\n      to\r\n    }\r\n  }\r\n`\r\n"]},"metadata":{},"sourceType":"module"}