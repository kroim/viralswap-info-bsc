{"ast":null,"code":"import { useState, useCallback, useEffect, useRef } from 'react';\nimport { shade } from 'polished';\nimport Vibrant from 'node-vibrant';\nimport { hex } from 'wcag-contrast';\nimport { isAddress } from '../utils';\nimport copy from 'copy-to-clipboard';\nexport function useColor(tokenAddress, token) {\n  const [color, setColor] = useState('#2172E5');\n\n  if (tokenAddress) {\n    const path = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/assets/${isAddress(tokenAddress)}/logo.png`;\n\n    if (path) {\n      Vibrant.from(path).getPalette((err, palette) => {\n        if (palette && palette.Vibrant) {\n          let detectedHex = palette.Vibrant.hex;\n          let AAscore = hex(detectedHex, '#FFF');\n\n          while (AAscore < 3) {\n            detectedHex = shade(0.005, detectedHex);\n            AAscore = hex(detectedHex, '#FFF');\n          }\n\n          if (token === 'DAI') {\n            setColor('#FAAB14');\n          } else {\n            setColor(detectedHex);\n          }\n        }\n      });\n    }\n  }\n\n  return color;\n}\nexport function useCopyClipboard(timeout = 500) {\n  const [isCopied, setIsCopied] = useState(false);\n  const staticCopy = useCallback(text => {\n    const didCopy = copy(text);\n    setIsCopied(didCopy);\n  }, []);\n  useEffect(() => {\n    if (isCopied) {\n      const hide = setTimeout(() => {\n        setIsCopied(false);\n      }, timeout);\n      return () => {\n        clearTimeout(hide);\n      };\n    }\n  }, [isCopied, setIsCopied, timeout]);\n  return [isCopied, staticCopy];\n}\nexport const useOutsideClick = (ref, ref2, callback) => {\n  const handleClick = e => {\n    if (ref.current && ref.current && !ref2.current) {\n      callback(true);\n    } else if (ref.current && !ref.current.contains(e.target) && ref2.current && !ref2.current.contains(e.target)) {\n      callback(true);\n    } else {\n      callback(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      const current = savedCallback.current;\n      current && current();\n    }\n\n    if (delay !== null) {\n      tick();\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n\n    return;\n  }, [delay]);\n}","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/pancake-info-v1/src/hooks/index.ts"],"names":["useState","useCallback","useEffect","useRef","shade","Vibrant","hex","isAddress","copy","useColor","tokenAddress","token","color","setColor","path","from","getPalette","err","palette","detectedHex","AAscore","useCopyClipboard","timeout","isCopied","setIsCopied","staticCopy","text","didCopy","hide","setTimeout","clearTimeout","useOutsideClick","ref","ref2","callback","handleClick","e","current","contains","target","document","addEventListener","removeEventListener","useInterval","delay","savedCallback","tick","id","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react'\r\nimport { shade } from 'polished'\r\nimport Vibrant from 'node-vibrant'\r\nimport { hex } from 'wcag-contrast'\r\nimport { isAddress } from '../utils'\r\nimport copy from 'copy-to-clipboard'\r\n\r\nexport function useColor(tokenAddress, token) {\r\n  const [color, setColor] = useState('#2172E5')\r\n  if (tokenAddress) {\r\n    const path = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/assets/${isAddress(\r\n      tokenAddress\r\n    )}/logo.png`\r\n    if (path) {\r\n      Vibrant.from(path).getPalette((err, palette) => {\r\n        if (palette && palette.Vibrant) {\r\n          let detectedHex = palette.Vibrant.hex\r\n          let AAscore = hex(detectedHex, '#FFF')\r\n          while (AAscore < 3) {\r\n            detectedHex = shade(0.005, detectedHex)\r\n            AAscore = hex(detectedHex, '#FFF')\r\n          }\r\n          if (token === 'DAI') {\r\n            setColor('#FAAB14')\r\n          } else {\r\n            setColor(detectedHex)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  return color\r\n}\r\n\r\nexport function useCopyClipboard(timeout = 500) {\r\n  const [isCopied, setIsCopied] = useState(false)\r\n\r\n  const staticCopy = useCallback((text) => {\r\n    const didCopy = copy(text)\r\n    setIsCopied(didCopy)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (isCopied) {\r\n      const hide = setTimeout(() => {\r\n        setIsCopied(false)\r\n      }, timeout)\r\n\r\n      return () => {\r\n        clearTimeout(hide)\r\n      }\r\n    }\r\n  }, [isCopied, setIsCopied, timeout])\r\n\r\n  return [isCopied, staticCopy]\r\n}\r\n\r\nexport const useOutsideClick = (ref, ref2, callback) => {\r\n  const handleClick = (e) => {\r\n    if (ref.current && ref.current && !ref2.current) {\r\n      callback(true)\r\n    } else if (ref.current && !ref.current.contains(e.target) && ref2.current && !ref2.current.contains(e.target)) {\r\n      callback(true)\r\n    } else {\r\n      callback(false)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    document.addEventListener('click', handleClick)\r\n    return () => {\r\n      document.removeEventListener('click', handleClick)\r\n    }\r\n  })\r\n}\r\n\r\nexport default function useInterval(callback: () => void, delay: null | number) {\r\n  const savedCallback = useRef<() => void>()\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      const current = savedCallback.current\r\n      current && current()\r\n    }\r\n\r\n    if (delay !== null) {\r\n      tick()\r\n      const id = setInterval(tick, delay)\r\n      return () => clearInterval(id)\r\n    }\r\n    return\r\n  }, [delay])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}