{"ast":null,"code":"var _jsxFileName = \"B:\\\\2021\\\\1219_ViralCoin\\\\work\\\\NewSubgraph\\\\pancake-info-v1\\\\src\\\\contexts\\\\Application.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useState, useEffect } from 'react';\nimport { timeframeOptions, SUPPORTED_LIST_URLS__NO_ENS } from '../constants';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport getTokenList from '../utils/tokenLists'; // import { healthClient } from '../apollo/client'\n\nimport { SUBGRAPH_HEALTH } from '../apollo/queries';\ndayjs.extend(utc);\nconst UPDATE = 'UPDATE';\nconst UPDATE_TIMEFRAME = 'UPDATE_TIMEFRAME';\nconst UPDATE_SESSION_START = 'UPDATE_SESSION_START';\nconst UPDATED_SUPPORTED_TOKENS = 'UPDATED_SUPPORTED_TOKENS';\nconst UPDATE_LATEST_BLOCK = 'UPDATE_LATEST_BLOCK';\nconst UPDATE_HEAD_BLOCK = 'UPDATE_HEAD_BLOCK';\nconst SUPPORTED_TOKENS = 'SUPPORTED_TOKENS';\nconst TIME_KEY = 'TIME_KEY';\nconst CURRENCY = 'CURRENCY';\nconst SESSION_START = 'SESSION_START';\nconst LATEST_BLOCK = 'LATEST_BLOCK';\nconst HEAD_BLOCK = 'HEAD_BLOCK';\nconst ApplicationContext = createContext();\n\nfunction useApplicationContext() {\n  return useContext(ApplicationContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE:\n      {\n        const {\n          currency\n        } = payload;\n        return { ...state,\n          [CURRENCY]: currency\n        };\n      }\n\n    case UPDATE_TIMEFRAME:\n      {\n        const {\n          newTimeFrame\n        } = payload;\n        return { ...state,\n          [TIME_KEY]: newTimeFrame\n        };\n      }\n\n    case UPDATE_SESSION_START:\n      {\n        const {\n          timestamp\n        } = payload;\n        return { ...state,\n          [SESSION_START]: timestamp\n        };\n      }\n\n    case UPDATE_LATEST_BLOCK:\n      {\n        const {\n          block\n        } = payload;\n        return { ...state,\n          [LATEST_BLOCK]: block\n        };\n      }\n\n    case UPDATE_HEAD_BLOCK:\n      {\n        const {\n          block\n        } = payload;\n        return { ...state,\n          [HEAD_BLOCK]: block\n        };\n      }\n\n    case UPDATED_SUPPORTED_TOKENS:\n      {\n        const {\n          supportedTokens\n        } = payload;\n        return { ...state,\n          [SUPPORTED_TOKENS]: supportedTokens\n        };\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in DataContext reducer: '${type}'.`);\n      }\n  }\n}\n\nconst INITIAL_STATE = {\n  CURRENCY: 'USD',\n  TIME_KEY: timeframeOptions.ALL_TIME\n};\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n  const update = useCallback(currency => {\n    dispatch({\n      type: UPDATE,\n      payload: {\n        currency\n      }\n    });\n  }, []); // global time window for charts - see timeframe options in constants\n\n  const updateTimeframe = useCallback(newTimeFrame => {\n    dispatch({\n      type: UPDATE_TIMEFRAME,\n      payload: {\n        newTimeFrame\n      }\n    });\n  }, []); // used for refresh button\n\n  const updateSessionStart = useCallback(timestamp => {\n    dispatch({\n      type: UPDATE_SESSION_START,\n      payload: {\n        timestamp\n      }\n    });\n  }, []);\n  const updateSupportedTokens = useCallback(supportedTokens => {\n    dispatch({\n      type: UPDATED_SUPPORTED_TOKENS,\n      payload: {\n        supportedTokens\n      }\n    });\n  }, []);\n  const updateLatestBlock = useCallback(block => {\n    dispatch({\n      type: UPDATE_LATEST_BLOCK,\n      payload: {\n        block\n      }\n    });\n  }, []);\n  const updateHeadBlock = useCallback(block => {\n    dispatch({\n      type: UPDATE_HEAD_BLOCK,\n      payload: {\n        block\n      }\n    });\n  }, []);\n  return React.createElement(ApplicationContext.Provider, {\n    value: useMemo(() => [state, {\n      update,\n      updateSessionStart,\n      updateTimeframe,\n      updateSupportedTokens,\n      updateLatestBlock,\n      updateHeadBlock\n    }], [state, update, updateTimeframe, updateSessionStart, updateSupportedTokens, updateLatestBlock, updateHeadBlock]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, children);\n}\nexport function useLatestBlocks() {\n  const [state, {\n    updateLatestBlock,\n    updateHeadBlock\n  }] = useApplicationContext();\n  const latestBlock = state === null || state === void 0 ? void 0 : state[LATEST_BLOCK];\n  const headBlock = state === null || state === void 0 ? void 0 : state[HEAD_BLOCK];\n  useEffect(() => {\n    // async function fetch() {\n    //   healthClient\n    //     .query({\n    //       query: SUBGRAPH_HEALTH,\n    //     })\n    //     .then((res) => {\n    //       const syncedBlock = res.data.indexingStatusForCurrentVersion.chains[0].latestBlock.number\n    //       const headBlock = res.data.indexingStatusForCurrentVersion.chains[0].chainHeadBlock.number\n    //       if (syncedBlock && headBlock) {\n    //         updateLatestBlock(syncedBlock)\n    //         updateHeadBlock(headBlock)\n    //       }\n    //     })\n    //     .catch((e) => {\n    //       console.log(e)\n    //     })\n    // }\n    if (!latestBlock) {// fetch()\n    }\n  }, [latestBlock, updateHeadBlock, updateLatestBlock]);\n  return [latestBlock, headBlock];\n}\nexport function useCurrentCurrency() {\n  const [state, {\n    update\n  }] = useApplicationContext();\n  const toggleCurrency = useCallback(() => {\n    if (state.currency === 'ETH') {\n      update('USD');\n    } else {\n      update('ETH');\n    }\n  }, [state, update]);\n  return [state[CURRENCY], toggleCurrency];\n}\nexport function useTimeframe() {\n  const [state, {\n    updateTimeframe\n  }] = useApplicationContext();\n  const activeTimeframe = state === null || state === void 0 ? void 0 : state[TIME_KEY];\n  return [activeTimeframe, updateTimeframe];\n}\nexport function useStartTimestamp() {\n  const [activeWindow] = useTimeframe();\n  const [startDateTimestamp, setStartDateTimestamp] = useState(); // monitor the old date fetched\n\n  useEffect(() => {\n    let startTime = dayjs.utc().subtract(1, activeWindow === timeframeOptions.week ? 'week' : activeWindow === timeframeOptions.ALL_TIME ? 'year' : 'year').startOf('day').unix() - 1; // if we find a new start time less than the current startrtime - update oldest pooint to fetch\n\n    setStartDateTimestamp(startTime);\n  }, [activeWindow, startDateTimestamp]);\n  return startDateTimestamp;\n} // keep track of session length for refresh ticker\n\nexport function useSessionStart() {\n  const [state, {\n    updateSessionStart\n  }] = useApplicationContext();\n  const sessionStart = state === null || state === void 0 ? void 0 : state[SESSION_START];\n  useEffect(() => {\n    if (!sessionStart) {\n      updateSessionStart(Date.now());\n    }\n  });\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      var _ref;\n\n      setSeconds((_ref = Date.now() - sessionStart) !== null && _ref !== void 0 ? _ref : Date.now());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [seconds, sessionStart]);\n  return parseInt(seconds / 1000);\n}\nexport function useListedTokens() {\n  const [state, {\n    updateSupportedTokens\n  }] = useApplicationContext();\n  const supportedTokens = state === null || state === void 0 ? void 0 : state[SUPPORTED_TOKENS];\n  useEffect(() => {\n    async function fetchList() {\n      const allFetched = await SUPPORTED_LIST_URLS__NO_ENS.reduce(async (fetchedTokens, url) => {\n        const newTokens = await getTokenList(url);\n        return Promise.resolve([...newTokens.tokens]);\n      }, Promise.resolve([]));\n      let formatted = allFetched === null || allFetched === void 0 ? void 0 : allFetched.map(t => t.address.toLowerCase());\n      updateSupportedTokens(formatted);\n    }\n\n    if (!supportedTokens) {\n      fetchList();\n    }\n  }, [updateSupportedTokens, supportedTokens]);\n  return supportedTokens;\n}","map":{"version":3,"sources":["B:/2021/1219_ViralCoin/work/NewSubgraph/pancake-info-v1/src/contexts/Application.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useState","useEffect","timeframeOptions","SUPPORTED_LIST_URLS__NO_ENS","dayjs","utc","getTokenList","SUBGRAPH_HEALTH","extend","UPDATE","UPDATE_TIMEFRAME","UPDATE_SESSION_START","UPDATED_SUPPORTED_TOKENS","UPDATE_LATEST_BLOCK","UPDATE_HEAD_BLOCK","SUPPORTED_TOKENS","TIME_KEY","CURRENCY","SESSION_START","LATEST_BLOCK","HEAD_BLOCK","ApplicationContext","useApplicationContext","reducer","state","type","payload","currency","newTimeFrame","timestamp","block","supportedTokens","Error","INITIAL_STATE","ALL_TIME","Provider","children","dispatch","update","updateTimeframe","updateSessionStart","updateSupportedTokens","updateLatestBlock","updateHeadBlock","useLatestBlocks","latestBlock","headBlock","useCurrentCurrency","toggleCurrency","useTimeframe","activeTimeframe","useStartTimestamp","activeWindow","startDateTimestamp","setStartDateTimestamp","startTime","subtract","week","startOf","unix","useSessionStart","sessionStart","Date","now","seconds","setSeconds","interval","setInterval","clearInterval","parseInt","useListedTokens","fetchList","allFetched","reduce","fetchedTokens","url","newTokens","Promise","resolve","tokens","formatted","map","t","address","toLowerCase"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,OAAvD,EAAgEC,WAAhE,EAA6EC,QAA7E,EAAuFC,SAAvF,QAAwG,OAAxG;AACA,SAASC,gBAAT,EAA2BC,2BAA3B,QAA8D,cAA9D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,YAAP,MAAyB,qBAAzB,C,CACA;;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACAH,KAAK,CAACI,MAAN,CAAaH,GAAb;AAEA,MAAMI,MAAM,GAAG,QAAf;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,wBAAwB,GAAG,0BAAjC;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEA,MAAMC,kBAAkB,GAAG1B,aAAa,EAAxC;;AAEA,SAAS2B,qBAAT,GAAiC;AAC/B,SAAO1B,UAAU,CAACyB,kBAAD,CAAjB;AACD;;AAED,SAASE,OAAT,CAAiBC,KAAjB,EAAwB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAxB,EAA2C;AACzC,UAAQD,IAAR;AACE,SAAKhB,MAAL;AAAa;AACX,cAAM;AAAEkB,UAAAA;AAAF,YAAeD,OAArB;AACA,eAAO,EACL,GAAGF,KADE;AAEL,WAACP,QAAD,GAAYU;AAFP,SAAP;AAID;;AACD,SAAKjB,gBAAL;AAAuB;AACrB,cAAM;AAAEkB,UAAAA;AAAF,YAAmBF,OAAzB;AACA,eAAO,EACL,GAAGF,KADE;AAEL,WAACR,QAAD,GAAYY;AAFP,SAAP;AAID;;AACD,SAAKjB,oBAAL;AAA2B;AACzB,cAAM;AAAEkB,UAAAA;AAAF,YAAgBH,OAAtB;AACA,eAAO,EACL,GAAGF,KADE;AAEL,WAACN,aAAD,GAAiBW;AAFZ,SAAP;AAID;;AAED,SAAKhB,mBAAL;AAA0B;AACxB,cAAM;AAAEiB,UAAAA;AAAF,YAAYJ,OAAlB;AACA,eAAO,EACL,GAAGF,KADE;AAEL,WAACL,YAAD,GAAgBW;AAFX,SAAP;AAID;;AAED,SAAKhB,iBAAL;AAAwB;AACtB,cAAM;AAAEgB,UAAAA;AAAF,YAAYJ,OAAlB;AACA,eAAO,EACL,GAAGF,KADE;AAEL,WAACJ,UAAD,GAAcU;AAFT,SAAP;AAID;;AAED,SAAKlB,wBAAL;AAA+B;AAC7B,cAAM;AAAEmB,UAAAA;AAAF,YAAsBL,OAA5B;AACA,eAAO,EACL,GAAGF,KADE;AAEL,WAACT,gBAAD,GAAoBgB;AAFf,SAAP;AAID;;AAED;AAAS;AACP,cAAMC,KAAK,CAAE,mDAAkDP,IAAK,IAAzD,CAAX;AACD;AAjDH;AAmDD;;AAED,MAAMQ,aAAa,GAAG;AACpBhB,EAAAA,QAAQ,EAAE,KADU;AAEpBD,EAAAA,QAAQ,EAAEd,gBAAgB,CAACgC;AAFP,CAAtB;AAKA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC7C,QAAM,CAACZ,KAAD,EAAQa,QAAR,IAAoBxC,UAAU,CAAC0B,OAAD,EAAUU,aAAV,CAApC;AACA,QAAMK,MAAM,GAAGvC,WAAW,CAAE4B,QAAD,IAAc;AACvCU,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEhB,MADC;AAEPiB,MAAAA,OAAO,EAAE;AACPC,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPyB,EAOvB,EAPuB,CAA1B,CAF6C,CAW7C;;AACA,QAAMY,eAAe,GAAGxC,WAAW,CAAE6B,YAAD,IAAkB;AACpDS,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEf,gBADC;AAEPgB,MAAAA,OAAO,EAAE;AACPE,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPkC,EAOhC,EAPgC,CAAnC,CAZ6C,CAqB7C;;AACA,QAAMY,kBAAkB,GAAGzC,WAAW,CAAE8B,SAAD,IAAe;AACpDQ,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEd,oBADC;AAEPe,MAAAA,OAAO,EAAE;AACPG,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPqC,EAOnC,EAPmC,CAAtC;AASA,QAAMY,qBAAqB,GAAG1C,WAAW,CAAEgC,eAAD,IAAqB;AAC7DM,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEb,wBADC;AAEPc,MAAAA,OAAO,EAAE;AACPK,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPwC,EAOtC,EAPsC,CAAzC;AASA,QAAMW,iBAAiB,GAAG3C,WAAW,CAAE+B,KAAD,IAAW;AAC/CO,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEZ,mBADC;AAEPa,MAAAA,OAAO,EAAE;AACPI,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPoC,EAOlC,EAPkC,CAArC;AASA,QAAMa,eAAe,GAAG5C,WAAW,CAAE+B,KAAD,IAAW;AAC7CO,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEX,iBADC;AAEPY,MAAAA,OAAO,EAAE;AACPI,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPkC,EAOhC,EAPgC,CAAnC;AASA,SACE,oBAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAEhC,OAAO,CACZ,MAAM,CACJ0B,KADI,EAEJ;AACEc,MAAAA,MADF;AAEEE,MAAAA,kBAFF;AAGED,MAAAA,eAHF;AAIEE,MAAAA,qBAJF;AAKEC,MAAAA,iBALF;AAMEC,MAAAA;AANF,KAFI,CADM,EAYZ,CAACnB,KAAD,EAAQc,MAAR,EAAgBC,eAAhB,EAAiCC,kBAAjC,EAAqDC,qBAArD,EAA4EC,iBAA5E,EAA+FC,eAA/F,CAZY,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGP,QAhBH,CADF;AAoBD;AAED,OAAO,SAASQ,eAAT,GAA2B;AAChC,QAAM,CAACpB,KAAD,EAAQ;AAAEkB,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,GAAR,IAAkDrB,qBAAqB,EAA7E;AAEA,QAAMuB,WAAW,GAAGrB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAGL,YAAH,CAAzB;AACA,QAAM2B,SAAS,GAAGtB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAGJ,UAAH,CAAvB;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,CAAC4C,WAAL,EAAkB,CAChB;AACD;AACF,GArBQ,EAqBN,CAACA,WAAD,EAAcF,eAAd,EAA+BD,iBAA/B,CArBM,CAAT;AAuBA,SAAO,CAACG,WAAD,EAAcC,SAAd,CAAP;AACD;AAED,OAAO,SAASC,kBAAT,GAA8B;AACnC,QAAM,CAACvB,KAAD,EAAQ;AAAEc,IAAAA;AAAF,GAAR,IAAsBhB,qBAAqB,EAAjD;AACA,QAAM0B,cAAc,GAAGjD,WAAW,CAAC,MAAM;AACvC,QAAIyB,KAAK,CAACG,QAAN,KAAmB,KAAvB,EAA8B;AAC5BW,MAAAA,MAAM,CAAC,KAAD,CAAN;AACD,KAFD,MAEO;AACLA,MAAAA,MAAM,CAAC,KAAD,CAAN;AACD;AACF,GANiC,EAM/B,CAACd,KAAD,EAAQc,MAAR,CAN+B,CAAlC;AAOA,SAAO,CAACd,KAAK,CAACP,QAAD,CAAN,EAAkB+B,cAAlB,CAAP;AACD;AAED,OAAO,SAASC,YAAT,GAAwB;AAC7B,QAAM,CAACzB,KAAD,EAAQ;AAAEe,IAAAA;AAAF,GAAR,IAA+BjB,qBAAqB,EAA1D;AACA,QAAM4B,eAAe,GAAG1B,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAGR,QAAH,CAA7B;AACA,SAAO,CAACkC,eAAD,EAAkBX,eAAlB,CAAP;AACD;AAED,OAAO,SAASY,iBAAT,GAA6B;AAClC,QAAM,CAACC,YAAD,IAAiBH,YAAY,EAAnC;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CtD,QAAQ,EAA5D,CAFkC,CAIlC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsD,SAAS,GACXnD,KAAK,CACFC,GADH,GAEGmD,QAFH,CAGI,CAHJ,EAIIJ,YAAY,KAAKlD,gBAAgB,CAACuD,IAAlC,GAAyC,MAAzC,GAAkDL,YAAY,KAAKlD,gBAAgB,CAACgC,QAAlC,GAA6C,MAA7C,GAAsD,MAJ5G,EAMGwB,OANH,CAMW,KANX,EAOGC,IAPH,KAOY,CARd,CADc,CAUd;;AACAL,IAAAA,qBAAqB,CAACC,SAAD,CAArB;AACD,GAZQ,EAYN,CAACH,YAAD,EAAeC,kBAAf,CAZM,CAAT;AAcA,SAAOA,kBAAP;AACD,C,CAED;;AACA,OAAO,SAASO,eAAT,GAA2B;AAChC,QAAM,CAACpC,KAAD,EAAQ;AAAEgB,IAAAA;AAAF,GAAR,IAAkClB,qBAAqB,EAA7D;AACA,QAAMuC,YAAY,GAAGrC,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAGN,aAAH,CAA1B;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC4D,YAAL,EAAmB;AACjBrB,MAAAA,kBAAkB,CAACsB,IAAI,CAACC,GAAL,EAAD,CAAlB;AACD;AACF,GAJQ,CAAT;AAMA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjE,QAAQ,CAAC,CAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiE,QAAQ,GAAG,IAAf;AACAA,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAAA;;AAC3BF,MAAAA,UAAU,SAACH,IAAI,CAACC,GAAL,KAAaF,YAAd,uCAA8BC,IAAI,CAACC,GAAL,EAA9B,CAAV;AACD,KAFqB,EAEnB,IAFmB,CAAtB;AAIA,WAAO,MAAMK,aAAa,CAACF,QAAD,CAA1B;AACD,GAPQ,EAON,CAACF,OAAD,EAAUH,YAAV,CAPM,CAAT;AASA,SAAOQ,QAAQ,CAACL,OAAO,GAAG,IAAX,CAAf;AACD;AAED,OAAO,SAASM,eAAT,GAA2B;AAChC,QAAM,CAAC9C,KAAD,EAAQ;AAAEiB,IAAAA;AAAF,GAAR,IAAqCnB,qBAAqB,EAAhE;AACA,QAAMS,eAAe,GAAGP,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAGT,gBAAH,CAA7B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAesE,SAAf,GAA2B;AACzB,YAAMC,UAAU,GAAG,MAAMrE,2BAA2B,CAACsE,MAA5B,CAAmC,OAAOC,aAAP,EAAsBC,GAAtB,KAA8B;AACxF,cAAMC,SAAS,GAAG,MAAMtE,YAAY,CAACqE,GAAD,CAApC;AACA,eAAOE,OAAO,CAACC,OAAR,CAAgB,CAAC,GAAGF,SAAS,CAACG,MAAd,CAAhB,CAAP;AACD,OAHwB,EAGtBF,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAHsB,CAAzB;AAIA,UAAIE,SAAS,GAAGR,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAES,GAAZ,CAAiBC,CAAD,IAAOA,CAAC,CAACC,OAAF,CAAUC,WAAV,EAAvB,CAAhB;AAEA3C,MAAAA,qBAAqB,CAACuC,SAAD,CAArB;AACD;;AACD,QAAI,CAACjD,eAAL,EAAsB;AACpBwC,MAAAA,SAAS;AACV;AACF,GAbQ,EAaN,CAAC9B,qBAAD,EAAwBV,eAAxB,CAbM,CAAT;AAeA,SAAOA,eAAP;AACD","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useState, useEffect } from 'react'\r\nimport { timeframeOptions, SUPPORTED_LIST_URLS__NO_ENS } from '../constants'\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\nimport getTokenList from '../utils/tokenLists'\r\n// import { healthClient } from '../apollo/client'\r\nimport { SUBGRAPH_HEALTH } from '../apollo/queries'\r\ndayjs.extend(utc)\r\n\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_TIMEFRAME = 'UPDATE_TIMEFRAME'\r\nconst UPDATE_SESSION_START = 'UPDATE_SESSION_START'\r\nconst UPDATED_SUPPORTED_TOKENS = 'UPDATED_SUPPORTED_TOKENS'\r\nconst UPDATE_LATEST_BLOCK = 'UPDATE_LATEST_BLOCK'\r\nconst UPDATE_HEAD_BLOCK = 'UPDATE_HEAD_BLOCK'\r\n\r\nconst SUPPORTED_TOKENS = 'SUPPORTED_TOKENS'\r\nconst TIME_KEY = 'TIME_KEY'\r\nconst CURRENCY = 'CURRENCY'\r\nconst SESSION_START = 'SESSION_START'\r\nconst LATEST_BLOCK = 'LATEST_BLOCK'\r\nconst HEAD_BLOCK = 'HEAD_BLOCK'\r\n\r\nconst ApplicationContext = createContext()\r\n\r\nfunction useApplicationContext() {\r\n  return useContext(ApplicationContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { currency } = payload\r\n      return {\r\n        ...state,\r\n        [CURRENCY]: currency,\r\n      }\r\n    }\r\n    case UPDATE_TIMEFRAME: {\r\n      const { newTimeFrame } = payload\r\n      return {\r\n        ...state,\r\n        [TIME_KEY]: newTimeFrame,\r\n      }\r\n    }\r\n    case UPDATE_SESSION_START: {\r\n      const { timestamp } = payload\r\n      return {\r\n        ...state,\r\n        [SESSION_START]: timestamp,\r\n      }\r\n    }\r\n\r\n    case UPDATE_LATEST_BLOCK: {\r\n      const { block } = payload\r\n      return {\r\n        ...state,\r\n        [LATEST_BLOCK]: block,\r\n      }\r\n    }\r\n\r\n    case UPDATE_HEAD_BLOCK: {\r\n      const { block } = payload\r\n      return {\r\n        ...state,\r\n        [HEAD_BLOCK]: block,\r\n      }\r\n    }\r\n\r\n    case UPDATED_SUPPORTED_TOKENS: {\r\n      const { supportedTokens } = payload\r\n      return {\r\n        ...state,\r\n        [SUPPORTED_TOKENS]: supportedTokens,\r\n      }\r\n    }\r\n\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nconst INITIAL_STATE = {\r\n  CURRENCY: 'USD',\r\n  TIME_KEY: timeframeOptions.ALL_TIME,\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE)\r\n  const update = useCallback((currency) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        currency,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  // global time window for charts - see timeframe options in constants\r\n  const updateTimeframe = useCallback((newTimeFrame) => {\r\n    dispatch({\r\n      type: UPDATE_TIMEFRAME,\r\n      payload: {\r\n        newTimeFrame,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  // used for refresh button\r\n  const updateSessionStart = useCallback((timestamp) => {\r\n    dispatch({\r\n      type: UPDATE_SESSION_START,\r\n      payload: {\r\n        timestamp,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateSupportedTokens = useCallback((supportedTokens) => {\r\n    dispatch({\r\n      type: UPDATED_SUPPORTED_TOKENS,\r\n      payload: {\r\n        supportedTokens,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateLatestBlock = useCallback((block) => {\r\n    dispatch({\r\n      type: UPDATE_LATEST_BLOCK,\r\n      payload: {\r\n        block,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateHeadBlock = useCallback((block) => {\r\n    dispatch({\r\n      type: UPDATE_HEAD_BLOCK,\r\n      payload: {\r\n        block,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <ApplicationContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updateSessionStart,\r\n            updateTimeframe,\r\n            updateSupportedTokens,\r\n            updateLatestBlock,\r\n            updateHeadBlock,\r\n          },\r\n        ],\r\n        [state, update, updateTimeframe, updateSessionStart, updateSupportedTokens, updateLatestBlock, updateHeadBlock]\r\n      )}\r\n    >\r\n      {children}\r\n    </ApplicationContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useLatestBlocks() {\r\n  const [state, { updateLatestBlock, updateHeadBlock }] = useApplicationContext()\r\n\r\n  const latestBlock = state?.[LATEST_BLOCK]\r\n  const headBlock = state?.[HEAD_BLOCK]\r\n\r\n  useEffect(() => {\r\n    // async function fetch() {\r\n    //   healthClient\r\n    //     .query({\r\n    //       query: SUBGRAPH_HEALTH,\r\n    //     })\r\n    //     .then((res) => {\r\n    //       const syncedBlock = res.data.indexingStatusForCurrentVersion.chains[0].latestBlock.number\r\n    //       const headBlock = res.data.indexingStatusForCurrentVersion.chains[0].chainHeadBlock.number\r\n    //       if (syncedBlock && headBlock) {\r\n    //         updateLatestBlock(syncedBlock)\r\n    //         updateHeadBlock(headBlock)\r\n    //       }\r\n    //     })\r\n    //     .catch((e) => {\r\n    //       console.log(e)\r\n    //     })\r\n    // }\r\n    if (!latestBlock) {\r\n      // fetch()\r\n    }\r\n  }, [latestBlock, updateHeadBlock, updateLatestBlock])\r\n\r\n  return [latestBlock, headBlock]\r\n}\r\n\r\nexport function useCurrentCurrency() {\r\n  const [state, { update }] = useApplicationContext()\r\n  const toggleCurrency = useCallback(() => {\r\n    if (state.currency === 'ETH') {\r\n      update('USD')\r\n    } else {\r\n      update('ETH')\r\n    }\r\n  }, [state, update])\r\n  return [state[CURRENCY], toggleCurrency]\r\n}\r\n\r\nexport function useTimeframe() {\r\n  const [state, { updateTimeframe }] = useApplicationContext()\r\n  const activeTimeframe = state?.[TIME_KEY]\r\n  return [activeTimeframe, updateTimeframe]\r\n}\r\n\r\nexport function useStartTimestamp() {\r\n  const [activeWindow] = useTimeframe()\r\n  const [startDateTimestamp, setStartDateTimestamp] = useState()\r\n\r\n  // monitor the old date fetched\r\n  useEffect(() => {\r\n    let startTime =\r\n      dayjs\r\n        .utc()\r\n        .subtract(\r\n          1,\r\n          activeWindow === timeframeOptions.week ? 'week' : activeWindow === timeframeOptions.ALL_TIME ? 'year' : 'year'\r\n        )\r\n        .startOf('day')\r\n        .unix() - 1\r\n    // if we find a new start time less than the current startrtime - update oldest pooint to fetch\r\n    setStartDateTimestamp(startTime)\r\n  }, [activeWindow, startDateTimestamp])\r\n\r\n  return startDateTimestamp\r\n}\r\n\r\n// keep track of session length for refresh ticker\r\nexport function useSessionStart() {\r\n  const [state, { updateSessionStart }] = useApplicationContext()\r\n  const sessionStart = state?.[SESSION_START]\r\n\r\n  useEffect(() => {\r\n    if (!sessionStart) {\r\n      updateSessionStart(Date.now())\r\n    }\r\n  })\r\n\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    let interval = null\r\n    interval = setInterval(() => {\r\n      setSeconds(Date.now() - sessionStart ?? Date.now())\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [seconds, sessionStart])\r\n\r\n  return parseInt(seconds / 1000)\r\n}\r\n\r\nexport function useListedTokens() {\r\n  const [state, { updateSupportedTokens }] = useApplicationContext()\r\n  const supportedTokens = state?.[SUPPORTED_TOKENS]\r\n\r\n  useEffect(() => {\r\n    async function fetchList() {\r\n      const allFetched = await SUPPORTED_LIST_URLS__NO_ENS.reduce(async (fetchedTokens, url) => {\r\n        const newTokens = await getTokenList(url)\r\n        return Promise.resolve([...newTokens.tokens])\r\n      }, Promise.resolve([]))\r\n      let formatted = allFetched?.map((t) => t.address.toLowerCase())\r\n\r\n      updateSupportedTokens(formatted)\r\n    }\r\n    if (!supportedTokens) {\r\n      fetchList()\r\n    }\r\n  }, [updateSupportedTokens, supportedTokens])\r\n\r\n  return supportedTokens\r\n}\r\n"]},"metadata":{},"sourceType":"module"}